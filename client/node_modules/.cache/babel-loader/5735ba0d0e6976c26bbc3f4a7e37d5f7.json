{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.collectUsableIds = exports.getCommandIdPermutations = exports.getPermutations = exports.Debug = exports.uniq = exports.compact = exports.loadJSON = exports.resolvePackage = exports.exists = exports.mapValues = exports.flatMap = void 0;\n\nconst fs = require(\"fs\");\n\nconst debug = require('debug');\n\nfunction flatMap(arr, fn) {\n  return arr.reduce((arr, i) => arr.concat(fn(i)), []);\n}\n\nexports.flatMap = flatMap;\n\nfunction mapValues(obj, fn) {\n  return Object.entries(obj).reduce((o, [k, v]) => {\n    o[k] = fn(v, k);\n    return o;\n  }, {});\n}\n\nexports.mapValues = mapValues;\n\nfunction exists(path) {\n  // eslint-disable-next-line no-promise-executor-return\n  return new Promise(resolve => resolve(fs.existsSync(path)));\n}\n\nexports.exists = exists;\n\nfunction resolvePackage(id, paths) {\n  return require.resolve(id, paths);\n}\n\nexports.resolvePackage = resolvePackage;\n\nfunction loadJSON(path) {\n  debug('config')('loadJSON %s', path);\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, 'utf8', (err, d) => {\n      try {\n        if (err) reject(err);else resolve(JSON.parse(d));\n      } catch (error) {\n        reject(error);\n      }\n    });\n  });\n}\n\nexports.loadJSON = loadJSON;\n\nfunction compact(a) {\n  return a.filter(a => Boolean(a));\n}\n\nexports.compact = compact;\n\nfunction uniq(arr) {\n  return [...new Set(arr)].sort();\n}\n\nexports.uniq = uniq;\n\nfunction displayWarnings() {\n  if (process.listenerCount('warning') > 1) return;\n  process.on('warning', warning => {\n    console.error(warning.stack);\n    if (warning.detail) console.error(warning.detail);\n  });\n}\n\nfunction Debug(...scope) {\n  if (!debug) return (..._) => {};\n  const d = debug(['config', ...scope].join(':'));\n  if (d.enabled) displayWarnings();\n  return (...args) => d(...args);\n}\n\nexports.Debug = Debug; // Adapted from https://github.com/angus-c/just/blob/master/packages/array-permutations/index.js\n\nfunction getPermutations(arr) {\n  if (arr.length === 0) return [];\n  if (arr.length === 1) return [arr];\n  const output = [];\n  const partialPermutations = getPermutations(arr.slice(1));\n  const first = arr[0];\n\n  for (let i = 0, len = partialPermutations.length; i < len; i++) {\n    const partial = partialPermutations[i];\n\n    for (let j = 0, len2 = partial.length; j <= len2; j++) {\n      const start = partial.slice(0, j);\n      const end = partial.slice(j);\n      const merged = start.concat(first, end);\n      output.push(merged);\n    }\n  }\n\n  return output;\n}\n\nexports.getPermutations = getPermutations;\n\nfunction getCommandIdPermutations(commandId) {\n  return getPermutations(commandId.split(':')).flatMap(c => c.join(':'));\n}\n\nexports.getCommandIdPermutations = getCommandIdPermutations;\n/**\n * Return an array of ids that represent all the usable combinations that a user could enter.\n *\n * For example, if the command ids are:\n * - foo:bar:baz\n * - one:two:three\n * Then the usable ids would be:\n * - foo\n * - foo:bar\n * - foo:bar:baz\n * - one\n * - one:two\n * - one:two:three\n *\n * This allows us to determine which parts of the argv array belong to the command id whenever the topicSeparator is a space.\n *\n * @param commandIds string[]\n * @returns string[]\n */\n\nfunction collectUsableIds(commandIds) {\n  const usuableIds = [];\n\n  for (const id of commandIds) {\n    const parts = id.split(':');\n\n    while (parts.length > 0) {\n      const name = parts.join(':');\n      if (name) usuableIds.push(name);\n      parts.pop();\n    }\n  }\n\n  return uniq(usuableIds).sort();\n}\n\nexports.collectUsableIds = collectUsableIds;","map":{"version":3,"names":["Object","defineProperty","exports","value","collectUsableIds","getCommandIdPermutations","getPermutations","Debug","uniq","compact","loadJSON","resolvePackage","exists","mapValues","flatMap","fs","require","debug","arr","fn","reduce","i","concat","obj","entries","o","k","v","path","Promise","resolve","existsSync","id","paths","reject","readFile","err","d","JSON","parse","error","a","filter","Boolean","Set","sort","displayWarnings","process","listenerCount","on","warning","console","stack","detail","scope","_","join","enabled","args","length","output","partialPermutations","slice","first","len","partial","j","len2","start","end","merged","push","commandId","split","c","commandIds","usuableIds","parts","name","pop"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/@oclif/core/lib/config/util.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.collectUsableIds = exports.getCommandIdPermutations = exports.getPermutations = exports.Debug = exports.uniq = exports.compact = exports.loadJSON = exports.resolvePackage = exports.exists = exports.mapValues = exports.flatMap = void 0;\nconst fs = require(\"fs\");\nconst debug = require('debug');\nfunction flatMap(arr, fn) {\n    return arr.reduce((arr, i) => arr.concat(fn(i)), []);\n}\nexports.flatMap = flatMap;\nfunction mapValues(obj, fn) {\n    return Object.entries(obj)\n        .reduce((o, [k, v]) => {\n        o[k] = fn(v, k);\n        return o;\n    }, {});\n}\nexports.mapValues = mapValues;\nfunction exists(path) {\n    // eslint-disable-next-line no-promise-executor-return\n    return new Promise(resolve => resolve(fs.existsSync(path)));\n}\nexports.exists = exists;\nfunction resolvePackage(id, paths) {\n    return require.resolve(id, paths);\n}\nexports.resolvePackage = resolvePackage;\nfunction loadJSON(path) {\n    debug('config')('loadJSON %s', path);\n    return new Promise((resolve, reject) => {\n        fs.readFile(path, 'utf8', (err, d) => {\n            try {\n                if (err)\n                    reject(err);\n                else\n                    resolve(JSON.parse(d));\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n    });\n}\nexports.loadJSON = loadJSON;\nfunction compact(a) {\n    return a.filter((a) => Boolean(a));\n}\nexports.compact = compact;\nfunction uniq(arr) {\n    return [...new Set(arr)].sort();\n}\nexports.uniq = uniq;\nfunction displayWarnings() {\n    if (process.listenerCount('warning') > 1)\n        return;\n    process.on('warning', (warning) => {\n        console.error(warning.stack);\n        if (warning.detail)\n            console.error(warning.detail);\n    });\n}\nfunction Debug(...scope) {\n    if (!debug)\n        return (..._) => { };\n    const d = debug(['config', ...scope].join(':'));\n    if (d.enabled)\n        displayWarnings();\n    return (...args) => d(...args);\n}\nexports.Debug = Debug;\n// Adapted from https://github.com/angus-c/just/blob/master/packages/array-permutations/index.js\nfunction getPermutations(arr) {\n    if (arr.length === 0)\n        return [];\n    if (arr.length === 1)\n        return [arr];\n    const output = [];\n    const partialPermutations = getPermutations(arr.slice(1));\n    const first = arr[0];\n    for (let i = 0, len = partialPermutations.length; i < len; i++) {\n        const partial = partialPermutations[i];\n        for (let j = 0, len2 = partial.length; j <= len2; j++) {\n            const start = partial.slice(0, j);\n            const end = partial.slice(j);\n            const merged = start.concat(first, end);\n            output.push(merged);\n        }\n    }\n    return output;\n}\nexports.getPermutations = getPermutations;\nfunction getCommandIdPermutations(commandId) {\n    return getPermutations(commandId.split(':')).flatMap(c => c.join(':'));\n}\nexports.getCommandIdPermutations = getCommandIdPermutations;\n/**\n * Return an array of ids that represent all the usable combinations that a user could enter.\n *\n * For example, if the command ids are:\n * - foo:bar:baz\n * - one:two:three\n * Then the usable ids would be:\n * - foo\n * - foo:bar\n * - foo:bar:baz\n * - one\n * - one:two\n * - one:two:three\n *\n * This allows us to determine which parts of the argv array belong to the command id whenever the topicSeparator is a space.\n *\n * @param commandIds string[]\n * @returns string[]\n */\nfunction collectUsableIds(commandIds) {\n    const usuableIds = [];\n    for (const id of commandIds) {\n        const parts = id.split(':');\n        while (parts.length > 0) {\n            const name = parts.join(':');\n            if (name)\n                usuableIds.push(name);\n            parts.pop();\n        }\n    }\n    return uniq(usuableIds).sort();\n}\nexports.collectUsableIds = collectUsableIds;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}