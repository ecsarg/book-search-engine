{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _http = _interopRequireDefault(require(\"http\"));\n\nvar _https = _interopRequireDefault(require(\"https\"));\n\nvar _boolean = require(\"boolean\");\n\nvar _semver = _interopRequireDefault(require(\"semver\"));\n\nvar _Logger = _interopRequireDefault(require(\"../Logger\"));\n\nvar _classes = require(\"../classes\");\n\nvar _errors = require(\"../errors\");\n\nvar _utilities = require(\"../utilities\");\n\nvar _createProxyController = _interopRequireDefault(require(\"./createProxyController\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst httpGet = _http.default.get;\nconst httpRequest = _http.default.request;\nconst httpsGet = _https.default.get;\nconst httpsRequest = _https.default.request;\n\nconst log = _Logger.default.child({\n  namespace: 'createGlobalProxyAgent'\n});\n\nconst defaultConfigurationInput = {\n  environmentVariableNamespace: undefined,\n  forceGlobalAgent: undefined,\n  socketConnectionTimeout: 60000\n};\n\nconst omitUndefined = subject => {\n  const keys = Object.keys(subject);\n  const result = {};\n\n  for (const key of keys) {\n    const value = subject[key];\n\n    if (value !== undefined) {\n      result[key] = value;\n    }\n  }\n\n  return result;\n};\n\nconst createConfiguration = configurationInput => {\n  // eslint-disable-next-line no-process-env\n  const environment = process.env;\n  const defaultConfiguration = {\n    environmentVariableNamespace: typeof environment.GLOBAL_AGENT_ENVIRONMENT_VARIABLE_NAMESPACE === 'string' ? environment.GLOBAL_AGENT_ENVIRONMENT_VARIABLE_NAMESPACE : 'GLOBAL_AGENT_',\n    forceGlobalAgent: typeof environment.GLOBAL_AGENT_FORCE_GLOBAL_AGENT === 'string' ? (0, _boolean.boolean)(environment.GLOBAL_AGENT_FORCE_GLOBAL_AGENT) : true,\n    socketConnectionTimeout: typeof environment.GLOBAL_AGENT_SOCKET_CONNECTION_TIMEOUT === 'string' ? Number.parseInt(environment.GLOBAL_AGENT_SOCKET_CONNECTION_TIMEOUT, 10) : defaultConfigurationInput.socketConnectionTimeout\n  }; // $FlowFixMe\n\n  return { ...defaultConfiguration,\n    ...omitUndefined(configurationInput)\n  };\n};\n\nconst createGlobalProxyAgent = (configurationInput = defaultConfigurationInput) => {\n  const configuration = createConfiguration(configurationInput);\n  const proxyController = (0, _createProxyController.default)(); // eslint-disable-next-line no-process-env\n\n  proxyController.HTTP_PROXY = process.env[configuration.environmentVariableNamespace + 'HTTP_PROXY'] || null; // eslint-disable-next-line no-process-env\n\n  proxyController.HTTPS_PROXY = process.env[configuration.environmentVariableNamespace + 'HTTPS_PROXY'] || null; // eslint-disable-next-line no-process-env\n\n  proxyController.NO_PROXY = process.env[configuration.environmentVariableNamespace + 'NO_PROXY'] || null;\n  log.info({\n    configuration,\n    state: proxyController\n  }, 'global agent has been initialized');\n\n  const mustUrlUseProxy = getProxy => {\n    return url => {\n      if (!getProxy()) {\n        return false;\n      }\n\n      if (!proxyController.NO_PROXY) {\n        return true;\n      }\n\n      return !(0, _utilities.isUrlMatchingNoProxy)(url, proxyController.NO_PROXY);\n    };\n  };\n\n  const getUrlProxy = getProxy => {\n    return () => {\n      const proxy = getProxy();\n\n      if (!proxy) {\n        throw new _errors.UnexpectedStateError('HTTP(S) proxy must be configured.');\n      }\n\n      return (0, _utilities.parseProxyUrl)(proxy);\n    };\n  };\n\n  const getHttpProxy = () => {\n    return proxyController.HTTP_PROXY;\n  };\n\n  const BoundHttpProxyAgent = class extends _classes.HttpProxyAgent {\n    constructor() {\n      super(() => {\n        return getHttpProxy();\n      }, mustUrlUseProxy(getHttpProxy), getUrlProxy(getHttpProxy), _http.default.globalAgent, configuration.socketConnectionTimeout);\n    }\n\n  };\n  const httpAgent = new BoundHttpProxyAgent();\n\n  const getHttpsProxy = () => {\n    return proxyController.HTTPS_PROXY || proxyController.HTTP_PROXY;\n  };\n\n  const BoundHttpsProxyAgent = class extends _classes.HttpsProxyAgent {\n    constructor() {\n      super(() => {\n        return getHttpsProxy();\n      }, mustUrlUseProxy(getHttpsProxy), getUrlProxy(getHttpsProxy), _https.default.globalAgent, configuration.socketConnectionTimeout);\n    }\n\n  };\n  const httpsAgent = new BoundHttpsProxyAgent(); // Overriding globalAgent was added in v11.7.\n  // @see https://nodejs.org/uk/blog/release/v11.7.0/\n\n  if (_semver.default.gte(process.version, 'v11.7.0')) {\n    // @see https://github.com/facebook/flow/issues/7670\n    // $FlowFixMe\n    _http.default.globalAgent = httpAgent; // $FlowFixMe\n\n    _https.default.globalAgent = httpsAgent;\n  } // The reason this logic is used in addition to overriding http(s).globalAgent\n  // is because there is no guarantee that we set http(s).globalAgent variable\n  // before an instance of http(s).Agent has been already constructed by someone,\n  // e.g. Stripe SDK creates instances of http(s).Agent at the top-level.\n  // @see https://github.com/gajus/global-agent/pull/13\n  //\n  // We still want to override http(s).globalAgent when possible to enable logic\n  // in `bindHttpMethod`.\n\n\n  if (_semver.default.gte(process.version, 'v10.0.0')) {\n    // $FlowFixMe\n    _http.default.get = (0, _utilities.bindHttpMethod)(httpGet, httpAgent, configuration.forceGlobalAgent); // $FlowFixMe\n\n    _http.default.request = (0, _utilities.bindHttpMethod)(httpRequest, httpAgent, configuration.forceGlobalAgent); // $FlowFixMe\n\n    _https.default.get = (0, _utilities.bindHttpMethod)(httpsGet, httpsAgent, configuration.forceGlobalAgent); // $FlowFixMe\n\n    _https.default.request = (0, _utilities.bindHttpMethod)(httpsRequest, httpsAgent, configuration.forceGlobalAgent);\n  } else {\n    log.warn('attempt to initialize global-agent in unsupported Node.js version was ignored');\n  }\n\n  return proxyController;\n};\n\nvar _default = createGlobalProxyAgent;\nexports.default = _default;","map":{"version":3,"sources":["../../src/factories/createGlobalProxyAgent.js"],"names":["httpGet","http","httpRequest","httpsGet","https","httpsRequest","log","namespace","defaultConfigurationInput","environmentVariableNamespace","forceGlobalAgent","socketConnectionTimeout","omitUndefined","subject","keys","Object","result","value","createConfiguration","configurationInput","environment","process","defaultConfiguration","Number","configuration","proxyController","state","mustUrlUseProxy","getProxy","url","getUrlProxy","proxy","UnexpectedStateError","getHttpProxy","BoundHttpProxyAgent","HttpProxyAgent","constructor","httpAgent","getHttpsProxy","BoundHttpsProxyAgent","HttpsProxyAgent","httpsAgent","semver"],"mappings":"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","sourcesContent":["// @flow\n\nimport http from 'http';\nimport https from 'https';\nimport {\n  boolean as parseBoolean,\n} from 'boolean';\nimport semver from 'semver';\nimport Logger from '../Logger';\nimport {\n  HttpProxyAgent,\n  HttpsProxyAgent,\n} from '../classes';\nimport {\n  UnexpectedStateError,\n} from '../errors';\nimport {\n  bindHttpMethod,\n  isUrlMatchingNoProxy,\n  parseProxyUrl,\n} from '../utilities';\nimport type {\n  ProxyAgentConfigurationInputType,\n  ProxyAgentConfigurationType,\n} from '../types';\nimport createProxyController from './createProxyController';\n\nconst httpGet = http.get;\nconst httpRequest = http.request;\nconst httpsGet = https.get;\nconst httpsRequest = https.request;\n\nconst log = Logger.child({\n  namespace: 'createGlobalProxyAgent',\n});\n\nconst defaultConfigurationInput = {\n  environmentVariableNamespace: undefined,\n  forceGlobalAgent: undefined,\n  socketConnectionTimeout: 60000,\n};\n\nconst omitUndefined = (subject) => {\n  const keys = Object.keys(subject);\n\n  const result = {};\n\n  for (const key of keys) {\n    const value = subject[key];\n\n    if (value !== undefined) {\n      result[key] = value;\n    }\n  }\n\n  return result;\n};\n\nconst createConfiguration = (configurationInput: ProxyAgentConfigurationInputType): ProxyAgentConfigurationType => {\n  // eslint-disable-next-line no-process-env\n  const environment = process.env;\n\n  const defaultConfiguration = {\n    environmentVariableNamespace: typeof environment.GLOBAL_AGENT_ENVIRONMENT_VARIABLE_NAMESPACE === 'string' ? environment.GLOBAL_AGENT_ENVIRONMENT_VARIABLE_NAMESPACE : 'GLOBAL_AGENT_',\n    forceGlobalAgent: typeof environment.GLOBAL_AGENT_FORCE_GLOBAL_AGENT === 'string' ? parseBoolean(environment.GLOBAL_AGENT_FORCE_GLOBAL_AGENT) : true,\n    socketConnectionTimeout: typeof environment.GLOBAL_AGENT_SOCKET_CONNECTION_TIMEOUT === 'string' ? Number.parseInt(environment.GLOBAL_AGENT_SOCKET_CONNECTION_TIMEOUT, 10) : defaultConfigurationInput.socketConnectionTimeout,\n  };\n\n  // $FlowFixMe\n  return {\n    ...defaultConfiguration,\n    ...omitUndefined(configurationInput),\n  };\n};\n\nexport default (configurationInput: ProxyAgentConfigurationInputType = defaultConfigurationInput) => {\n  const configuration = createConfiguration(configurationInput);\n\n  const proxyController = createProxyController();\n\n  // eslint-disable-next-line no-process-env\n  proxyController.HTTP_PROXY = process.env[configuration.environmentVariableNamespace + 'HTTP_PROXY'] || null;\n\n  // eslint-disable-next-line no-process-env\n  proxyController.HTTPS_PROXY = process.env[configuration.environmentVariableNamespace + 'HTTPS_PROXY'] || null;\n\n  // eslint-disable-next-line no-process-env\n  proxyController.NO_PROXY = process.env[configuration.environmentVariableNamespace + 'NO_PROXY'] || null;\n\n  log.info({\n    configuration,\n    state: proxyController,\n  }, 'global agent has been initialized');\n\n  const mustUrlUseProxy = (getProxy) => {\n    return (url) => {\n      if (!getProxy()) {\n        return false;\n      }\n\n      if (!proxyController.NO_PROXY) {\n        return true;\n      }\n\n      return !isUrlMatchingNoProxy(url, proxyController.NO_PROXY);\n    };\n  };\n\n  const getUrlProxy = (getProxy) => {\n    return () => {\n      const proxy = getProxy();\n\n      if (!proxy) {\n        throw new UnexpectedStateError('HTTP(S) proxy must be configured.');\n      }\n\n      return parseProxyUrl(proxy);\n    };\n  };\n\n  const getHttpProxy = () => {\n    return proxyController.HTTP_PROXY;\n  };\n\n  const BoundHttpProxyAgent = class extends HttpProxyAgent {\n    constructor () {\n      super(\n        () => {\n          return getHttpProxy();\n        },\n        mustUrlUseProxy(getHttpProxy),\n        getUrlProxy(getHttpProxy),\n        http.globalAgent,\n        configuration.socketConnectionTimeout,\n      );\n    }\n  };\n\n  const httpAgent = new BoundHttpProxyAgent();\n\n  const getHttpsProxy = () => {\n    return proxyController.HTTPS_PROXY || proxyController.HTTP_PROXY;\n  };\n\n  const BoundHttpsProxyAgent = class extends HttpsProxyAgent {\n    constructor () {\n      super(\n        () => {\n          return getHttpsProxy();\n        },\n        mustUrlUseProxy(getHttpsProxy),\n        getUrlProxy(getHttpsProxy),\n        https.globalAgent,\n        configuration.socketConnectionTimeout,\n      );\n    }\n  };\n\n  const httpsAgent = new BoundHttpsProxyAgent();\n\n  // Overriding globalAgent was added in v11.7.\n  // @see https://nodejs.org/uk/blog/release/v11.7.0/\n  if (semver.gte(process.version, 'v11.7.0')) {\n    // @see https://github.com/facebook/flow/issues/7670\n    // $FlowFixMe\n    http.globalAgent = httpAgent;\n\n    // $FlowFixMe\n    https.globalAgent = httpsAgent;\n  }\n\n  // The reason this logic is used in addition to overriding http(s).globalAgent\n  // is because there is no guarantee that we set http(s).globalAgent variable\n  // before an instance of http(s).Agent has been already constructed by someone,\n  // e.g. Stripe SDK creates instances of http(s).Agent at the top-level.\n  // @see https://github.com/gajus/global-agent/pull/13\n  //\n  // We still want to override http(s).globalAgent when possible to enable logic\n  // in `bindHttpMethod`.\n  if (semver.gte(process.version, 'v10.0.0')) {\n    // $FlowFixMe\n    http.get = bindHttpMethod(httpGet, httpAgent, configuration.forceGlobalAgent);\n\n    // $FlowFixMe\n    http.request = bindHttpMethod(httpRequest, httpAgent, configuration.forceGlobalAgent);\n\n    // $FlowFixMe\n    https.get = bindHttpMethod(httpsGet, httpsAgent, configuration.forceGlobalAgent);\n\n    // $FlowFixMe\n    https.request = bindHttpMethod(httpsRequest, httpsAgent, configuration.forceGlobalAgent);\n  } else {\n    log.warn('attempt to initialize global-agent in unsupported Node.js version was ignored');\n  }\n\n  return proxyController;\n};\n"]},"metadata":{},"sourceType":"script"}