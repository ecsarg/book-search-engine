{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.printWithReducedWhitespace = exports.removeAliases = exports.sortAST = exports.dropUnusedDefinitions = exports.hideStringAndNumericLiterals = exports.hideLiterals = void 0;\n\nconst visitor_1 = require(\"graphql/language/visitor\");\n\nconst printer_1 = require(\"graphql/language/printer\");\n\nconst utilities_1 = require(\"graphql/utilities\");\n\nconst lodash_sortby_1 = __importDefault(require(\"lodash.sortby\"));\n\nfunction hideLiterals(ast) {\n  return (0, visitor_1.visit)(ast, {\n    IntValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"0\"\n      });\n    },\n\n    FloatValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"0\"\n      });\n    },\n\n    StringValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"\",\n        block: false\n      });\n    },\n\n    ListValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        values: []\n      });\n    },\n\n    ObjectValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        fields: []\n      });\n    }\n\n  });\n}\n\nexports.hideLiterals = hideLiterals;\n\nfunction hideStringAndNumericLiterals(ast) {\n  return (0, visitor_1.visit)(ast, {\n    IntValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"0\"\n      });\n    },\n\n    FloatValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"0\"\n      });\n    },\n\n    StringValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"\",\n        block: false\n      });\n    }\n\n  });\n}\n\nexports.hideStringAndNumericLiterals = hideStringAndNumericLiterals;\n\nfunction dropUnusedDefinitions(ast, operationName) {\n  const separated = (0, utilities_1.separateOperations)(ast)[operationName];\n\n  if (!separated) {\n    return ast;\n  }\n\n  return separated;\n}\n\nexports.dropUnusedDefinitions = dropUnusedDefinitions;\n\nfunction sorted(items, ...iteratees) {\n  if (items) {\n    return (0, lodash_sortby_1.default)(items, ...iteratees);\n  }\n\n  return undefined;\n}\n\nfunction sortAST(ast) {\n  return (0, visitor_1.visit)(ast, {\n    Document(node) {\n      return Object.assign(Object.assign({}, node), {\n        definitions: (0, lodash_sortby_1.default)(node.definitions, \"kind\", \"name.value\")\n      });\n    },\n\n    OperationDefinition(node) {\n      return Object.assign(Object.assign({}, node), {\n        variableDefinitions: sorted(node.variableDefinitions, \"variable.name.value\")\n      });\n    },\n\n    SelectionSet(node) {\n      return Object.assign(Object.assign({}, node), {\n        selections: (0, lodash_sortby_1.default)(node.selections, \"kind\", \"name.value\")\n      });\n    },\n\n    Field(node) {\n      return Object.assign(Object.assign({}, node), {\n        arguments: sorted(node.arguments, \"name.value\")\n      });\n    },\n\n    FragmentSpread(node) {\n      return Object.assign(Object.assign({}, node), {\n        directives: sorted(node.directives, \"name.value\")\n      });\n    },\n\n    InlineFragment(node) {\n      return Object.assign(Object.assign({}, node), {\n        directives: sorted(node.directives, \"name.value\")\n      });\n    },\n\n    FragmentDefinition(node) {\n      return Object.assign(Object.assign({}, node), {\n        directives: sorted(node.directives, \"name.value\"),\n        variableDefinitions: sorted(node.variableDefinitions, \"variable.name.value\")\n      });\n    },\n\n    Directive(node) {\n      return Object.assign(Object.assign({}, node), {\n        arguments: sorted(node.arguments, \"name.value\")\n      });\n    }\n\n  });\n}\n\nexports.sortAST = sortAST;\n\nfunction removeAliases(ast) {\n  return (0, visitor_1.visit)(ast, {\n    Field(node) {\n      return Object.assign(Object.assign({}, node), {\n        alias: undefined\n      });\n    }\n\n  });\n}\n\nexports.removeAliases = removeAliases;\n\nfunction printWithReducedWhitespace(ast) {\n  const sanitizedAST = (0, visitor_1.visit)(ast, {\n    StringValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: Buffer.from(node.value, \"utf8\").toString(\"hex\"),\n        block: false\n      });\n    }\n\n  });\n  const withWhitespace = (0, printer_1.print)(sanitizedAST);\n  const minimizedButStillHex = withWhitespace.replace(/\\s+/g, \" \").replace(/([^_a-zA-Z0-9]) /g, (_, c) => c).replace(/ ([^_a-zA-Z0-9])/g, (_, c) => c);\n  return minimizedButStillHex.replace(/\"([a-f0-9]+)\"/g, (_, hex) => JSON.stringify(Buffer.from(hex, \"hex\").toString(\"utf8\")));\n}\n\nexports.printWithReducedWhitespace = printWithReducedWhitespace;","map":{"version":3,"sources":["../src/transforms.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.printWithReducedWhitespace = exports.removeAliases = exports.sortAST = exports.dropUnusedDefinitions = exports.hideStringAndNumericLiterals = exports.hideLiterals = void 0;\nconst visitor_1 = require(\"graphql/language/visitor\");\nconst printer_1 = require(\"graphql/language/printer\");\nconst utilities_1 = require(\"graphql/utilities\");\nconst lodash_sortby_1 = __importDefault(require(\"lodash.sortby\"));\nfunction hideLiterals(ast) {\n    return (0, visitor_1.visit)(ast, {\n        IntValue(node) {\n            return Object.assign(Object.assign({}, node), { value: \"0\" });\n        },\n        FloatValue(node) {\n            return Object.assign(Object.assign({}, node), { value: \"0\" });\n        },\n        StringValue(node) {\n            return Object.assign(Object.assign({}, node), { value: \"\", block: false });\n        },\n        ListValue(node) {\n            return Object.assign(Object.assign({}, node), { values: [] });\n        },\n        ObjectValue(node) {\n            return Object.assign(Object.assign({}, node), { fields: [] });\n        },\n    });\n}\nexports.hideLiterals = hideLiterals;\nfunction hideStringAndNumericLiterals(ast) {\n    return (0, visitor_1.visit)(ast, {\n        IntValue(node) {\n            return Object.assign(Object.assign({}, node), { value: \"0\" });\n        },\n        FloatValue(node) {\n            return Object.assign(Object.assign({}, node), { value: \"0\" });\n        },\n        StringValue(node) {\n            return Object.assign(Object.assign({}, node), { value: \"\", block: false });\n        },\n    });\n}\nexports.hideStringAndNumericLiterals = hideStringAndNumericLiterals;\nfunction dropUnusedDefinitions(ast, operationName) {\n    const separated = (0, utilities_1.separateOperations)(ast)[operationName];\n    if (!separated) {\n        return ast;\n    }\n    return separated;\n}\nexports.dropUnusedDefinitions = dropUnusedDefinitions;\nfunction sorted(items, ...iteratees) {\n    if (items) {\n        return (0, lodash_sortby_1.default)(items, ...iteratees);\n    }\n    return undefined;\n}\nfunction sortAST(ast) {\n    return (0, visitor_1.visit)(ast, {\n        Document(node) {\n            return Object.assign(Object.assign({}, node), { definitions: (0, lodash_sortby_1.default)(node.definitions, \"kind\", \"name.value\") });\n        },\n        OperationDefinition(node) {\n            return Object.assign(Object.assign({}, node), { variableDefinitions: sorted(node.variableDefinitions, \"variable.name.value\") });\n        },\n        SelectionSet(node) {\n            return Object.assign(Object.assign({}, node), { selections: (0, lodash_sortby_1.default)(node.selections, \"kind\", \"name.value\") });\n        },\n        Field(node) {\n            return Object.assign(Object.assign({}, node), { arguments: sorted(node.arguments, \"name.value\") });\n        },\n        FragmentSpread(node) {\n            return Object.assign(Object.assign({}, node), { directives: sorted(node.directives, \"name.value\") });\n        },\n        InlineFragment(node) {\n            return Object.assign(Object.assign({}, node), { directives: sorted(node.directives, \"name.value\") });\n        },\n        FragmentDefinition(node) {\n            return Object.assign(Object.assign({}, node), { directives: sorted(node.directives, \"name.value\"), variableDefinitions: sorted(node.variableDefinitions, \"variable.name.value\") });\n        },\n        Directive(node) {\n            return Object.assign(Object.assign({}, node), { arguments: sorted(node.arguments, \"name.value\") });\n        },\n    });\n}\nexports.sortAST = sortAST;\nfunction removeAliases(ast) {\n    return (0, visitor_1.visit)(ast, {\n        Field(node) {\n            return Object.assign(Object.assign({}, node), { alias: undefined });\n        },\n    });\n}\nexports.removeAliases = removeAliases;\nfunction printWithReducedWhitespace(ast) {\n    const sanitizedAST = (0, visitor_1.visit)(ast, {\n        StringValue(node) {\n            return Object.assign(Object.assign({}, node), { value: Buffer.from(node.value, \"utf8\").toString(\"hex\"), block: false });\n        },\n    });\n    const withWhitespace = (0, printer_1.print)(sanitizedAST);\n    const minimizedButStillHex = withWhitespace\n        .replace(/\\s+/g, \" \")\n        .replace(/([^_a-zA-Z0-9]) /g, (_, c) => c)\n        .replace(/ ([^_a-zA-Z0-9])/g, (_, c) => c);\n    return minimizedButStillHex.replace(/\"([a-f0-9]+)\"/g, (_, hex) => JSON.stringify(Buffer.from(hex, \"hex\").toString(\"utf8\")));\n}\nexports.printWithReducedWhitespace = printWithReducedWhitespace;\n//# sourceMappingURL=transforms.js.map"]},"metadata":{},"sourceType":"script"}