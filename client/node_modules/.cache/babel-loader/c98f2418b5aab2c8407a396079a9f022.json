{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.providesFieldsMissingExternal = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst providesFieldsMissingExternal = ({\n  schema,\n  serviceList\n}) => {\n  var _a, _b;\n\n  const errors = [];\n  const types = schema.getTypeMap();\n\n  for (const [typeName, namedType] of Object.entries(types)) {\n    if (!graphql_1.isObjectType(namedType)) continue;\n\n    for (const [fieldName, field] of Object.entries(namedType.getFields())) {\n      const fieldFederationMetadata = utils_1.getFederationMetadata(field);\n      const serviceName = fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.serviceName;\n      if (!serviceName) continue;\n      const fieldType = field.type;\n      if (!graphql_1.isObjectType(fieldType)) continue;\n      const fieldTypeFederationMetadata = utils_1.getFederationMetadata(fieldType);\n      const externalFieldsOnTypeForService = (_a = fieldTypeFederationMetadata === null || fieldTypeFederationMetadata === void 0 ? void 0 : fieldTypeFederationMetadata.externals) === null || _a === void 0 ? void 0 : _a[serviceName];\n\n      if (fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.provides) {\n        const selections = fieldFederationMetadata.provides;\n\n        for (const selection of selections) {\n          const foundMatchingExternal = externalFieldsOnTypeForService ? externalFieldsOnTypeForService.some(ext => ext.field.name.value === selection.name.value) : undefined;\n\n          if (!foundMatchingExternal) {\n            const typeNode = utils_1.findTypeNodeInServiceList(typeName, serviceName, serviceList);\n            errors.push(utils_1.errorWithCode('PROVIDES_FIELDS_MISSING_EXTERNAL', utils_1.logServiceAndType(serviceName, typeName, fieldName) + `provides the field \\`${selection.name.value}\\` and requires ${fieldType}.${selection.name.value} to be marked as @external.`, typeNode && 'fields' in typeNode ? (_b = typeNode === null || typeNode === void 0 ? void 0 : typeNode.fields) === null || _b === void 0 ? void 0 : _b.find(field => field.name.value === selection.name.value) : undefined));\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};\n\nexports.providesFieldsMissingExternal = providesFieldsMissingExternal;","map":{"version":3,"sources":["../../../../src/composition/validate/postComposition/providesFieldsMissingExternal.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAMO,MAAM,6BAA6B,GAA6B,CAAC;EACtE,MADsE;EAEtE;AAFsE,CAAD,KAGlE;;;EACH,MAAM,MAAM,GAAmB,EAA/B;EAEA,MAAM,KAAK,GAAG,MAAM,CAAC,UAAP,EAAd;;EACA,KAAK,MAAM,CAAC,QAAD,EAAW,SAAX,CAAX,IAAoC,MAAM,CAAC,OAAP,CAAe,KAAf,CAApC,EAA2D;IAEzD,IAAI,CAAC,SAAA,CAAA,YAAA,CAAa,SAAb,CAAL,EAA8B;;IAI9B,KAAK,MAAM,CAAC,SAAD,EAAY,KAAZ,CAAX,IAAiC,MAAM,CAAC,OAAP,CAAe,SAAS,CAAC,SAAV,EAAf,CAAjC,EAAwE;MACtE,MAAM,uBAAuB,GAAG,OAAA,CAAA,qBAAA,CAAsB,KAAtB,CAAhC;MACA,MAAM,WAAW,GAAG,uBAAuB,KAAA,IAAvB,IAAA,uBAAuB,KAAA,KAAA,CAAvB,GAAuB,KAAA,CAAvB,GAAA,uBAAuB,CAAE,WAA7C;MAMA,IAAI,CAAC,WAAL,EAAkB;MAElB,MAAM,SAAS,GAAG,KAAK,CAAC,IAAxB;MACA,IAAI,CAAC,SAAA,CAAA,YAAA,CAAa,SAAb,CAAL,EAA8B;MAE9B,MAAM,2BAA2B,GAAG,OAAA,CAAA,qBAAA,CAAsB,SAAtB,CAApC;MAEA,MAAM,8BAA8B,GAAG,CAAA,EAAA,GAAA,2BAA2B,KAAA,IAA3B,IAAA,2BAA2B,KAAA,KAAA,CAA3B,GAA2B,KAAA,CAA3B,GAAA,2BAA2B,CAAE,SAA7B,MAAsC,IAAtC,IAAsC,EAAA,KAAA,KAAA,CAAtC,GAAsC,KAAA,CAAtC,GAAsC,EAAA,CAAG,WAAH,CAA7E;;MAEA,IAAI,uBAAuB,KAAA,IAAvB,IAAA,uBAAuB,KAAA,KAAA,CAAvB,GAAuB,KAAA,CAAvB,GAAA,uBAAuB,CAAE,QAA7B,EAAuC;QACrC,MAAM,UAAU,GAAG,uBAAuB,CAAC,QAA3C;;QACA,KAAK,MAAM,SAAX,IAAwB,UAAxB,EAAoC;UAClC,MAAM,qBAAqB,GAAG,8BAA8B,GACxD,8BAA8B,CAAC,IAA/B,CACE,GAAG,IAAI,GAAG,CAAC,KAAJ,CAAU,IAAV,CAAe,KAAf,KAAyB,SAAS,CAAC,IAAV,CAAe,KADjD,CADwD,GAIxD,SAJJ;;UAKA,IAAI,CAAC,qBAAL,EAA4B;YAC1B,MAAM,QAAQ,GAAG,OAAA,CAAA,yBAAA,CAA0B,QAA1B,EAAoC,WAApC,EAAiD,WAAjD,CAAjB;YACA,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,kCADF,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,QAA/B,EAAyC,SAAzC,IACE,wBAAwB,SAAS,CAAC,IAAV,CAAe,KAAK,mBAAmB,SAAS,IAAI,SAAS,CAAC,IAAV,CAAe,KAAK,6BAHpG,EAIE,QAAQ,IAAI,YAAY,QAAxB,GACE,CAAA,EAAA,GAAC,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,MAAX,MAAwE,IAAxE,IAAwE,EAAA,KAAA,KAAA,CAAxE,GAAwE,KAAA,CAAxE,GAAwE,EAAA,CAAE,IAAF,CAAO,KAAK,IAAI,KAAK,CAAC,IAAN,CAAW,KAAX,KAAqB,SAAS,CAAC,IAAV,CAAe,KAApD,CAD1E,GACsI,SALxI,CADF;UASD;QACF;MACF;IACF;EACF;;EAED,OAAO,MAAP;AACD,CAxDM;;AAAM,OAAA,CAAA,6BAAA,GAA6B,6BAA7B","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.providesFieldsMissingExternal = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nconst providesFieldsMissingExternal = ({ schema, serviceList, }) => {\n    var _a, _b;\n    const errors = [];\n    const types = schema.getTypeMap();\n    for (const [typeName, namedType] of Object.entries(types)) {\n        if (!graphql_1.isObjectType(namedType))\n            continue;\n        for (const [fieldName, field] of Object.entries(namedType.getFields())) {\n            const fieldFederationMetadata = utils_1.getFederationMetadata(field);\n            const serviceName = fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.serviceName;\n            if (!serviceName)\n                continue;\n            const fieldType = field.type;\n            if (!graphql_1.isObjectType(fieldType))\n                continue;\n            const fieldTypeFederationMetadata = utils_1.getFederationMetadata(fieldType);\n            const externalFieldsOnTypeForService = (_a = fieldTypeFederationMetadata === null || fieldTypeFederationMetadata === void 0 ? void 0 : fieldTypeFederationMetadata.externals) === null || _a === void 0 ? void 0 : _a[serviceName];\n            if (fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.provides) {\n                const selections = fieldFederationMetadata.provides;\n                for (const selection of selections) {\n                    const foundMatchingExternal = externalFieldsOnTypeForService\n                        ? externalFieldsOnTypeForService.some(ext => ext.field.name.value === selection.name.value)\n                        : undefined;\n                    if (!foundMatchingExternal) {\n                        const typeNode = utils_1.findTypeNodeInServiceList(typeName, serviceName, serviceList);\n                        errors.push(utils_1.errorWithCode('PROVIDES_FIELDS_MISSING_EXTERNAL', utils_1.logServiceAndType(serviceName, typeName, fieldName) +\n                            `provides the field \\`${selection.name.value}\\` and requires ${fieldType}.${selection.name.value} to be marked as @external.`, typeNode && 'fields' in typeNode ?\n                            (_b = typeNode === null || typeNode === void 0 ? void 0 : typeNode.fields) === null || _b === void 0 ? void 0 : _b.find(field => field.name.value === selection.name.value) : undefined));\n                    }\n                }\n            }\n        }\n    }\n    return errors;\n};\nexports.providesFieldsMissingExternal = providesFieldsMissingExternal;\n//# sourceMappingURL=providesFieldsMissingExternal.js.map"]},"metadata":{},"sourceType":"script"}