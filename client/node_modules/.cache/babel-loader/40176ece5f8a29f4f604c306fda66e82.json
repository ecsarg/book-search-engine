{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rootFieldUsed = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst rootFieldUsed = ({\n  name: serviceName,\n  typeDefs\n}) => {\n  const errors = [];\n  const defaultRootOperationNames = Object.values(utils_1.defaultRootOperationNameLookup);\n  const disallowedTypeNames = {};\n  let hasSchemaDefinitionOrExtension = false;\n  graphql_1.visit(typeDefs, {\n    OperationTypeDefinition(node) {\n      hasSchemaDefinitionOrExtension = true;\n\n      if (!defaultRootOperationNames.includes(node.type.name.value)) {\n        disallowedTypeNames[utils_1.defaultRootOperationNameLookup[node.operation]] = true;\n      }\n    }\n\n  });\n\n  if (hasSchemaDefinitionOrExtension) {\n    graphql_1.visit(typeDefs, {\n      ObjectTypeDefinition: visitType,\n      ObjectTypeExtension: visitType\n    });\n\n    function visitType(node) {\n      if (disallowedTypeNames[node.name.value]) {\n        const rootOperationName = node.name.value;\n        errors.push(utils_1.errorWithCode(`ROOT_${rootOperationName.toUpperCase()}_USED`, utils_1.logServiceAndType(serviceName, rootOperationName) + `Found invalid use of default root operation name \\`${rootOperationName}\\`. \\`${rootOperationName}\\` is disallowed when \\`Schema.${rootOperationName.toLowerCase()}\\` is set to a type other than \\`${rootOperationName}\\`.`, node));\n      }\n    }\n  }\n\n  return errors;\n};\n\nexports.rootFieldUsed = rootFieldUsed;","map":{"version":3,"sources":["../../../../src/composition/validate/preNormalization/rootFieldUsed.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAOA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAWO,MAAM,aAAa,GAAG,CAAC;EAC5B,IAAI,EAAE,WADsB;EAE5B;AAF4B,CAAD,KAGL;EACtB,MAAM,MAAM,GAAmB,EAA/B;EAGA,MAAM,yBAAyB,GAAG,MAAM,CAAC,MAAP,CAChC,OAAA,CAAA,8BADgC,CAAlC;EAIA,MAAM,mBAAmB,GAErB,EAFJ;EAIA,IAAI,8BAA8B,GAAG,KAArC;EACA,SAAA,CAAA,KAAA,CAAM,QAAN,EAAgB;IACd,uBAAuB,CAAC,IAAD,EAAK;MAG1B,8BAA8B,GAAG,IAAjC;;MAEA,IACE,CAAC,yBAAyB,CAAC,QAA1B,CAAmC,IAAI,CAAC,IAAL,CAAU,IAAV,CACjC,KADF,CADH,EAGE;QACA,mBAAmB,CACjB,OAAA,CAAA,8BAAA,CAA+B,IAAI,CAAC,SAApC,CADiB,CAAnB,GAEI,IAFJ;MAGD;IACF;;EAda,CAAhB;;EAqBA,IAAI,8BAAJ,EAAoC;IAClC,SAAA,CAAA,KAAA,CAAM,QAAN,EAAgB;MACd,oBAAoB,EAAE,SADR;MAEd,mBAAmB,EAAE;IAFP,CAAhB;;IAKA,SAAS,SAAT,CACE,IADF,EAC0D;MAExD,IACE,mBAAmB,CAAC,IAAI,CAAC,IAAL,CAAU,KAAX,CADrB,EAEE;QACA,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAL,CAAU,KAApC;QACA,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,QAAQ,iBAAiB,CAAC,WAAlB,EAA+B,OADzC,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,iBAA/B,IACE,sDAAsD,iBAAiB,SAAS,iBAAiB,kCAAkC,iBAAiB,CAAC,WAAlB,EAA+B,oCAAoC,iBAAiB,KAH3N,EAIE,IAJF,CADF;MAQD;IACF;EACF;;EAED,OAAO,MAAP;AACD,CA/DM;;AAAM,OAAA,CAAA,aAAA,GAAa,aAAb","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rootFieldUsed = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nconst rootFieldUsed = ({ name: serviceName, typeDefs, }) => {\n    const errors = [];\n    const defaultRootOperationNames = Object.values(utils_1.defaultRootOperationNameLookup);\n    const disallowedTypeNames = {};\n    let hasSchemaDefinitionOrExtension = false;\n    graphql_1.visit(typeDefs, {\n        OperationTypeDefinition(node) {\n            hasSchemaDefinitionOrExtension = true;\n            if (!defaultRootOperationNames.includes(node.type.name\n                .value)) {\n                disallowedTypeNames[utils_1.defaultRootOperationNameLookup[node.operation]] = true;\n            }\n        },\n    });\n    if (hasSchemaDefinitionOrExtension) {\n        graphql_1.visit(typeDefs, {\n            ObjectTypeDefinition: visitType,\n            ObjectTypeExtension: visitType,\n        });\n        function visitType(node) {\n            if (disallowedTypeNames[node.name.value]) {\n                const rootOperationName = node.name.value;\n                errors.push(utils_1.errorWithCode(`ROOT_${rootOperationName.toUpperCase()}_USED`, utils_1.logServiceAndType(serviceName, rootOperationName) +\n                    `Found invalid use of default root operation name \\`${rootOperationName}\\`. \\`${rootOperationName}\\` is disallowed when \\`Schema.${rootOperationName.toLowerCase()}\\` is set to a type other than \\`${rootOperationName}\\`.`, node));\n            }\n        }\n    }\n    return errors;\n};\nexports.rootFieldUsed = rootFieldUsed;\n//# sourceMappingURL=rootFieldUsed.js.map"]},"metadata":{},"sourceType":"script"}