{"ast":null,"code":"const _stringWidth = require('string-width');\n\nconst _defaultFormatValue = require('./format-value');\n\nconst _defaultFormatBar = require('./format-bar');\n\nconst _defaultFormatTime = require('./format-time'); // generic formatter\n\n\nmodule.exports = function defaultFormatter(options, params, payload) {\n  // copy format string\n  let s = options.format; // custom time format set ?\n\n  const formatTime = options.formatTime || _defaultFormatTime; // custom value format set ?\n\n  const formatValue = options.formatValue || _defaultFormatValue; // custom bar format set ?\n\n  const formatBar = options.formatBar || _defaultFormatBar; // calculate progress in percent\n\n  const percentage = Math.floor(params.progress * 100) + ''; // bar stopped and stopTime set ?\n\n  const stopTime = params.stopTime || Date.now(); // calculate elapsed time\n\n  const elapsedTime = Math.round((stopTime - params.startTime) / 1000); // merges data from payload and calculated\n\n  const context = Object.assign({}, payload, {\n    bar: formatBar(params.progress, options),\n    percentage: formatValue(percentage, options, 'percentage'),\n    total: formatValue(params.total, options, 'total'),\n    value: formatValue(params.value, options, 'value'),\n    eta: formatValue(params.eta, options, 'eta'),\n    eta_formatted: formatTime(params.eta, options, 5),\n    duration: formatValue(elapsedTime, options, 'duration'),\n    duration_formatted: formatTime(elapsedTime, options, 1)\n  }); // assign placeholder tokens\n\n  s = s.replace(/\\{(\\w+)\\}/g, function (match, key) {\n    // key exists within payload/context\n    if (typeof context[key] !== 'undefined') {\n      return context[key];\n    } // no changes to unknown values\n\n\n    return match;\n  }); // calculate available whitespace (2 characters margin of error)\n\n  const fullMargin = Math.max(0, params.maxWidth - _stringWidth(s) - 2);\n  const halfMargin = Math.floor(fullMargin / 2); // distribute available whitespace according to position\n\n  switch (options.align) {\n    // fill start-of-line with whitespaces\n    case 'right':\n      s = fullMargin > 0 ? ' '.repeat(fullMargin) + s : s;\n      break;\n    // distribute whitespaces to left+right\n\n    case 'center':\n      s = halfMargin > 0 ? ' '.repeat(halfMargin) + s : s;\n      break;\n    // default: left align, no additional whitespaces\n\n    case 'left':\n    default:\n      break;\n  }\n\n  return s;\n};","map":{"version":3,"names":["_stringWidth","require","_defaultFormatValue","_defaultFormatBar","_defaultFormatTime","module","exports","defaultFormatter","options","params","payload","s","format","formatTime","formatValue","formatBar","percentage","Math","floor","progress","stopTime","Date","now","elapsedTime","round","startTime","context","Object","assign","bar","total","value","eta","eta_formatted","duration","duration_formatted","replace","match","key","fullMargin","max","maxWidth","halfMargin","align","repeat"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/cli-progress/lib/formatter.js"],"sourcesContent":["const _stringWidth = require('string-width');\nconst _defaultFormatValue = require('./format-value');\nconst _defaultFormatBar = require('./format-bar');\nconst _defaultFormatTime = require('./format-time');\n\n// generic formatter\nmodule.exports = function defaultFormatter(options, params, payload){\n\n    // copy format string\n    let s = options.format;\n\n    // custom time format set ?\n    const formatTime = options.formatTime || _defaultFormatTime;\n    \n    // custom value format set ?\n    const formatValue = options.formatValue || _defaultFormatValue;\n\n    // custom bar format set ?\n    const formatBar = options.formatBar || _defaultFormatBar;\n\n    // calculate progress in percent\n    const percentage =  Math.floor(params.progress*100) + '';\n\n    // bar stopped and stopTime set ?\n    const stopTime = params.stopTime || Date.now();\n\n    // calculate elapsed time\n    const elapsedTime = Math.round((stopTime - params.startTime)/1000);\n\n    // merges data from payload and calculated\n    const context = Object.assign({}, payload, {\n        bar:                    formatBar(params.progress, options),\n\n        percentage:             formatValue(percentage, options, 'percentage'),\n        total:                  formatValue(params.total, options, 'total'),\n        value:                  formatValue(params.value, options, 'value'),\n\n        eta:                    formatValue(params.eta, options, 'eta'),\n        eta_formatted:          formatTime(params.eta, options, 5),\n        \n        duration:               formatValue(elapsedTime, options, 'duration'),\n        duration_formatted:     formatTime(elapsedTime, options, 1)\n    });\n\n    // assign placeholder tokens\n    s = s.replace(/\\{(\\w+)\\}/g, function(match, key){\n        // key exists within payload/context\n        if (typeof context[key] !== 'undefined') {\n            return context[key];\n        }\n\n        // no changes to unknown values\n        return match;\n    });\n\n    // calculate available whitespace (2 characters margin of error)\n    const fullMargin = Math.max(0, params.maxWidth - _stringWidth(s) -2);\n    const halfMargin = Math.floor(fullMargin / 2);\n\n    // distribute available whitespace according to position\n    switch (options.align) {\n\n        // fill start-of-line with whitespaces\n        case 'right':\n            s = (fullMargin > 0) ? ' '.repeat(fullMargin) + s : s;\n            break;\n\n        // distribute whitespaces to left+right\n        case 'center':\n            s = (halfMargin > 0) ? ' '.repeat(halfMargin) + s : s;\n            break;\n\n        // default: left align, no additional whitespaces\n        case 'left':\n        default:\n            break;\n    }\n\n    return s;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}