{"ast":null,"code":"\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;\n\nconst vscode_jsonrpc_1 = require(\"vscode-jsonrpc\");\n\nconst messages_1 = require(\"./messages\");\n\nvar WorkDoneProgress;\n\n(function (WorkDoneProgress) {\n  WorkDoneProgress.type = new vscode_jsonrpc_1.ProgressType();\n\n  function is(value) {\n    return value === WorkDoneProgress.type;\n  }\n\n  WorkDoneProgress.is = is;\n})(WorkDoneProgress = exports.WorkDoneProgress || (exports.WorkDoneProgress = {}));\n/**\n * The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress\n * reporting from the server.\n */\n\n\nvar WorkDoneProgressCreateRequest;\n\n(function (WorkDoneProgressCreateRequest) {\n  WorkDoneProgressCreateRequest.type = new messages_1.ProtocolRequestType('window/workDoneProgress/create');\n})(WorkDoneProgressCreateRequest = exports.WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = {}));\n/**\n * The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress\n * initiated on the server side.\n */\n\n\nvar WorkDoneProgressCancelNotification;\n\n(function (WorkDoneProgressCancelNotification) {\n  WorkDoneProgressCancelNotification.type = new messages_1.ProtocolNotificationType('window/workDoneProgress/cancel');\n})(WorkDoneProgressCancelNotification = exports.WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","WorkDoneProgressCancelNotification","WorkDoneProgressCreateRequest","WorkDoneProgress","vscode_jsonrpc_1","require","messages_1","type","ProgressType","is","ProtocolRequestType","ProtocolNotificationType"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;\nconst vscode_jsonrpc_1 = require(\"vscode-jsonrpc\");\nconst messages_1 = require(\"./messages\");\nvar WorkDoneProgress;\n(function (WorkDoneProgress) {\n    WorkDoneProgress.type = new vscode_jsonrpc_1.ProgressType();\n    function is(value) {\n        return value === WorkDoneProgress.type;\n    }\n    WorkDoneProgress.is = is;\n})(WorkDoneProgress = exports.WorkDoneProgress || (exports.WorkDoneProgress = {}));\n/**\n * The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress\n * reporting from the server.\n */\nvar WorkDoneProgressCreateRequest;\n(function (WorkDoneProgressCreateRequest) {\n    WorkDoneProgressCreateRequest.type = new messages_1.ProtocolRequestType('window/workDoneProgress/create');\n})(WorkDoneProgressCreateRequest = exports.WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = {}));\n/**\n * The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress\n * initiated on the server side.\n */\nvar WorkDoneProgressCancelNotification;\n(function (WorkDoneProgressCancelNotification) {\n    WorkDoneProgressCancelNotification.type = new messages_1.ProtocolNotificationType('window/workDoneProgress/cancel');\n})(WorkDoneProgressCancelNotification = exports.WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = {}));\n//# sourceMappingURL=protocol.progress.js.map"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kCAAR,GAA6CF,OAAO,CAACG,6BAAR,GAAwCH,OAAO,CAACI,gBAAR,GAA2B,KAAK,CAArH;;AACA,MAAMC,gBAAgB,GAAGC,OAAO,CAAC,gBAAD,CAAhC;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,IAAIF,gBAAJ;;AACA,CAAC,UAAUA,gBAAV,EAA4B;EACzBA,gBAAgB,CAACI,IAAjB,GAAwB,IAAIH,gBAAgB,CAACI,YAArB,EAAxB;;EACA,SAASC,EAAT,CAAYT,KAAZ,EAAmB;IACf,OAAOA,KAAK,KAAKG,gBAAgB,CAACI,IAAlC;EACH;;EACDJ,gBAAgB,CAACM,EAAjB,GAAsBA,EAAtB;AACH,CAND,EAMGN,gBAAgB,GAAGJ,OAAO,CAACI,gBAAR,KAA6BJ,OAAO,CAACI,gBAAR,GAA2B,EAAxD,CANtB;AAOA;AACA;AACA;AACA;;;AACA,IAAID,6BAAJ;;AACA,CAAC,UAAUA,6BAAV,EAAyC;EACtCA,6BAA6B,CAACK,IAA9B,GAAqC,IAAID,UAAU,CAACI,mBAAf,CAAmC,gCAAnC,CAArC;AACH,CAFD,EAEGR,6BAA6B,GAAGH,OAAO,CAACG,6BAAR,KAA0CH,OAAO,CAACG,6BAAR,GAAwC,EAAlF,CAFnC;AAGA;AACA;AACA;AACA;;;AACA,IAAID,kCAAJ;;AACA,CAAC,UAAUA,kCAAV,EAA8C;EAC3CA,kCAAkC,CAACM,IAAnC,GAA0C,IAAID,UAAU,CAACK,wBAAf,CAAwC,gCAAxC,CAA1C;AACH,CAFD,EAEGV,kCAAkC,GAAGF,OAAO,CAACE,kCAAR,KAA+CF,OAAO,CAACE,kCAAR,GAA6C,EAA5F,CAFxC"},"metadata":{},"sourceType":"script"}