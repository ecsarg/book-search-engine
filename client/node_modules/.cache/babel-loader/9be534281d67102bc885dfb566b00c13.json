{"ast":null,"code":"\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConfigurationRequest = void 0;\n\nconst messages_1 = require(\"./messages\");\n/**\n * The 'workspace/configuration' request is sent from the server to the client to fetch a certain\n * configuration setting.\n *\n * This pull model replaces the old push model were the client signaled configuration change via an\n * event. If the server still needs to react to configuration changes (since the server caches the\n * result of `workspace/configuration` requests) the server should register for an empty configuration\n * change event and empty the cache if such an event is received.\n */\n\n\nvar ConfigurationRequest;\n\n(function (ConfigurationRequest) {\n  ConfigurationRequest.type = new messages_1.ProtocolRequestType('workspace/configuration');\n})(ConfigurationRequest = exports.ConfigurationRequest || (exports.ConfigurationRequest = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","ConfigurationRequest","messages_1","require","type","ProtocolRequestType"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigurationRequest = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * The 'workspace/configuration' request is sent from the server to the client to fetch a certain\n * configuration setting.\n *\n * This pull model replaces the old push model were the client signaled configuration change via an\n * event. If the server still needs to react to configuration changes (since the server caches the\n * result of `workspace/configuration` requests) the server should register for an empty configuration\n * change event and empty the cache if such an event is received.\n */\nvar ConfigurationRequest;\n(function (ConfigurationRequest) {\n    ConfigurationRequest.type = new messages_1.ProtocolRequestType('workspace/configuration');\n})(ConfigurationRequest = exports.ConfigurationRequest || (exports.ConfigurationRequest = {}));\n//# sourceMappingURL=protocol.configuration.js.map"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oBAAR,GAA+B,KAAK,CAApC;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIF,oBAAJ;;AACA,CAAC,UAAUA,oBAAV,EAAgC;EAC7BA,oBAAoB,CAACG,IAArB,GAA4B,IAAIF,UAAU,CAACG,mBAAf,CAAmC,yBAAnC,CAA5B;AACH,CAFD,EAEGJ,oBAAoB,GAAGF,OAAO,CAACE,oBAAR,KAAiCF,OAAO,CAACE,oBAAR,GAA+B,EAAhE,CAF1B"},"metadata":{},"sourceType":"script"}