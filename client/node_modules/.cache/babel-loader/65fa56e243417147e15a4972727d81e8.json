{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActionBase = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst castArray_1 = (0, tslib_1.__importDefault)(require(\"lodash/castArray\"));\n\nconst util_1 = require(\"util\");\n\nclass ActionBase {\n  constructor() {\n    this.std = 'stderr';\n    this.stdmockOrigs = {\n      stdout: process.stdout.write,\n      stderr: process.stderr.write\n    };\n  }\n\n  start(action, status, opts = {}) {\n    this.std = opts.stdout ? 'stdout' : 'stderr';\n    const task = {\n      action,\n      status,\n      active: Boolean(this.task && this.task.active)\n    };\n    this.task = task;\n\n    this._start();\n\n    task.active = true;\n\n    this._stdout(true);\n  }\n\n  stop(msg = 'done') {\n    const task = this.task;\n\n    if (!task) {\n      return;\n    }\n\n    this._stop(msg);\n\n    task.active = false;\n    this.task = undefined;\n\n    this._stdout(false);\n  }\n\n  get globals() {\n    global['cli-ux'] = global['cli-ux'] || {};\n    const globals = global['cli-ux'];\n    globals.action = globals.action || {};\n    return globals;\n  }\n\n  get task() {\n    return this.globals.action.task;\n  }\n\n  set task(task) {\n    this.globals.action.task = task;\n  }\n\n  get output() {\n    return this.globals.output;\n  }\n\n  set output(output) {\n    this.globals.output = output;\n  }\n\n  get running() {\n    return Boolean(this.task);\n  }\n\n  get status() {\n    return this.task ? this.task.status : undefined;\n  }\n\n  set status(status) {\n    const task = this.task;\n\n    if (!task) {\n      return;\n    }\n\n    if (task.status === status) {\n      return;\n    }\n\n    this._updateStatus(status, task.status);\n\n    task.status = status;\n  }\n\n  async pauseAsync(fn, icon) {\n    const task = this.task;\n    const active = task && task.active;\n\n    if (task && active) {\n      this._pause(icon);\n\n      this._stdout(false);\n\n      task.active = false;\n    }\n\n    const ret = await fn();\n\n    if (task && active) {\n      this._resume();\n    }\n\n    return ret;\n  }\n\n  pause(fn, icon) {\n    const task = this.task;\n    const active = task && task.active;\n\n    if (task && active) {\n      this._pause(icon);\n\n      this._stdout(false);\n\n      task.active = false;\n    }\n\n    const ret = fn();\n\n    if (task && active) {\n      this._resume();\n    }\n\n    return ret;\n  }\n\n  _start() {\n    throw new Error('not implemented');\n  }\n\n  _stop(_) {\n    throw new Error('not implemented');\n  }\n\n  _resume() {\n    if (this.task) this.start(this.task.action, this.task.status);\n  }\n\n  _pause(_) {\n    throw new Error('not implemented');\n  } // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n  _updateStatus(_, __) {}\n  /**\n   * mock out stdout/stderr so it doesn't screw up the rendering\n   */\n\n\n  _stdout(toggle) {\n    try {\n      const outputs = ['stdout', 'stderr'];\n\n      if (toggle) {\n        if (this.stdmocks) return;\n        this.stdmockOrigs = {\n          stdout: process.stdout.write,\n          stderr: process.stderr.write\n        };\n        this.stdmocks = [];\n\n        for (const std of outputs) {\n          process[std].write = (...args) => {\n            this.stdmocks.push([std, args]);\n          };\n        }\n      } else {\n        if (!this.stdmocks) return; // this._write('stderr', '\\nresetstdmock\\n\\n\\n')\n\n        delete this.stdmocks;\n\n        for (const std of outputs) process[std].write = this.stdmockOrigs[std];\n      }\n    } catch (error) {\n      this._write('stderr', (0, util_1.inspect)(error));\n    }\n  }\n  /**\n   * flush mocked stdout/stderr\n   */\n\n\n  _flushStdout() {\n    try {\n      let output = '';\n      let std;\n\n      while (this.stdmocks && this.stdmocks.length > 0) {\n        const cur = this.stdmocks.shift();\n        std = cur[0];\n\n        this._write(std, cur[1]);\n\n        output += cur[1][0].toString('utf8');\n      } // add newline if there isn't one already\n      // otherwise we'll just overwrite it when we render\n\n\n      if (output && std && output[output.length - 1] !== '\\n') {\n        this._write(std, '\\n');\n      }\n    } catch (error) {\n      this._write('stderr', (0, util_1.inspect)(error));\n    }\n  }\n  /**\n   * write to the real stdout/stderr\n   */\n\n\n  _write(std, s) {\n    this.stdmockOrigs[std].apply(process[std], (0, castArray_1.default)(s));\n  }\n\n}\n\nexports.ActionBase = ActionBase;","map":{"version":3,"names":["Object","defineProperty","exports","value","ActionBase","tslib_1","require","castArray_1","__importDefault","util_1","constructor","std","stdmockOrigs","stdout","process","write","stderr","start","action","status","opts","task","active","Boolean","_start","_stdout","stop","msg","_stop","undefined","globals","global","output","running","_updateStatus","pauseAsync","fn","icon","_pause","ret","_resume","pause","Error","_","__","toggle","outputs","stdmocks","args","push","error","_write","inspect","_flushStdout","length","cur","shift","toString","s","apply","default"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/cli-ux/lib/action/base.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActionBase = void 0;\nconst tslib_1 = require(\"tslib\");\nconst castArray_1 = (0, tslib_1.__importDefault)(require(\"lodash/castArray\"));\nconst util_1 = require(\"util\");\nclass ActionBase {\n    constructor() {\n        this.std = 'stderr';\n        this.stdmockOrigs = {\n            stdout: process.stdout.write,\n            stderr: process.stderr.write,\n        };\n    }\n    start(action, status, opts = {}) {\n        this.std = opts.stdout ? 'stdout' : 'stderr';\n        const task = { action, status, active: Boolean(this.task && this.task.active) };\n        this.task = task;\n        this._start();\n        task.active = true;\n        this._stdout(true);\n    }\n    stop(msg = 'done') {\n        const task = this.task;\n        if (!task) {\n            return;\n        }\n        this._stop(msg);\n        task.active = false;\n        this.task = undefined;\n        this._stdout(false);\n    }\n    get globals() {\n        global['cli-ux'] = global['cli-ux'] || {};\n        const globals = global['cli-ux'];\n        globals.action = globals.action || {};\n        return globals;\n    }\n    get task() {\n        return this.globals.action.task;\n    }\n    set task(task) {\n        this.globals.action.task = task;\n    }\n    get output() {\n        return this.globals.output;\n    }\n    set output(output) {\n        this.globals.output = output;\n    }\n    get running() {\n        return Boolean(this.task);\n    }\n    get status() {\n        return this.task ? this.task.status : undefined;\n    }\n    set status(status) {\n        const task = this.task;\n        if (!task) {\n            return;\n        }\n        if (task.status === status) {\n            return;\n        }\n        this._updateStatus(status, task.status);\n        task.status = status;\n    }\n    async pauseAsync(fn, icon) {\n        const task = this.task;\n        const active = task && task.active;\n        if (task && active) {\n            this._pause(icon);\n            this._stdout(false);\n            task.active = false;\n        }\n        const ret = await fn();\n        if (task && active) {\n            this._resume();\n        }\n        return ret;\n    }\n    pause(fn, icon) {\n        const task = this.task;\n        const active = task && task.active;\n        if (task && active) {\n            this._pause(icon);\n            this._stdout(false);\n            task.active = false;\n        }\n        const ret = fn();\n        if (task && active) {\n            this._resume();\n        }\n        return ret;\n    }\n    _start() {\n        throw new Error('not implemented');\n    }\n    _stop(_) {\n        throw new Error('not implemented');\n    }\n    _resume() {\n        if (this.task)\n            this.start(this.task.action, this.task.status);\n    }\n    _pause(_) {\n        throw new Error('not implemented');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    _updateStatus(_, __) { }\n    /**\n     * mock out stdout/stderr so it doesn't screw up the rendering\n     */\n    _stdout(toggle) {\n        try {\n            const outputs = ['stdout', 'stderr'];\n            if (toggle) {\n                if (this.stdmocks)\n                    return;\n                this.stdmockOrigs = {\n                    stdout: process.stdout.write,\n                    stderr: process.stderr.write,\n                };\n                this.stdmocks = [];\n                for (const std of outputs) {\n                    process[std].write = (...args) => {\n                        this.stdmocks.push([std, args]);\n                    };\n                }\n            }\n            else {\n                if (!this.stdmocks)\n                    return;\n                // this._write('stderr', '\\nresetstdmock\\n\\n\\n')\n                delete this.stdmocks;\n                for (const std of outputs)\n                    process[std].write = this.stdmockOrigs[std];\n            }\n        }\n        catch (error) {\n            this._write('stderr', (0, util_1.inspect)(error));\n        }\n    }\n    /**\n     * flush mocked stdout/stderr\n     */\n    _flushStdout() {\n        try {\n            let output = '';\n            let std;\n            while (this.stdmocks && this.stdmocks.length > 0) {\n                const cur = this.stdmocks.shift();\n                std = cur[0];\n                this._write(std, cur[1]);\n                output += cur[1][0].toString('utf8');\n            }\n            // add newline if there isn't one already\n            // otherwise we'll just overwrite it when we render\n            if (output && std && output[output.length - 1] !== '\\n') {\n                this._write(std, '\\n');\n            }\n        }\n        catch (error) {\n            this._write('stderr', (0, util_1.inspect)(error));\n        }\n    }\n    /**\n     * write to the real stdout/stderr\n     */\n    _write(std, s) {\n        this.stdmockOrigs[std].apply(process[std], (0, castArray_1.default)(s));\n    }\n}\nexports.ActionBase = ActionBase;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}