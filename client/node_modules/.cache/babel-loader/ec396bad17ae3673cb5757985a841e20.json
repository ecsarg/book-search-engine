{"ast":null,"code":"const process = require('process');\n\nconst git = require('./services/git.js');\n\nconst services = {\n  appveyor: require('./services/appveyor.js'),\n  azurePipelines: require('./services/azure-pipelines.js'),\n  bamboo: require('./services/bamboo.js'),\n  bitbucket: require('./services/bitbucket.js'),\n  bitrise: require('./services/bitrise.js'),\n  buddy: require('./services/buddy.js'),\n  buildkite: require('./services/buildkite.js'),\n  circleci: require('./services/circleci.js'),\n  cirrus: require('./services/cirrus.js'),\n  cloudflarePages: require('./services/cloudflare-pages.js'),\n  codebuild: require('./services/codebuild.js'),\n  codefresh: require('./services/codefresh.js'),\n  codeship: require('./services/codeship.js'),\n  drone: require('./services/drone.js'),\n  github: require('./services/github.js'),\n  gitlab: require('./services/gitlab.js'),\n  jenkins: require('./services/jenkins.js'),\n  netlify: require('./services/netlify.js'),\n  puppet: require('./services/puppet.js'),\n  sail: require('./services/sail.js'),\n  scrutinizer: require('./services/scrutinizer.js'),\n  semaphore: require('./services/semaphore.js'),\n  shippable: require('./services/shippable.js'),\n  teamcity: require('./services/teamcity.js'),\n  travis: require('./services/travis.js'),\n  vela: require('./services/vela.js'),\n  vercel: require('./services/vercel.js'),\n  wercker: require('./services/wercker.js')\n};\n\nmodule.exports = ({\n  env = process.env,\n  cwd = process.cwd()\n} = {}) => {\n  for (const name of Object.keys(services)) {\n    if (services[name].detect({\n      env,\n      cwd\n    })) {\n      return {\n        isCi: true,\n        ...services[name].configuration({\n          env,\n          cwd\n        })\n      };\n    }\n  }\n\n  return {\n    isCi: Boolean(env.CI),\n    ...git.configuration({\n      env,\n      cwd\n    })\n  };\n};","map":{"version":3,"names":["process","require","git","services","appveyor","azurePipelines","bamboo","bitbucket","bitrise","buddy","buildkite","circleci","cirrus","cloudflarePages","codebuild","codefresh","codeship","drone","github","gitlab","jenkins","netlify","puppet","sail","scrutinizer","semaphore","shippable","teamcity","travis","vela","vercel","wercker","module","exports","env","cwd","name","Object","keys","detect","isCi","configuration","Boolean","CI"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/env-ci/index.js"],"sourcesContent":["const process = require('process');\nconst git = require('./services/git.js');\n\nconst services = {\n  appveyor: require('./services/appveyor.js'),\n  azurePipelines: require('./services/azure-pipelines.js'),\n  bamboo: require('./services/bamboo.js'),\n  bitbucket: require('./services/bitbucket.js'),\n  bitrise: require('./services/bitrise.js'),\n  buddy: require('./services/buddy.js'),\n  buildkite: require('./services/buildkite.js'),\n  circleci: require('./services/circleci.js'),\n  cirrus: require('./services/cirrus.js'),\n  cloudflarePages: require('./services/cloudflare-pages.js'),\n  codebuild: require('./services/codebuild.js'),\n  codefresh: require('./services/codefresh.js'),\n  codeship: require('./services/codeship.js'),\n  drone: require('./services/drone.js'),\n  github: require('./services/github.js'),\n  gitlab: require('./services/gitlab.js'),\n  jenkins: require('./services/jenkins.js'),\n  netlify: require('./services/netlify.js'),\n  puppet: require('./services/puppet.js'),\n  sail: require('./services/sail.js'),\n  scrutinizer: require('./services/scrutinizer.js'),\n  semaphore: require('./services/semaphore.js'),\n  shippable: require('./services/shippable.js'),\n  teamcity: require('./services/teamcity.js'),\n  travis: require('./services/travis.js'),\n  vela: require('./services/vela.js'),\n  vercel: require('./services/vercel.js'),\n  wercker: require('./services/wercker.js'),\n};\n\nmodule.exports = ({env = process.env, cwd = process.cwd()} = {}) => {\n  for (const name of Object.keys(services)) {\n    if (services[name].detect({env, cwd})) {\n      return {isCi: true, ...services[name].configuration({env, cwd})};\n    }\n  }\n\n  return {isCi: Boolean(env.CI), ...git.configuration({env, cwd})};\n};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,mBAAD,CAAnB;;AAEA,MAAME,QAAQ,GAAG;EACfC,QAAQ,EAAEH,OAAO,CAAC,wBAAD,CADF;EAEfI,cAAc,EAAEJ,OAAO,CAAC,+BAAD,CAFR;EAGfK,MAAM,EAAEL,OAAO,CAAC,sBAAD,CAHA;EAIfM,SAAS,EAAEN,OAAO,CAAC,yBAAD,CAJH;EAKfO,OAAO,EAAEP,OAAO,CAAC,uBAAD,CALD;EAMfQ,KAAK,EAAER,OAAO,CAAC,qBAAD,CANC;EAOfS,SAAS,EAAET,OAAO,CAAC,yBAAD,CAPH;EAQfU,QAAQ,EAAEV,OAAO,CAAC,wBAAD,CARF;EASfW,MAAM,EAAEX,OAAO,CAAC,sBAAD,CATA;EAUfY,eAAe,EAAEZ,OAAO,CAAC,gCAAD,CAVT;EAWfa,SAAS,EAAEb,OAAO,CAAC,yBAAD,CAXH;EAYfc,SAAS,EAAEd,OAAO,CAAC,yBAAD,CAZH;EAafe,QAAQ,EAAEf,OAAO,CAAC,wBAAD,CAbF;EAcfgB,KAAK,EAAEhB,OAAO,CAAC,qBAAD,CAdC;EAefiB,MAAM,EAAEjB,OAAO,CAAC,sBAAD,CAfA;EAgBfkB,MAAM,EAAElB,OAAO,CAAC,sBAAD,CAhBA;EAiBfmB,OAAO,EAAEnB,OAAO,CAAC,uBAAD,CAjBD;EAkBfoB,OAAO,EAAEpB,OAAO,CAAC,uBAAD,CAlBD;EAmBfqB,MAAM,EAAErB,OAAO,CAAC,sBAAD,CAnBA;EAoBfsB,IAAI,EAAEtB,OAAO,CAAC,oBAAD,CApBE;EAqBfuB,WAAW,EAAEvB,OAAO,CAAC,2BAAD,CArBL;EAsBfwB,SAAS,EAAExB,OAAO,CAAC,yBAAD,CAtBH;EAuBfyB,SAAS,EAAEzB,OAAO,CAAC,yBAAD,CAvBH;EAwBf0B,QAAQ,EAAE1B,OAAO,CAAC,wBAAD,CAxBF;EAyBf2B,MAAM,EAAE3B,OAAO,CAAC,sBAAD,CAzBA;EA0Bf4B,IAAI,EAAE5B,OAAO,CAAC,oBAAD,CA1BE;EA2Bf6B,MAAM,EAAE7B,OAAO,CAAC,sBAAD,CA3BA;EA4Bf8B,OAAO,EAAE9B,OAAO,CAAC,uBAAD;AA5BD,CAAjB;;AA+BA+B,MAAM,CAACC,OAAP,GAAiB,CAAC;EAACC,GAAG,GAAGlC,OAAO,CAACkC,GAAf;EAAoBC,GAAG,GAAGnC,OAAO,CAACmC,GAAR;AAA1B,IAA2C,EAA5C,KAAmD;EAClE,KAAK,MAAMC,IAAX,IAAmBC,MAAM,CAACC,IAAP,CAAYnC,QAAZ,CAAnB,EAA0C;IACxC,IAAIA,QAAQ,CAACiC,IAAD,CAAR,CAAeG,MAAf,CAAsB;MAACL,GAAD;MAAMC;IAAN,CAAtB,CAAJ,EAAuC;MACrC,OAAO;QAACK,IAAI,EAAE,IAAP;QAAa,GAAGrC,QAAQ,CAACiC,IAAD,CAAR,CAAeK,aAAf,CAA6B;UAACP,GAAD;UAAMC;QAAN,CAA7B;MAAhB,CAAP;IACD;EACF;;EAED,OAAO;IAACK,IAAI,EAAEE,OAAO,CAACR,GAAG,CAACS,EAAL,CAAd;IAAwB,GAAGzC,GAAG,CAACuC,aAAJ,CAAkB;MAACP,GAAD;MAAMC;IAAN,CAAlB;EAA3B,CAAP;AACD,CARD"},"metadata":{},"sourceType":"script"}