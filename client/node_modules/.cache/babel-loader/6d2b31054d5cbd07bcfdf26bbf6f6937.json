{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExplorerSync = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _ExplorerBase = require(\"./ExplorerBase\");\n\nvar _readFile = require(\"./readFile\");\n\nvar _cacheWrapper = require(\"./cacheWrapper\");\n\nvar _getDirectory = require(\"./getDirectory\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nclass ExplorerSync extends _ExplorerBase.ExplorerBase {\n  constructor(options) {\n    super(options);\n  }\n\n  searchSync(searchFrom = process.cwd()) {\n    const startDirectory = (0, _getDirectory.getDirectorySync)(searchFrom);\n    const result = this.searchFromDirectorySync(startDirectory);\n    return result;\n  }\n\n  searchFromDirectorySync(dir) {\n    const absoluteDir = _path.default.resolve(process.cwd(), dir);\n\n    const run = () => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n\n      const transformResult = this.config.transform(result);\n      return transformResult;\n    };\n\n    if (this.searchCache) {\n      return (0, _cacheWrapper.cacheWrapperSync)(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  searchDirectorySync(dir) {\n    for (const place of this.config.searchPlaces) {\n      const placeResult = this.loadSearchPlaceSync(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    } // config not found\n\n\n    return null;\n  }\n\n  loadSearchPlaceSync(dir, place) {\n    const filepath = _path.default.join(dir, place);\n\n    const content = (0, _readFile.readFileSync)(filepath);\n    const result = this.createCosmiconfigResultSync(filepath, content);\n    return result;\n  }\n\n  loadFileContentSync(filepath, content) {\n    if (content === null) {\n      return null;\n    }\n\n    if (content.trim() === '') {\n      return undefined;\n    }\n\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = loader(filepath, content);\n    return loaderResult;\n  }\n\n  createCosmiconfigResultSync(filepath, content) {\n    const fileContent = this.loadFileContentSync(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n    return result;\n  }\n\n  loadSync(filepath) {\n    this.validateFilePath(filepath);\n\n    const absoluteFilePath = _path.default.resolve(process.cwd(), filepath);\n\n    const runLoadSync = () => {\n      const content = (0, _readFile.readFileSync)(absoluteFilePath, {\n        throwNotFound: true\n      });\n      const cosmiconfigResult = this.createCosmiconfigResultSync(absoluteFilePath, content);\n      const transformResult = this.config.transform(cosmiconfigResult);\n      return transformResult;\n    };\n\n    if (this.loadCache) {\n      return (0, _cacheWrapper.cacheWrapperSync)(this.loadCache, absoluteFilePath, runLoadSync);\n    }\n\n    return runLoadSync();\n  }\n\n}\n\nexports.ExplorerSync = ExplorerSync;","map":{"version":3,"sources":["../src/ExplorerSync.ts"],"names":["ExplorerBase","constructor","searchSync","searchFrom","process","startDirectory","result","searchFromDirectorySync","absoluteDir","path","run","nextDir","transformResult","searchDirectorySync","placeResult","loadSearchPlaceSync","filepath","content","loadFileContentSync","loader","loaderResult","createCosmiconfigResultSync","fileContent","loadSync","absoluteFilePath","runLoadSync","throwNotFound","cosmiconfigResult"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { ExplorerBase } from './ExplorerBase';\nimport { readFileSync } from './readFile';\nimport { cacheWrapperSync } from './cacheWrapper';\nimport { getDirectorySync } from './getDirectory';\nimport {\n  CosmiconfigResult,\n  ExplorerOptionsSync,\n  LoadedFileContent,\n} from './types';\n\nclass ExplorerSync extends ExplorerBase<ExplorerOptionsSync> {\n  public constructor(options: ExplorerOptionsSync) {\n    super(options);\n  }\n\n  public searchSync(searchFrom: string = process.cwd()): CosmiconfigResult {\n    const startDirectory = getDirectorySync(searchFrom);\n    const result = this.searchFromDirectorySync(startDirectory);\n\n    return result;\n  }\n\n  private searchFromDirectorySync(dir: string): CosmiconfigResult {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n\n    const run = (): CosmiconfigResult => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n\n      const transformResult = this.config.transform(result);\n\n      return transformResult;\n    };\n\n    if (this.searchCache) {\n      return cacheWrapperSync(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  private searchDirectorySync(dir: string): CosmiconfigResult {\n    for (const place of this.config.searchPlaces) {\n      const placeResult = this.loadSearchPlaceSync(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    }\n\n    // config not found\n    return null;\n  }\n\n  private loadSearchPlaceSync(dir: string, place: string): CosmiconfigResult {\n    const filepath = path.join(dir, place);\n    const content = readFileSync(filepath);\n\n    const result = this.createCosmiconfigResultSync(filepath, content);\n\n    return result;\n  }\n\n  private loadFileContentSync(\n    filepath: string,\n    content: string | null,\n  ): LoadedFileContent {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = loader(filepath, content);\n\n    return loaderResult;\n  }\n\n  private createCosmiconfigResultSync(\n    filepath: string,\n    content: string | null,\n  ): CosmiconfigResult {\n    const fileContent = this.loadFileContentSync(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n\n    return result;\n  }\n\n  public loadSync(filepath: string): CosmiconfigResult {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n\n    const runLoadSync = (): CosmiconfigResult => {\n      const content = readFileSync(absoluteFilePath, { throwNotFound: true });\n      const cosmiconfigResult = this.createCosmiconfigResultSync(\n        absoluteFilePath,\n        content,\n      );\n\n      const transformResult = this.config.transform(cosmiconfigResult);\n\n      return transformResult;\n    };\n\n    if (this.loadCache) {\n      return cacheWrapperSync(this.loadCache, absoluteFilePath, runLoadSync);\n    }\n\n    return runLoadSync();\n  }\n}\n\nexport { ExplorerSync };\n"]},"metadata":{},"sourceType":"script"}