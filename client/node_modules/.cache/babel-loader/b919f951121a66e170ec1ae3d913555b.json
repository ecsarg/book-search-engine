{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _http = _interopRequireDefault(require(\"http\"));\n\nvar _https = _interopRequireDefault(require(\"https\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // eslint-disable-next-line flowtype/no-weak-types\n\n\nconst bindHttpMethod = (originalMethod, agent, forceGlobalAgent) => {\n  // eslint-disable-next-line unicorn/prevent-abbreviations\n  return (...args) => {\n    let url;\n    let options;\n    let callback;\n\n    if (typeof args[0] === 'string' || args[0] instanceof URL) {\n      url = args[0];\n\n      if (typeof args[1] === 'function') {\n        options = {};\n        callback = args[1];\n      } else {\n        options = { ...args[1]\n        };\n        callback = args[2];\n      }\n    } else {\n      options = { ...args[0]\n      };\n      callback = args[1];\n    }\n\n    if (forceGlobalAgent) {\n      options.agent = agent;\n    } else {\n      if (!options.agent) {\n        options.agent = agent;\n      }\n\n      if (options.agent === _http.default.globalAgent || options.agent === _https.default.globalAgent) {\n        options.agent = agent;\n      }\n    }\n\n    if (url) {\n      // $FlowFixMe\n      return originalMethod(url, options, callback);\n    } else {\n      return originalMethod(options, callback);\n    }\n  };\n};\n\nvar _default = bindHttpMethod;\nexports.default = _default;","map":{"version":3,"sources":["../../src/utilities/bindHttpMethod.js"],"names":["originalMethod","agent","forceGlobalAgent","args","url","options","callback","http","https"],"mappings":";;;;;;;AAEA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;EAIA;;;wBACgBA,c,EAA0BC,K,EAAkBC,gB,KAA8B;EACxF;EACA,OAAO,CAAC,GAAD,IAAA,KAAgB;IACrB,IAAA,GAAA;IACA,IAAA,OAAA;IACA,IAAA,QAAA;;IAEA,IAAI,OAAOC,IAAI,CAAX,CAAW,CAAX,KAAA,QAAA,IAA+BA,IAAI,CAAJA,CAAI,CAAJA,YAAnC,GAAA,EAA2D;MACzDC,GAAG,GAAGD,IAAI,CAAVC,CAAU,CAAVA;;MAEA,IAAI,OAAOD,IAAI,CAAX,CAAW,CAAX,KAAJ,UAAA,EAAmC;QACjCE,OAAO,GAAPA,EAAAA;QACAC,QAAQ,GAAGH,IAAI,CAAfG,CAAe,CAAfA;MAFF,CAAA,MAGO;QACLD,OAAO,GAAG,EACR,GAAGF,IAAI,CAAA,CAAA;QADC,CAAVE;QAGAC,QAAQ,GAAGH,IAAI,CAAfG,CAAe,CAAfA;MACD;IAXH,CAAA,MAYO;MACLD,OAAO,GAAG,EACR,GAAGF,IAAI,CAAA,CAAA;MADC,CAAVE;MAGAC,QAAQ,GAAGH,IAAI,CAAfG,CAAe,CAAfA;IACD;;IAED,IAAA,gBAAA,EAAsB;MACpBD,OAAO,CAAPA,KAAAA,GAAAA,KAAAA;IADF,CAAA,MAEO;MACL,IAAI,CAACA,OAAO,CAAZ,KAAA,EAAoB;QAClBA,OAAO,CAAPA,KAAAA,GAAAA,KAAAA;MACD;;MAED,IAAIA,OAAO,CAAPA,KAAAA,KAAkBE,KAAAA,CAAAA,OAAAA,CAAlBF,WAAAA,IAAsCA,OAAO,CAAPA,KAAAA,KAAkBG,MAAAA,CAAAA,OAAAA,CAA5D,WAAA,EAA+E;QAC7EH,OAAO,CAAPA,KAAAA,GAAAA,KAAAA;MACD;IACF;;IAED,IAAA,GAAA,EAAS;MACP;MACA,OAAOL,cAAc,CAAA,GAAA,EAAA,OAAA,EAArB,QAAqB,CAArB;IAFF,CAAA,MAGO;MACL,OAAOA,cAAc,CAAA,OAAA,EAArB,QAAqB,CAArB;IACD;EAzCH,CAAA","sourcesContent":["// @flow\n\nimport http from 'http';\nimport https from 'https';\n\ntype AgentType = http.Agent | https.Agent;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport default (originalMethod: Function, agent: AgentType, forceGlobalAgent: boolean) => {\n  // eslint-disable-next-line unicorn/prevent-abbreviations\n  return (...args: *) => {\n    let url;\n    let options;\n    let callback;\n\n    if (typeof args[0] === 'string' || args[0] instanceof URL) {\n      url = args[0];\n\n      if (typeof args[1] === 'function') {\n        options = {};\n        callback = args[1];\n      } else {\n        options = {\n          ...args[1],\n        };\n        callback = args[2];\n      }\n    } else {\n      options = {\n        ...args[0],\n      };\n      callback = args[1];\n    }\n\n    if (forceGlobalAgent) {\n      options.agent = agent;\n    } else {\n      if (!options.agent) {\n        options.agent = agent;\n      }\n\n      if (options.agent === http.globalAgent || options.agent === https.globalAgent) {\n        options.agent = agent;\n      }\n    }\n\n    if (url) {\n      // $FlowFixMe\n      return originalMethod(url, options, callback);\n    } else {\n      return originalMethod(options, callback);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"script"}