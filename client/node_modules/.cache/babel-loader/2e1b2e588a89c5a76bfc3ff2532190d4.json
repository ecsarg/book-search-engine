{"ast":null,"code":"\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;\n\nconst ral_1 = require(\"./ral\");\n\nconst Is = require(\"./is\");\n\nconst events_1 = require(\"./events\");\n\nvar MessageReader;\n\n(function (MessageReader) {\n  function is(value) {\n    let candidate = value;\n    return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) && Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);\n  }\n\n  MessageReader.is = is;\n})(MessageReader = exports.MessageReader || (exports.MessageReader = {}));\n\nclass AbstractMessageReader {\n  constructor() {\n    this.errorEmitter = new events_1.Emitter();\n    this.closeEmitter = new events_1.Emitter();\n    this.partialMessageEmitter = new events_1.Emitter();\n  }\n\n  dispose() {\n    this.errorEmitter.dispose();\n    this.closeEmitter.dispose();\n  }\n\n  get onError() {\n    return this.errorEmitter.event;\n  }\n\n  fireError(error) {\n    this.errorEmitter.fire(this.asError(error));\n  }\n\n  get onClose() {\n    return this.closeEmitter.event;\n  }\n\n  fireClose() {\n    this.closeEmitter.fire(undefined);\n  }\n\n  get onPartialMessage() {\n    return this.partialMessageEmitter.event;\n  }\n\n  firePartialMessage(info) {\n    this.partialMessageEmitter.fire(info);\n  }\n\n  asError(error) {\n    if (error instanceof Error) {\n      return error;\n    } else {\n      return new Error(`Reader received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);\n    }\n  }\n\n}\n\nexports.AbstractMessageReader = AbstractMessageReader;\nvar ResolvedMessageReaderOptions;\n\n(function (ResolvedMessageReaderOptions) {\n  function fromOptions(options) {\n    var _a;\n\n    let charset;\n    let result;\n    let contentDecoder;\n    const contentDecoders = new Map();\n    let contentTypeDecoder;\n    const contentTypeDecoders = new Map();\n\n    if (options === undefined || typeof options === 'string') {\n      charset = options !== null && options !== void 0 ? options : 'utf-8';\n    } else {\n      charset = (_a = options.charset) !== null && _a !== void 0 ? _a : 'utf-8';\n\n      if (options.contentDecoder !== undefined) {\n        contentDecoder = options.contentDecoder;\n        contentDecoders.set(contentDecoder.name, contentDecoder);\n      }\n\n      if (options.contentDecoders !== undefined) {\n        for (const decoder of options.contentDecoders) {\n          contentDecoders.set(decoder.name, decoder);\n        }\n      }\n\n      if (options.contentTypeDecoder !== undefined) {\n        contentTypeDecoder = options.contentTypeDecoder;\n        contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);\n      }\n\n      if (options.contentTypeDecoders !== undefined) {\n        for (const decoder of options.contentTypeDecoders) {\n          contentTypeDecoders.set(decoder.name, decoder);\n        }\n      }\n    }\n\n    if (contentTypeDecoder === undefined) {\n      contentTypeDecoder = ral_1.default().applicationJson.decoder;\n      contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);\n    }\n\n    return {\n      charset,\n      contentDecoder,\n      contentDecoders,\n      contentTypeDecoder,\n      contentTypeDecoders\n    };\n  }\n\n  ResolvedMessageReaderOptions.fromOptions = fromOptions;\n})(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));\n\nclass ReadableStreamMessageReader extends AbstractMessageReader {\n  constructor(readable, options) {\n    super();\n    this.readable = readable;\n    this.options = ResolvedMessageReaderOptions.fromOptions(options);\n    this.buffer = ral_1.default().messageBuffer.create(this.options.charset);\n    this._partialMessageTimeout = 10000;\n    this.nextMessageLength = -1;\n    this.messageToken = 0;\n  }\n\n  set partialMessageTimeout(timeout) {\n    this._partialMessageTimeout = timeout;\n  }\n\n  get partialMessageTimeout() {\n    return this._partialMessageTimeout;\n  }\n\n  listen(callback) {\n    this.nextMessageLength = -1;\n    this.messageToken = 0;\n    this.partialMessageTimer = undefined;\n    this.callback = callback;\n    const result = this.readable.onData(data => {\n      this.onData(data);\n    });\n    this.readable.onError(error => this.fireError(error));\n    this.readable.onClose(() => this.fireClose());\n    return result;\n  }\n\n  onData(data) {\n    this.buffer.append(data);\n\n    while (true) {\n      if (this.nextMessageLength === -1) {\n        const headers = this.buffer.tryReadHeaders();\n\n        if (!headers) {\n          return;\n        }\n\n        const contentLength = headers.get('Content-Length');\n\n        if (!contentLength) {\n          throw new Error('Header must provide a Content-Length property.');\n        }\n\n        const length = parseInt(contentLength);\n\n        if (isNaN(length)) {\n          throw new Error('Content-Length value must be a number.');\n        }\n\n        this.nextMessageLength = length;\n      }\n\n      const body = this.buffer.tryReadBody(this.nextMessageLength);\n\n      if (body === undefined) {\n        /** We haven't received the full message yet. */\n        this.setPartialMessageTimer();\n        return;\n      }\n\n      this.clearPartialMessageTimer();\n      this.nextMessageLength = -1;\n      let p;\n\n      if (this.options.contentDecoder !== undefined) {\n        p = this.options.contentDecoder.decode(body);\n      } else {\n        p = Promise.resolve(body);\n      }\n\n      p.then(value => {\n        this.options.contentTypeDecoder.decode(value, this.options).then(msg => {\n          this.callback(msg);\n        }, error => {\n          this.fireError(error);\n        });\n      }, error => {\n        this.fireError(error);\n      });\n    }\n  }\n\n  clearPartialMessageTimer() {\n    if (this.partialMessageTimer) {\n      ral_1.default().timer.clearTimeout(this.partialMessageTimer);\n      this.partialMessageTimer = undefined;\n    }\n  }\n\n  setPartialMessageTimer() {\n    this.clearPartialMessageTimer();\n\n    if (this._partialMessageTimeout <= 0) {\n      return;\n    }\n\n    this.partialMessageTimer = ral_1.default().timer.setTimeout((token, timeout) => {\n      this.partialMessageTimer = undefined;\n\n      if (token === this.messageToken) {\n        this.firePartialMessage({\n          messageToken: token,\n          waitingTime: timeout\n        });\n        this.setPartialMessageTimer();\n      }\n    }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);\n  }\n\n}\n\nexports.ReadableStreamMessageReader = ReadableStreamMessageReader;","map":{"version":3,"names":["Object","defineProperty","exports","value","ReadableStreamMessageReader","AbstractMessageReader","MessageReader","ral_1","require","Is","events_1","is","candidate","func","listen","dispose","onError","onClose","onPartialMessage","constructor","errorEmitter","Emitter","closeEmitter","partialMessageEmitter","event","fireError","error","fire","asError","fireClose","undefined","firePartialMessage","info","Error","string","message","ResolvedMessageReaderOptions","fromOptions","options","_a","charset","result","contentDecoder","contentDecoders","Map","contentTypeDecoder","contentTypeDecoders","set","name","decoder","default","applicationJson","readable","buffer","messageBuffer","create","_partialMessageTimeout","nextMessageLength","messageToken","partialMessageTimeout","timeout","callback","partialMessageTimer","onData","data","append","headers","tryReadHeaders","contentLength","get","length","parseInt","isNaN","body","tryReadBody","setPartialMessageTimer","clearPartialMessageTimer","p","decode","Promise","resolve","then","msg","timer","clearTimeout","setTimeout","token","waitingTime"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/vscode-jsonrpc/lib/common/messageReader.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst events_1 = require(\"./events\");\nvar MessageReader;\n(function (MessageReader) {\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) &&\n            Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);\n    }\n    MessageReader.is = is;\n})(MessageReader = exports.MessageReader || (exports.MessageReader = {}));\nclass AbstractMessageReader {\n    constructor() {\n        this.errorEmitter = new events_1.Emitter();\n        this.closeEmitter = new events_1.Emitter();\n        this.partialMessageEmitter = new events_1.Emitter();\n    }\n    dispose() {\n        this.errorEmitter.dispose();\n        this.closeEmitter.dispose();\n    }\n    get onError() {\n        return this.errorEmitter.event;\n    }\n    fireError(error) {\n        this.errorEmitter.fire(this.asError(error));\n    }\n    get onClose() {\n        return this.closeEmitter.event;\n    }\n    fireClose() {\n        this.closeEmitter.fire(undefined);\n    }\n    get onPartialMessage() {\n        return this.partialMessageEmitter.event;\n    }\n    firePartialMessage(info) {\n        this.partialMessageEmitter.fire(info);\n    }\n    asError(error) {\n        if (error instanceof Error) {\n            return error;\n        }\n        else {\n            return new Error(`Reader received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);\n        }\n    }\n}\nexports.AbstractMessageReader = AbstractMessageReader;\nvar ResolvedMessageReaderOptions;\n(function (ResolvedMessageReaderOptions) {\n    function fromOptions(options) {\n        var _a;\n        let charset;\n        let result;\n        let contentDecoder;\n        const contentDecoders = new Map();\n        let contentTypeDecoder;\n        const contentTypeDecoders = new Map();\n        if (options === undefined || typeof options === 'string') {\n            charset = options !== null && options !== void 0 ? options : 'utf-8';\n        }\n        else {\n            charset = (_a = options.charset) !== null && _a !== void 0 ? _a : 'utf-8';\n            if (options.contentDecoder !== undefined) {\n                contentDecoder = options.contentDecoder;\n                contentDecoders.set(contentDecoder.name, contentDecoder);\n            }\n            if (options.contentDecoders !== undefined) {\n                for (const decoder of options.contentDecoders) {\n                    contentDecoders.set(decoder.name, decoder);\n                }\n            }\n            if (options.contentTypeDecoder !== undefined) {\n                contentTypeDecoder = options.contentTypeDecoder;\n                contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);\n            }\n            if (options.contentTypeDecoders !== undefined) {\n                for (const decoder of options.contentTypeDecoders) {\n                    contentTypeDecoders.set(decoder.name, decoder);\n                }\n            }\n        }\n        if (contentTypeDecoder === undefined) {\n            contentTypeDecoder = ral_1.default().applicationJson.decoder;\n            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);\n        }\n        return { charset, contentDecoder, contentDecoders, contentTypeDecoder, contentTypeDecoders };\n    }\n    ResolvedMessageReaderOptions.fromOptions = fromOptions;\n})(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));\nclass ReadableStreamMessageReader extends AbstractMessageReader {\n    constructor(readable, options) {\n        super();\n        this.readable = readable;\n        this.options = ResolvedMessageReaderOptions.fromOptions(options);\n        this.buffer = ral_1.default().messageBuffer.create(this.options.charset);\n        this._partialMessageTimeout = 10000;\n        this.nextMessageLength = -1;\n        this.messageToken = 0;\n    }\n    set partialMessageTimeout(timeout) {\n        this._partialMessageTimeout = timeout;\n    }\n    get partialMessageTimeout() {\n        return this._partialMessageTimeout;\n    }\n    listen(callback) {\n        this.nextMessageLength = -1;\n        this.messageToken = 0;\n        this.partialMessageTimer = undefined;\n        this.callback = callback;\n        const result = this.readable.onData((data) => {\n            this.onData(data);\n        });\n        this.readable.onError((error) => this.fireError(error));\n        this.readable.onClose(() => this.fireClose());\n        return result;\n    }\n    onData(data) {\n        this.buffer.append(data);\n        while (true) {\n            if (this.nextMessageLength === -1) {\n                const headers = this.buffer.tryReadHeaders();\n                if (!headers) {\n                    return;\n                }\n                const contentLength = headers.get('Content-Length');\n                if (!contentLength) {\n                    throw new Error('Header must provide a Content-Length property.');\n                }\n                const length = parseInt(contentLength);\n                if (isNaN(length)) {\n                    throw new Error('Content-Length value must be a number.');\n                }\n                this.nextMessageLength = length;\n            }\n            const body = this.buffer.tryReadBody(this.nextMessageLength);\n            if (body === undefined) {\n                /** We haven't received the full message yet. */\n                this.setPartialMessageTimer();\n                return;\n            }\n            this.clearPartialMessageTimer();\n            this.nextMessageLength = -1;\n            let p;\n            if (this.options.contentDecoder !== undefined) {\n                p = this.options.contentDecoder.decode(body);\n            }\n            else {\n                p = Promise.resolve(body);\n            }\n            p.then((value) => {\n                this.options.contentTypeDecoder.decode(value, this.options).then((msg) => {\n                    this.callback(msg);\n                }, (error) => {\n                    this.fireError(error);\n                });\n            }, (error) => {\n                this.fireError(error);\n            });\n        }\n    }\n    clearPartialMessageTimer() {\n        if (this.partialMessageTimer) {\n            ral_1.default().timer.clearTimeout(this.partialMessageTimer);\n            this.partialMessageTimer = undefined;\n        }\n    }\n    setPartialMessageTimer() {\n        this.clearPartialMessageTimer();\n        if (this._partialMessageTimeout <= 0) {\n            return;\n        }\n        this.partialMessageTimer = ral_1.default().timer.setTimeout((token, timeout) => {\n            this.partialMessageTimer = undefined;\n            if (token === this.messageToken) {\n                this.firePartialMessage({ messageToken: token, waitingTime: timeout });\n                this.setPartialMessageTimer();\n            }\n        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);\n    }\n}\nexports.ReadableStreamMessageReader = ReadableStreamMessageReader;\n//# sourceMappingURL=messageReader.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}