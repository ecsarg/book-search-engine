{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requiresFieldsMissingOnBase = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst requiresFieldsMissingOnBase = ({\n  schema,\n  serviceList\n}) => {\n  var _a;\n\n  const errors = [];\n  const types = schema.getTypeMap();\n\n  for (const [typeName, namedType] of Object.entries(types)) {\n    if (!graphql_1.isObjectType(namedType)) continue;\n\n    for (const [fieldName, field] of Object.entries(namedType.getFields())) {\n      const fieldFederationMetadata = utils_1.getFederationMetadata(field);\n      const serviceName = fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.serviceName;\n      if (!serviceName) continue;\n\n      if (fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.requires) {\n        const selections = fieldFederationMetadata.requires;\n\n        for (const selection of selections) {\n          const matchingFieldOnType = namedType.getFields()[selection.name.value];\n          const typeFederationMetadata = utils_1.getFederationMetadata(matchingFieldOnType);\n\n          if (typeFederationMetadata === null || typeFederationMetadata === void 0 ? void 0 : typeFederationMetadata.serviceName) {\n            const typeNode = utils_1.findTypeNodeInServiceList(typeName, serviceName, serviceList);\n            const fieldNode = typeNode && 'fields' in typeNode ? (_a = typeNode.fields) === null || _a === void 0 ? void 0 : _a.find(field => field.name.value === fieldName) : undefined;\n            const selectionSetNode = utils_1.findSelectionSetOnNode(fieldNode, 'requires', utils_1.printFieldSet(selections));\n            errors.push(utils_1.errorWithCode('REQUIRES_FIELDS_MISSING_ON_BASE', utils_1.logServiceAndType(serviceName, typeName, fieldName) + `requires the field \\`${selection.name.value}\\` to be @external. @external fields must exist on the base type, not an extension.`, selectionSetNode));\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};\n\nexports.requiresFieldsMissingOnBase = requiresFieldsMissingOnBase;","map":{"version":3,"sources":["../../../../src/composition/validate/postComposition/requiresFieldsMissingOnBase.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAMO,MAAM,2BAA2B,GAA6B,CAAC;EACpE,MADoE;EAEpE;AAFoE,CAAD,KAGhE;;;EACH,MAAM,MAAM,GAAmB,EAA/B;EAEA,MAAM,KAAK,GAAG,MAAM,CAAC,UAAP,EAAd;;EACA,KAAK,MAAM,CAAC,QAAD,EAAW,SAAX,CAAX,IAAoC,MAAM,CAAC,OAAP,CAAe,KAAf,CAApC,EAA2D;IAEzD,IAAI,CAAC,SAAA,CAAA,YAAA,CAAa,SAAb,CAAL,EAA8B;;IAI9B,KAAK,MAAM,CAAC,SAAD,EAAY,KAAZ,CAAX,IAAiC,MAAM,CAAC,OAAP,CAAe,SAAS,CAAC,SAAV,EAAf,CAAjC,EAAwE;MACtE,MAAM,uBAAuB,GAAG,OAAA,CAAA,qBAAA,CAAsB,KAAtB,CAAhC;MACA,MAAM,WAAW,GAAG,uBAAuB,KAAA,IAAvB,IAAA,uBAAuB,KAAA,KAAA,CAAvB,GAAuB,KAAA,CAAvB,GAAA,uBAAuB,CAAE,WAA7C;MAMA,IAAI,CAAC,WAAL,EAAkB;;MAElB,IAAI,uBAAuB,KAAA,IAAvB,IAAA,uBAAuB,KAAA,KAAA,CAAvB,GAAuB,KAAA,CAAvB,GAAA,uBAAuB,CAAE,QAA7B,EAAuC;QACrC,MAAM,UAAU,GAAG,uBAAuB,CAAC,QAA3C;;QACA,KAAK,MAAM,SAAX,IAAwB,UAAxB,EAAoC;UAElC,MAAM,mBAAmB,GAAG,SAAS,CAAC,SAAV,GAC1B,SAAS,CAAC,IAAV,CAAe,KADW,CAA5B;UAGA,MAAM,sBAAsB,GAAG,OAAA,CAAA,qBAAA,CAAsB,mBAAtB,CAA/B;;UAEA,IAAI,sBAAsB,KAAA,IAAtB,IAAA,sBAAsB,KAAA,KAAA,CAAtB,GAAsB,KAAA,CAAtB,GAAA,sBAAsB,CAAE,WAA5B,EAAyC;YACvC,MAAM,QAAQ,GAAG,OAAA,CAAA,yBAAA,CAA0B,QAA1B,EAAoC,WAApC,EAAiD,WAAjD,CAAjB;YACA,MAAM,SAAS,GACb,QAAQ,IACR,YAAY,QADZ,GAEA,CAAA,EAAA,GAAC,QAAQ,CAAC,MAAV,MAAuE,IAAvE,IAAuE,EAAA,KAAA,KAAA,CAAvE,GAAuE,KAAA,CAAvE,GAAuE,EAAA,CACrE,IADqE,CAChE,KAAK,IAAI,KAAK,CAAC,IAAN,CAAW,KAAX,KAAqB,SADkC,CAFvE,GAGkD,SAJpD;YAKA,MAAM,gBAAgB,GAAG,OAAA,CAAA,sBAAA,CAAuB,SAAvB,EAAkC,UAAlC,EAA8C,OAAA,CAAA,aAAA,CAAc,UAAd,CAA9C,CAAzB;YACA,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,iCADF,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,QAA/B,EAAyC,SAAzC,IACE,wBAAwB,SAAS,CAAC,IAAV,CAAe,KAAK,qFAHhD,EAME,gBANF,CADF;UAUD;QACF;MACF;IACF;EACF;;EAED,OAAO,MAAP;AACD,CAzDM;;AAAM,OAAA,CAAA,2BAAA,GAA2B,2BAA3B","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.requiresFieldsMissingOnBase = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nconst requiresFieldsMissingOnBase = ({ schema, serviceList, }) => {\n    var _a;\n    const errors = [];\n    const types = schema.getTypeMap();\n    for (const [typeName, namedType] of Object.entries(types)) {\n        if (!graphql_1.isObjectType(namedType))\n            continue;\n        for (const [fieldName, field] of Object.entries(namedType.getFields())) {\n            const fieldFederationMetadata = utils_1.getFederationMetadata(field);\n            const serviceName = fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.serviceName;\n            if (!serviceName)\n                continue;\n            if (fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.requires) {\n                const selections = fieldFederationMetadata.requires;\n                for (const selection of selections) {\n                    const matchingFieldOnType = namedType.getFields()[selection.name.value];\n                    const typeFederationMetadata = utils_1.getFederationMetadata(matchingFieldOnType);\n                    if (typeFederationMetadata === null || typeFederationMetadata === void 0 ? void 0 : typeFederationMetadata.serviceName) {\n                        const typeNode = utils_1.findTypeNodeInServiceList(typeName, serviceName, serviceList);\n                        const fieldNode = typeNode &&\n                            'fields' in typeNode ?\n                            (_a = typeNode.fields) === null || _a === void 0 ? void 0 : _a.find(field => field.name.value === fieldName) : undefined;\n                        const selectionSetNode = utils_1.findSelectionSetOnNode(fieldNode, 'requires', utils_1.printFieldSet(selections));\n                        errors.push(utils_1.errorWithCode('REQUIRES_FIELDS_MISSING_ON_BASE', utils_1.logServiceAndType(serviceName, typeName, fieldName) +\n                            `requires the field \\`${selection.name.value}\\` to be @external. @external fields must exist on the base type, not an extension.`, selectionSetNode));\n                    }\n                }\n            }\n        }\n    }\n    return errors;\n};\nexports.requiresFieldsMissingOnBase = requiresFieldsMissingOnBase;\n//# sourceMappingURL=requiresFieldsMissingOnBase.js.map"]},"metadata":{},"sourceType":"script"}