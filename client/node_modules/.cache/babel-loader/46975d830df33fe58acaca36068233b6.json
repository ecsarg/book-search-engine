{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyFieldsSelectInvalidType = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst keyFieldsSelectInvalidType = ({\n  schema,\n  serviceList\n}) => {\n  const errors = [];\n  const types = schema.getTypeMap();\n\n  for (const [typeName, namedType] of Object.entries(types)) {\n    if (!graphql_1.isObjectType(namedType)) continue;\n    const typeFederationMetadata = utils_1.getFederationMetadata(namedType);\n\n    if (typeFederationMetadata === null || typeFederationMetadata === void 0 ? void 0 : typeFederationMetadata.keys) {\n      const allFieldsInType = namedType.getFields();\n\n      for (const [serviceName, selectionSets = []] of Object.entries(typeFederationMetadata.keys)) {\n        for (const selectionSet of selectionSets) {\n          for (const field of selectionSet) {\n            const name = field.name.value;\n            const matchingField = allFieldsInType[name];\n            const typeNode = utils_1.findTypeNodeInServiceList(typeName, serviceName, serviceList);\n            const selectionSetNode = !utils_1.isDirectiveDefinitionNode(typeNode) ? utils_1.findSelectionSetOnNode(typeNode, 'key', utils_1.printFieldSet(selectionSet)) : undefined;\n\n            if (!matchingField) {\n              errors.push(utils_1.errorWithCode('KEY_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName) + `A @key selects ${name}, but ${typeName}.${name} could not be found`, selectionSetNode));\n            }\n\n            if (matchingField) {\n              if (graphql_1.isInterfaceType(matchingField.type) || graphql_1.isNonNullType(matchingField.type) && graphql_1.isInterfaceType(graphql_1.getNullableType(matchingField.type))) {\n                errors.push(utils_1.errorWithCode('KEY_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName) + `A @key selects ${typeName}.${name}, which is an interface type. Keys cannot select interfaces.`, selectionSetNode));\n              }\n\n              if (graphql_1.isUnionType(matchingField.type) || graphql_1.isNonNullType(matchingField.type) && graphql_1.isUnionType(graphql_1.getNullableType(matchingField.type))) {\n                errors.push(utils_1.errorWithCode('KEY_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName) + `A @key selects ${typeName}.${name}, which is a union type. Keys cannot select union types.`, selectionSetNode));\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};\n\nexports.keyFieldsSelectInvalidType = keyFieldsSelectInvalidType;","map":{"version":3,"sources":["../../../../src/composition/validate/postComposition/keyFieldsSelectInvalidType.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keyFieldsSelectInvalidType = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nconst keyFieldsSelectInvalidType = ({ schema, serviceList, }) => {\n    const errors = [];\n    const types = schema.getTypeMap();\n    for (const [typeName, namedType] of Object.entries(types)) {\n        if (!graphql_1.isObjectType(namedType))\n            continue;\n        const typeFederationMetadata = utils_1.getFederationMetadata(namedType);\n        if (typeFederationMetadata === null || typeFederationMetadata === void 0 ? void 0 : typeFederationMetadata.keys) {\n            const allFieldsInType = namedType.getFields();\n            for (const [serviceName, selectionSets = []] of Object.entries(typeFederationMetadata.keys)) {\n                for (const selectionSet of selectionSets) {\n                    for (const field of selectionSet) {\n                        const name = field.name.value;\n                        const matchingField = allFieldsInType[name];\n                        const typeNode = utils_1.findTypeNodeInServiceList(typeName, serviceName, serviceList);\n                        const selectionSetNode = !utils_1.isDirectiveDefinitionNode(typeNode) ?\n                            utils_1.findSelectionSetOnNode(typeNode, 'key', utils_1.printFieldSet(selectionSet)) : undefined;\n                        if (!matchingField) {\n                            errors.push(utils_1.errorWithCode('KEY_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName) +\n                                `A @key selects ${name}, but ${typeName}.${name} could not be found`, selectionSetNode));\n                        }\n                        if (matchingField) {\n                            if (graphql_1.isInterfaceType(matchingField.type) ||\n                                (graphql_1.isNonNullType(matchingField.type) &&\n                                    graphql_1.isInterfaceType(graphql_1.getNullableType(matchingField.type)))) {\n                                errors.push(utils_1.errorWithCode('KEY_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName) +\n                                    `A @key selects ${typeName}.${name}, which is an interface type. Keys cannot select interfaces.`, selectionSetNode));\n                            }\n                            if (graphql_1.isUnionType(matchingField.type) ||\n                                (graphql_1.isNonNullType(matchingField.type) &&\n                                    graphql_1.isUnionType(graphql_1.getNullableType(matchingField.type)))) {\n                                errors.push(utils_1.errorWithCode('KEY_FIELDS_SELECT_INVALID_TYPE', utils_1.logServiceAndType(serviceName, typeName) +\n                                    `A @key selects ${typeName}.${name}, which is a union type. Keys cannot select union types.`, selectionSetNode));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return errors;\n};\nexports.keyFieldsSelectInvalidType = keyFieldsSelectInvalidType;\n//# sourceMappingURL=keyFieldsSelectInvalidType.js.map"]},"metadata":{},"sourceType":"script"}