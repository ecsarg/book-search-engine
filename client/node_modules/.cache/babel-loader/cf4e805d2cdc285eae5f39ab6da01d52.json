{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gitInfo = exports.sanitizeGitRemote = void 0;\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst fs_1 = __importDefault(require(\"fs\"));\n\nconst env_ci_1 = __importDefault(require(\"env-ci\"));\n\nconst git_parse_1 = require(\"git-parse\");\n\nconst git_rev_sync_1 = __importDefault(require(\"git-rev-sync\"));\n\nconst lodash_pickby_1 = __importDefault(require(\"lodash.pickby\"));\n\nconst lodash_identity_1 = __importDefault(require(\"lodash.identity\"));\n\nconst git_url_parse_1 = __importDefault(require(\"git-url-parse\"));\n\nconst findGitRoot = start => {\n  start = start || process.cwd();\n\n  if (typeof start === \"string\") {\n    if (start[start.length - 1] !== path_1.default.sep) start += path_1.default.sep;\n    start = start.split(path_1.default.sep);\n  }\n\n  if (!start.length) return;\n  start.pop();\n  const dir = start.join(path_1.default.sep);\n\n  if (fs_1.default.existsSync(path_1.default.join(dir, \".git\"))) {\n    return path_1.default.normalize(dir);\n  } else {\n    return findGitRoot(start);\n  }\n};\n\nconst sanitizeGitRemote = remote => {\n  if (!remote) return null;\n  const info = (0, git_url_parse_1.default)(remote);\n  const source = info.source.toLowerCase();\n  if (source !== \"github.com\" && source !== \"gitlab.com\" && source !== \"bitbucket.org\") return null;\n\n  if (info.user !== \"\" && info.user !== \"git\") {\n    info.user = \"REDACTED\";\n  }\n\n  info.token = \"\";\n  info.href = null;\n  return git_url_parse_1.default.stringify(info);\n};\n\nexports.sanitizeGitRemote = sanitizeGitRemote;\n\nconst gitInfo = async log => {\n  const {\n    commit,\n    branch: ciBranch,\n    root,\n    prBranch\n  } = (0, env_ci_1.default)();\n  const gitLoc = root ? root : findGitRoot();\n  if (!commit) return;\n  let committer, remoteUrl, message;\n  let branch = ciBranch || prBranch;\n\n  if (gitLoc) {\n    const _a = await (0, git_parse_1.gitToJs)(gitLoc).then(commits => commits && commits.length > 0 ? commits[0] : {\n      authorName: null,\n      authorEmail: null,\n      message: null\n    }).catch(() => ({\n      authorEmail: null,\n      authorName: null,\n      message: null\n    })),\n          {\n      authorName,\n      authorEmail\n    } = _a,\n          commit = __rest(_a, [\"authorName\", \"authorEmail\"]);\n\n    committer = `${authorName || \"\"} ${authorEmail ? `<${authorEmail}>` : \"\"}`.trim();\n    message = \"message\" in commit ? commit.message : \"\";\n\n    try {\n      remoteUrl = (0, exports.sanitizeGitRemote)(git_rev_sync_1.default.remoteUrl());\n    } catch (e) {\n      log([\"Unable to retrieve remote url, failed with:\", e].join(\"\\n\\n\"));\n    }\n\n    if (!branch) {\n      branch = git_rev_sync_1.default.branch([gitLoc]);\n    }\n  }\n\n  return (0, lodash_pickby_1.default)({\n    committer,\n    commit,\n    remoteUrl,\n    message,\n    branch\n  }, lodash_identity_1.default);\n};\n\nexports.gitInfo = gitInfo;","map":{"version":3,"sources":["../src/git.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.gitInfo = exports.sanitizeGitRemote = void 0;\nconst path_1 = __importDefault(require(\"path\"));\nconst fs_1 = __importDefault(require(\"fs\"));\nconst env_ci_1 = __importDefault(require(\"env-ci\"));\nconst git_parse_1 = require(\"git-parse\");\nconst git_rev_sync_1 = __importDefault(require(\"git-rev-sync\"));\nconst lodash_pickby_1 = __importDefault(require(\"lodash.pickby\"));\nconst lodash_identity_1 = __importDefault(require(\"lodash.identity\"));\nconst git_url_parse_1 = __importDefault(require(\"git-url-parse\"));\nconst findGitRoot = (start) => {\n    start = start || process.cwd();\n    if (typeof start === \"string\") {\n        if (start[start.length - 1] !== path_1.default.sep)\n            start += path_1.default.sep;\n        start = start.split(path_1.default.sep);\n    }\n    if (!start.length)\n        return;\n    start.pop();\n    const dir = start.join(path_1.default.sep);\n    if (fs_1.default.existsSync(path_1.default.join(dir, \".git\"))) {\n        return path_1.default.normalize(dir);\n    }\n    else {\n        return findGitRoot(start);\n    }\n};\nconst sanitizeGitRemote = (remote) => {\n    if (!remote)\n        return null;\n    const info = (0, git_url_parse_1.default)(remote);\n    const source = info.source.toLowerCase();\n    if (source !== \"github.com\" &&\n        source !== \"gitlab.com\" &&\n        source !== \"bitbucket.org\")\n        return null;\n    if (info.user !== \"\" && info.user !== \"git\") {\n        info.user = \"REDACTED\";\n    }\n    info.token = \"\";\n    info.href = null;\n    return git_url_parse_1.default.stringify(info);\n};\nexports.sanitizeGitRemote = sanitizeGitRemote;\nconst gitInfo = async (log) => {\n    const { commit, branch: ciBranch, root, prBranch } = (0, env_ci_1.default)();\n    const gitLoc = root ? root : findGitRoot();\n    if (!commit)\n        return;\n    let committer, remoteUrl, message;\n    let branch = ciBranch || prBranch;\n    if (gitLoc) {\n        const _a = await (0, git_parse_1.gitToJs)(gitLoc)\n            .then((commits) => commits && commits.length > 0\n            ? commits[0]\n            : { authorName: null, authorEmail: null, message: null })\n            .catch(() => ({ authorEmail: null, authorName: null, message: null })), { authorName, authorEmail } = _a, commit = __rest(_a, [\"authorName\", \"authorEmail\"]);\n        committer = `${authorName || \"\"} ${authorEmail ? `<${authorEmail}>` : \"\"}`.trim();\n        message = \"message\" in commit ? commit.message : \"\";\n        try {\n            remoteUrl = (0, exports.sanitizeGitRemote)(git_rev_sync_1.default.remoteUrl());\n        }\n        catch (e) {\n            log([\"Unable to retrieve remote url, failed with:\", e].join(\"\\n\\n\"));\n        }\n        if (!branch) {\n            branch = git_rev_sync_1.default.branch([gitLoc]);\n        }\n    }\n    return (0, lodash_pickby_1.default)({\n        committer,\n        commit,\n        remoteUrl,\n        message,\n        branch,\n    }, lodash_identity_1.default);\n};\nexports.gitInfo = gitInfo;\n//# sourceMappingURL=git.js.map"]},"metadata":{},"sourceType":"script"}