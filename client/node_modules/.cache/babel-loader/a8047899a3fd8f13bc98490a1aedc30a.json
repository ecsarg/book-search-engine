{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validatePath = exports.resolveHome = void 0;\n\nvar _fs = require(\"fs\");\n\nvar _path = require(\"path\");\n\nconst resolveHome = filepath => {\n  if (filepath[0] === \"~\") {\n    const restOfPath = filepath.slice(1);\n    if (typeof process.env.HOME !== \"string\") throw new Error(\"HOME environment variable is missing\");\n    const home = process.env.HOME;\n    return (0, _path.join)(home, restOfPath);\n  }\n\n  return filepath;\n};\n\nexports.resolveHome = resolveHome;\n\nconst validatePath = resolvedPath => {\n  if (!(0, _fs.existsSync)(resolvedPath)) {\n    throw new Error(`The path ${resolvedPath} was not found`);\n  }\n\n  if (!(0, _fs.existsSync)((0, _path.join)(resolvedPath, \".git\"))) {\n    throw new Error(`The directory ${resolvedPath} does not appear to be the root of a git repository.`);\n  }\n};\n\nexports.validatePath = validatePath;","map":{"version":3,"sources":["../src/util.ts"],"names":["resolveHome","filepath","restOfPath","process","home","validatePath","resolvedPath"],"mappings":";;;;;;;AAAA,IAAA,GAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AAEO,MAAMA,WAAW,GAAIC,QAAD,IAAsB;EAC/C,IAAIA,QAAQ,CAARA,CAAQ,CAARA,KAAJ,GAAA,EAAyB;IACvB,MAAMC,UAAkB,GAAGD,QAAQ,CAARA,KAAAA,CAA3B,CAA2BA,CAA3B;IACA,IAAI,OAAOE,OAAO,CAAPA,GAAAA,CAAP,IAAA,KAAJ,QAAA,EACE,MAAM,IAAA,KAAA,CAAN,sCAAM,CAAN;IACF,MAAMC,IAAI,GAAGD,OAAO,CAAPA,GAAAA,CAAb,IAAA;IACA,OAAO,CAAA,GAAA,KAAA,CAAA,IAAA,EAAA,IAAA,EAAP,UAAO,CAAP;EACD;;EACD,OAAA,QAAA;AARK,CAAA;;;;AAWA,MAAME,YAAY,GAAIC,YAAD,IAA0B;EACpD,IAAI,CAAC,CAAA,GAAA,GAAA,CAAA,UAAA,EAAL,YAAK,CAAL,EAA+B;IAC7B,MAAM,IAAA,KAAA,CAAW,YAAWA,YAA5B,gBAAM,CAAN;EACD;;EAED,IAAI,CAAC,CAAA,GAAA,GAAA,CAAA,UAAA,EAAW,CAAA,GAAA,KAAA,CAAA,IAAA,EAAA,YAAA,EAAhB,MAAgB,CAAX,CAAL,EAA6C;IAC3C,MAAM,IAAA,KAAA,CACH,iBAAgBA,YADnB,sDAAM,CAAN;EAGD;AATI,CAAA","sourcesContent":["import { existsSync } from \"fs\";\nimport { join } from \"path\";\n\nexport const resolveHome = (filepath: string) => {\n  if (filepath[0] === \"~\") {\n    const restOfPath: string = filepath.slice(1);\n    if (typeof process.env.HOME !== \"string\")\n      throw new Error(\"HOME environment variable is missing\");\n    const home = process.env.HOME;\n    return join(home, restOfPath);\n  }\n  return filepath;\n};\n\nexport const validatePath = (resolvedPath: string) => {\n  if (!existsSync(resolvedPath)) {\n    throw new Error(`The path ${resolvedPath} was not found`);\n  }\n\n  if (!existsSync(join(resolvedPath, \".git\"))) {\n    throw new Error(\n      `The directory ${resolvedPath} does not appear to be the root of a git repository.`\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"script"}