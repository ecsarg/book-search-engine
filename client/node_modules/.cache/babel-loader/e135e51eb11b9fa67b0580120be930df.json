{"ast":null,"code":"// utility to merge defaults\nfunction mergeOption(v, defaultValue) {\n  if (typeof v === 'undefined' || v === null) {\n    return defaultValue;\n  } else {\n    return v;\n  }\n}\n\nmodule.exports = {\n  // set global options\n  parse: function parse(rawOptions, preset) {\n    // options storage\n    const options = {}; // merge preset\n\n    const opt = Object.assign({}, preset, rawOptions); // the max update rate in fps (redraw will only triggered on value change)\n\n    options.throttleTime = 1000 / mergeOption(opt.fps, 10); // the output stream to write on\n\n    options.stream = mergeOption(opt.stream, process.stderr); // external terminal provided ?\n\n    options.terminal = mergeOption(opt.terminal, null); // clear on finish ?\n\n    options.clearOnComplete = mergeOption(opt.clearOnComplete, false); // stop on finish ?\n\n    options.stopOnComplete = mergeOption(opt.stopOnComplete, false); // size of the progressbar in chars\n\n    options.barsize = mergeOption(opt.barsize, 40); // position of the progress bar - 'left' (default), 'right' or 'center'\n\n    options.align = mergeOption(opt.align, 'left'); // hide the cursor ?\n\n    options.hideCursor = mergeOption(opt.hideCursor, false); // disable linewrapping ?\n\n    options.linewrap = mergeOption(opt.linewrap, false); // pre-render bar strings (performance)\n\n    options.barCompleteString = new Array(options.barsize + 1).join(opt.barCompleteChar || '=');\n    options.barIncompleteString = new Array(options.barsize + 1).join(opt.barIncompleteChar || '-'); // glue sequence (control chars) between bar elements ?\n\n    options.barGlue = mergeOption(opt.barGlue, ''); // the bar format\n\n    options.format = mergeOption(opt.format, 'progress [{bar}] {percentage}% | ETA: {eta}s | {value}/{total}'); // external time-format provided ?\n\n    options.formatTime = mergeOption(opt.formatTime, null); // external value-format provided ?\n\n    options.formatValue = mergeOption(opt.formatValue, null); // external bar-format provided ?\n\n    options.formatBar = mergeOption(opt.formatBar, null); // the number of results to average ETA over\n\n    options.etaBufferLength = mergeOption(opt.etaBuffer, 10); // automatic eta updates based on fps\n\n    options.etaAsynchronousUpdate = mergeOption(opt.etaAsynchronousUpdate, false); // progress calculation relative to start value ? default start at 0\n\n    options.progressCalculationRelative = mergeOption(opt.progressCalculationRelative, false); // allow synchronous updates ?\n\n    options.synchronousUpdate = mergeOption(opt.synchronousUpdate, true); // notty mode\n\n    options.noTTYOutput = mergeOption(opt.noTTYOutput, false); // schedule - 2s\n\n    options.notTTYSchedule = mergeOption(opt.notTTYSchedule, 2000); // emptyOnZero - false\n\n    options.emptyOnZero = mergeOption(opt.emptyOnZero, false); // force bar redraw even if progress did not change\n\n    options.forceRedraw = mergeOption(opt.forceRedraw, false); // automated padding to fixed width ?\n\n    options.autopadding = mergeOption(opt.autopadding, false); // autopadding character - empty in case autopadding is disabled\n\n    options.autopaddingChar = options.autopadding ? mergeOption(opt.autopaddingChar, '   ') : ''; // stop bar on SIGINT/SIGTERM to restore cursor settings ?\n\n    options.gracefulExit = mergeOption(opt.gracefulExit, false);\n    return options;\n  }\n};","map":{"version":3,"names":["mergeOption","v","defaultValue","module","exports","parse","rawOptions","preset","options","opt","Object","assign","throttleTime","fps","stream","process","stderr","terminal","clearOnComplete","stopOnComplete","barsize","align","hideCursor","linewrap","barCompleteString","Array","join","barCompleteChar","barIncompleteString","barIncompleteChar","barGlue","format","formatTime","formatValue","formatBar","etaBufferLength","etaBuffer","etaAsynchronousUpdate","progressCalculationRelative","synchronousUpdate","noTTYOutput","notTTYSchedule","emptyOnZero","forceRedraw","autopadding","autopaddingChar","gracefulExit"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/cli-progress/lib/options.js"],"sourcesContent":["// utility to merge defaults\nfunction mergeOption(v, defaultValue){\n    if (typeof v === 'undefined' || v === null){\n        return defaultValue;\n    }else{\n        return v;\n    }\n}\n\nmodule.exports = {\n    // set global options\n    parse: function parse(rawOptions, preset){\n\n        // options storage\n        const options = {};\n\n        // merge preset\n        const opt = Object.assign({}, preset, rawOptions);\n\n        // the max update rate in fps (redraw will only triggered on value change)\n        options.throttleTime = 1000 / (mergeOption(opt.fps, 10));\n\n        // the output stream to write on\n        options.stream = mergeOption(opt.stream, process.stderr);\n\n        // external terminal provided ?\n        options.terminal = mergeOption(opt.terminal, null);\n\n        // clear on finish ?\n        options.clearOnComplete = mergeOption(opt.clearOnComplete, false);\n\n        // stop on finish ?\n        options.stopOnComplete = mergeOption(opt.stopOnComplete, false);\n\n        // size of the progressbar in chars\n        options.barsize = mergeOption(opt.barsize, 40);\n\n        // position of the progress bar - 'left' (default), 'right' or 'center'\n        options.align = mergeOption(opt.align, 'left');\n\n        // hide the cursor ?\n        options.hideCursor = mergeOption(opt.hideCursor, false);\n\n        // disable linewrapping ?\n        options.linewrap = mergeOption(opt.linewrap, false);\n\n        // pre-render bar strings (performance)\n        options.barCompleteString = (new Array(options.barsize + 1 ).join(opt.barCompleteChar || '='));\n        options.barIncompleteString = (new Array(options.barsize + 1 ).join(opt.barIncompleteChar || '-'));\n\n        // glue sequence (control chars) between bar elements ?\n        options.barGlue = mergeOption(opt.barGlue, '');\n\n        // the bar format\n        options.format = mergeOption(opt.format, 'progress [{bar}] {percentage}% | ETA: {eta}s | {value}/{total}');\n\n        // external time-format provided ?\n        options.formatTime = mergeOption(opt.formatTime, null);\n\n        // external value-format provided ?\n        options.formatValue = mergeOption(opt.formatValue, null);\n\n        // external bar-format provided ?\n        options.formatBar = mergeOption(opt.formatBar, null);\n\n        // the number of results to average ETA over\n        options.etaBufferLength = mergeOption(opt.etaBuffer, 10);\n\n        // automatic eta updates based on fps\n        options.etaAsynchronousUpdate = mergeOption(opt.etaAsynchronousUpdate, false);\n\n        // progress calculation relative to start value ? default start at 0\n        options.progressCalculationRelative = mergeOption(opt.progressCalculationRelative, false);\n\n        // allow synchronous updates ?\n        options.synchronousUpdate = mergeOption(opt.synchronousUpdate, true);\n\n        // notty mode\n        options.noTTYOutput = mergeOption(opt.noTTYOutput, false);\n\n        // schedule - 2s\n        options.notTTYSchedule = mergeOption(opt.notTTYSchedule, 2000);\n        \n        // emptyOnZero - false\n        options.emptyOnZero = mergeOption(opt.emptyOnZero, false);\n\n        // force bar redraw even if progress did not change\n        options.forceRedraw = mergeOption(opt.forceRedraw, false);\n\n        // automated padding to fixed width ?\n        options.autopadding = mergeOption(opt.autopadding, false);\n\n        // autopadding character - empty in case autopadding is disabled\n        options.autopaddingChar = options.autopadding ? mergeOption(opt.autopaddingChar, '   ') : '';\n\n        // stop bar on SIGINT/SIGTERM to restore cursor settings ?\n        options.gracefulExit = mergeOption(opt.gracefulExit, false);\n\n        return options;\n    }\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}