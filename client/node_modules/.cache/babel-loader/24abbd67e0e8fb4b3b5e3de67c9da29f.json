{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.executableDirectivesIdentical = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst executableDirectivesIdentical = ({\n  schema\n}) => {\n  const errors = [];\n  const customDirectives = schema.getDirectives().filter(x => !utils_1.isApolloTypeSystemDirective(x) && !graphql_1.isSpecifiedDirective(x));\n  customDirectives.forEach(directive => {\n    const directiveFederationMetadata = utils_1.getFederationMetadata(directive);\n    if (!directiveFederationMetadata) return;\n    const definitions = Object.entries(directiveFederationMetadata.directiveDefinitions);\n    const shouldError = definitions.some(([, definition], index) => {\n      if (index === 0) return;\n      const [, previousDefinition] = definitions[index - 1];\n      return !utils_1.typeNodesAreEquivalent(definition, previousDefinition);\n    });\n\n    if (shouldError) {\n      const directiveDefinitionNodes = definitions.map(([_, directiveDefinitionNode]) => directiveDefinitionNode);\n      errors.push(utils_1.errorWithCode('EXECUTABLE_DIRECTIVES_IDENTICAL', utils_1.logDirective(directive.name) + `custom directives must be defined identically across all services. See below for a list of current implementations:\\n${definitions.map(([serviceName, definition]) => {\n        return `\\t${serviceName}: ${graphql_1.print(definition)}`;\n      }).join('\\n')}`, directiveDefinitionNodes));\n    }\n  });\n  return errors;\n};\n\nexports.executableDirectivesIdentical = executableDirectivesIdentical;","map":{"version":3,"sources":["../../../../src/composition/validate/postComposition/executableDirectivesIdentical.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAeO,MAAM,6BAA6B,GAA6B,CAAC;EACtE;AADsE,CAAD,KAElE;EACH,MAAM,MAAM,GAAmB,EAA/B;EAEA,MAAM,gBAAgB,GAAG,MAAM,CAC5B,aADsB,GAEtB,MAFsB,CAEf,CAAC,IAAI,CAAC,OAAA,CAAA,2BAAA,CAA4B,CAA5B,CAAD,IAAmC,CAAC,SAAA,CAAA,oBAAA,CAAqB,CAArB,CAF1B,CAAzB;EAIA,gBAAgB,CAAC,OAAjB,CAAyB,SAAS,IAAG;IACnC,MAAM,2BAA2B,GAAG,OAAA,CAAA,qBAAA,CAAsB,SAAtB,CAApC;IAEA,IAAI,CAAC,2BAAL,EAAkC;IAElC,MAAM,WAAW,GAAG,MAAM,CAAC,OAAP,CAClB,2BAA2B,CAAC,oBADV,CAApB;IAMA,MAAM,WAAW,GAAG,WAAW,CAAC,IAAZ,CAAiB,CAAC,GAAG,UAAH,CAAD,EAAiB,KAAjB,KAA0B;MAE7D,IAAI,KAAK,KAAK,CAAd,EAAiB;MACjB,MAAM,GAAG,kBAAH,IAAyB,WAAW,CAAC,KAAK,GAAG,CAAT,CAA1C;MACA,OAAO,CAAC,OAAA,CAAA,sBAAA,CAAuB,UAAvB,EAAmC,kBAAnC,CAAR;IACD,CALmB,CAApB;;IAOA,IAAI,WAAJ,EAAiB;MACf,MAAM,wBAAwB,GAAG,WAAW,CAAC,GAAZ,CAAgB,CAAC,CAAC,CAAD,EAAI,uBAAJ,CAAD,KAAkC,uBAAlD,CAAjC;MACA,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,iCADF,EAEE,OAAA,CAAA,YAAA,CAAa,SAAS,CAAC,IAAvB,IACE,wHAAwH,WAAW,CAChI,GADqH,CACjH,CAAC,CAAC,WAAD,EAAc,UAAd,CAAD,KAA8B;QACjC,OAAO,KAAK,WAAW,KAAK,SAAA,CAAA,KAAA,CAAM,UAAN,CAAiB,EAA7C;MACD,CAHqH,EAIrH,IAJqH,CAIhH,IAJgH,CAI3G,EAPjB,EAQE,wBARF,CADF;IAYD;EACF,CAjCD;EAkCA,OAAO,MAAP;AACD,CA5CM;;AAAM,OAAA,CAAA,6BAAA,GAA6B,6BAA7B","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.executableDirectivesIdentical = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nconst executableDirectivesIdentical = ({ schema, }) => {\n    const errors = [];\n    const customDirectives = schema\n        .getDirectives()\n        .filter(x => !utils_1.isApolloTypeSystemDirective(x) && !graphql_1.isSpecifiedDirective(x));\n    customDirectives.forEach(directive => {\n        const directiveFederationMetadata = utils_1.getFederationMetadata(directive);\n        if (!directiveFederationMetadata)\n            return;\n        const definitions = Object.entries(directiveFederationMetadata.directiveDefinitions);\n        const shouldError = definitions.some(([, definition], index) => {\n            if (index === 0)\n                return;\n            const [, previousDefinition] = definitions[index - 1];\n            return !utils_1.typeNodesAreEquivalent(definition, previousDefinition);\n        });\n        if (shouldError) {\n            const directiveDefinitionNodes = definitions.map(([_, directiveDefinitionNode]) => directiveDefinitionNode);\n            errors.push(utils_1.errorWithCode('EXECUTABLE_DIRECTIVES_IDENTICAL', utils_1.logDirective(directive.name) +\n                `custom directives must be defined identically across all services. See below for a list of current implementations:\\n${definitions\n                    .map(([serviceName, definition]) => {\n                    return `\\t${serviceName}: ${graphql_1.print(definition)}`;\n                })\n                    .join('\\n')}`, directiveDefinitionNodes));\n        }\n    });\n    return errors;\n};\nexports.executableDirectivesIdentical = executableDirectivesIdentical;\n//# sourceMappingURL=executableDirectivesIdentical.js.map"]},"metadata":{},"sourceType":"script"}