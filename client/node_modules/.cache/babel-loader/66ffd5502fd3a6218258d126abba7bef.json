{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Explorer = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _ExplorerBase = require(\"./ExplorerBase\");\n\nvar _readFile = require(\"./readFile\");\n\nvar _cacheWrapper = require(\"./cacheWrapper\");\n\nvar _getDirectory = require(\"./getDirectory\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nclass Explorer extends _ExplorerBase.ExplorerBase {\n  constructor(options) {\n    super(options);\n  }\n\n  async search(searchFrom = process.cwd()) {\n    const startDirectory = await (0, _getDirectory.getDirectory)(searchFrom);\n    const result = await this.searchFromDirectory(startDirectory);\n    return result;\n  }\n\n  async searchFromDirectory(dir) {\n    const absoluteDir = _path.default.resolve(process.cwd(), dir);\n\n    const run = async () => {\n      const result = await this.searchDirectory(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectory(nextDir);\n      }\n\n      const transformResult = await this.config.transform(result);\n      return transformResult;\n    };\n\n    if (this.searchCache) {\n      return (0, _cacheWrapper.cacheWrapper)(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  async searchDirectory(dir) {\n    for await (const place of this.config.searchPlaces) {\n      const placeResult = await this.loadSearchPlace(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    } // config not found\n\n\n    return null;\n  }\n\n  async loadSearchPlace(dir, place) {\n    const filepath = _path.default.join(dir, place);\n\n    const fileContents = await (0, _readFile.readFile)(filepath);\n    const result = await this.createCosmiconfigResult(filepath, fileContents);\n    return result;\n  }\n\n  async loadFileContent(filepath, content) {\n    if (content === null) {\n      return null;\n    }\n\n    if (content.trim() === '') {\n      return undefined;\n    }\n\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = await loader(filepath, content);\n    return loaderResult;\n  }\n\n  async createCosmiconfigResult(filepath, content) {\n    const fileContent = await this.loadFileContent(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n    return result;\n  }\n\n  async load(filepath) {\n    this.validateFilePath(filepath);\n\n    const absoluteFilePath = _path.default.resolve(process.cwd(), filepath);\n\n    const runLoad = async () => {\n      const fileContents = await (0, _readFile.readFile)(absoluteFilePath, {\n        throwNotFound: true\n      });\n      const result = await this.createCosmiconfigResult(absoluteFilePath, fileContents);\n      const transformResult = await this.config.transform(result);\n      return transformResult;\n    };\n\n    if (this.loadCache) {\n      return (0, _cacheWrapper.cacheWrapper)(this.loadCache, absoluteFilePath, runLoad);\n    }\n\n    return runLoad();\n  }\n\n}\n\nexports.Explorer = Explorer;","map":{"version":3,"sources":["../src/Explorer.ts"],"names":["ExplorerBase","constructor","search","searchFrom","process","startDirectory","result","searchFromDirectory","absoluteDir","path","run","nextDir","transformResult","searchDirectory","placeResult","loadSearchPlace","filepath","fileContents","loadFileContent","content","loader","loaderResult","createCosmiconfigResult","fileContent","load","absoluteFilePath","runLoad","throwNotFound"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { ExplorerBase } from './ExplorerBase';\nimport { readFile } from './readFile';\nimport { cacheWrapper } from './cacheWrapper';\nimport { getDirectory } from './getDirectory';\nimport { CosmiconfigResult, ExplorerOptions, LoadedFileContent } from './types';\n\nclass Explorer extends ExplorerBase<ExplorerOptions> {\n  public constructor(options: ExplorerOptions) {\n    super(options);\n  }\n\n  public async search(\n    searchFrom: string = process.cwd(),\n  ): Promise<CosmiconfigResult> {\n    const startDirectory = await getDirectory(searchFrom);\n    const result = await this.searchFromDirectory(startDirectory);\n\n    return result;\n  }\n\n  private async searchFromDirectory(dir: string): Promise<CosmiconfigResult> {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n\n    const run = async (): Promise<CosmiconfigResult> => {\n      const result = await this.searchDirectory(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectory(nextDir);\n      }\n\n      const transformResult = await this.config.transform(result);\n\n      return transformResult;\n    };\n\n    if (this.searchCache) {\n      return cacheWrapper(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  private async searchDirectory(dir: string): Promise<CosmiconfigResult> {\n    for await (const place of this.config.searchPlaces) {\n      const placeResult = await this.loadSearchPlace(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    }\n\n    // config not found\n    return null;\n  }\n\n  private async loadSearchPlace(\n    dir: string,\n    place: string,\n  ): Promise<CosmiconfigResult> {\n    const filepath = path.join(dir, place);\n    const fileContents = await readFile(filepath);\n\n    const result = await this.createCosmiconfigResult(filepath, fileContents);\n\n    return result;\n  }\n\n  private async loadFileContent(\n    filepath: string,\n    content: string | null,\n  ): Promise<LoadedFileContent> {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = await loader(filepath, content);\n    return loaderResult;\n  }\n\n  private async createCosmiconfigResult(\n    filepath: string,\n    content: string | null,\n  ): Promise<CosmiconfigResult> {\n    const fileContent = await this.loadFileContent(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n\n    return result;\n  }\n\n  public async load(filepath: string): Promise<CosmiconfigResult> {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n\n    const runLoad = async (): Promise<CosmiconfigResult> => {\n      const fileContents = await readFile(absoluteFilePath, {\n        throwNotFound: true,\n      });\n\n      const result = await this.createCosmiconfigResult(\n        absoluteFilePath,\n        fileContents,\n      );\n\n      const transformResult = await this.config.transform(result);\n\n      return transformResult;\n    };\n\n    if (this.loadCache) {\n      return cacheWrapper(this.loadCache, absoluteFilePath, runLoad);\n    }\n\n    return runLoad();\n  }\n}\n\nexport { Explorer };\n"]},"metadata":{},"sourceType":"script"}