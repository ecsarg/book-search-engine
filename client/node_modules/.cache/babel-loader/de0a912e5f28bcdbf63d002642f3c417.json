{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar PERMS = function (base) {\n  return {\n    OTHER_EXEC: base.EXEC,\n    OTHER_WRITE: base.WRITE,\n    OTHER_READ: base.READ,\n    GROUP_EXEC: base.EXEC << 3,\n    GROUP_WRITE: base.WRITE << 3,\n    GROUP_READ: base.READ << 3,\n    OWNER_EXEC: base.EXEC << 6,\n    OWNER_WRITE: base.WRITE << 6,\n    OWNER_READ: base.READ << 6,\n    // Literal octal numbers are apparently not allowed in \"strict\" javascript.\n    STICKY: parseInt('01000', 8),\n    SETGID: parseInt('02000', 8),\n    SETUID: parseInt('04000', 8),\n    TYPE_MASK: parseInt('0770000', 8)\n  };\n}({\n  EXEC: 1,\n  WRITE: 2,\n  READ: 4\n});\n\ncommon.register('chmod', _chmod, {}); //@\n//@ ### chmod([options,] octal_mode || octal_string, file)\n//@ ### chmod([options,] symbolic_mode, file)\n//@\n//@ Available options:\n//@\n//@ + `-v`: output a diagnostic for every file processed//@\n//@ + `-c`: like verbose, but report only when a change is made//@\n//@ + `-R`: change files and directories recursively//@\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ chmod(755, '/Users/brandon');\n//@ chmod('755', '/Users/brandon'); // same as above\n//@ chmod('u+x', '/Users/brandon');\n//@ chmod('-R', 'a-w', '/Users/brandon');\n//@ ```\n//@\n//@ Alters the permissions of a file or directory by either specifying the\n//@ absolute permissions in octal form or expressing the changes in symbols.\n//@ This command tries to mimic the POSIX behavior as much as possible.\n//@ Notable exceptions:\n//@\n//@ + In symbolic modes, `a-r` and `-r` are identical.  No consideration is\n//@   given to the `umask`.\n//@ + There is no \"quiet\" option, since default behavior is to run silent.\n\nfunction _chmod(options, mode, filePattern) {\n  if (!filePattern) {\n    if (options.length > 0 && options.charAt(0) === '-') {\n      // Special case where the specified file permissions started with - to subtract perms, which\n      // get picked up by the option parser as command flags.\n      // If we are down by one argument and options starts with -, shift everything over.\n      [].unshift.call(arguments, '');\n    } else {\n      common.error('You must specify a file.');\n    }\n  }\n\n  options = common.parseOptions(options, {\n    'R': 'recursive',\n    'c': 'changes',\n    'v': 'verbose'\n  });\n  filePattern = [].slice.call(arguments, 2);\n  var files; // TODO: replace this with a call to common.expand()\n\n  if (options.recursive) {\n    files = [];\n    filePattern.forEach(function addFile(expandedFile) {\n      var stat = common.statNoFollowLinks(expandedFile);\n\n      if (!stat.isSymbolicLink()) {\n        files.push(expandedFile);\n\n        if (stat.isDirectory()) {\n          // intentionally does not follow symlinks.\n          fs.readdirSync(expandedFile).forEach(function (child) {\n            addFile(expandedFile + '/' + child);\n          });\n        }\n      }\n    });\n  } else {\n    files = filePattern;\n  }\n\n  files.forEach(function innerChmod(file) {\n    file = path.resolve(file);\n\n    if (!fs.existsSync(file)) {\n      common.error('File not found: ' + file);\n    } // When recursing, don't follow symlinks.\n\n\n    if (options.recursive && common.statNoFollowLinks(file).isSymbolicLink()) {\n      return;\n    }\n\n    var stat = common.statFollowLinks(file);\n    var isDir = stat.isDirectory();\n    var perms = stat.mode;\n    var type = perms & PERMS.TYPE_MASK;\n    var newPerms = perms;\n\n    if (isNaN(parseInt(mode, 8))) {\n      // parse options\n      mode.split(',').forEach(function (symbolicMode) {\n        var pattern = /([ugoa]*)([=\\+-])([rwxXst]*)/i;\n        var matches = pattern.exec(symbolicMode);\n\n        if (matches) {\n          var applyTo = matches[1];\n          var operator = matches[2];\n          var change = matches[3];\n          var changeOwner = applyTo.indexOf('u') !== -1 || applyTo === 'a' || applyTo === '';\n          var changeGroup = applyTo.indexOf('g') !== -1 || applyTo === 'a' || applyTo === '';\n          var changeOther = applyTo.indexOf('o') !== -1 || applyTo === 'a' || applyTo === '';\n          var changeRead = change.indexOf('r') !== -1;\n          var changeWrite = change.indexOf('w') !== -1;\n          var changeExec = change.indexOf('x') !== -1;\n          var changeExecDir = change.indexOf('X') !== -1;\n          var changeSticky = change.indexOf('t') !== -1;\n          var changeSetuid = change.indexOf('s') !== -1;\n\n          if (changeExecDir && isDir) {\n            changeExec = true;\n          }\n\n          var mask = 0;\n\n          if (changeOwner) {\n            mask |= (changeRead ? PERMS.OWNER_READ : 0) + (changeWrite ? PERMS.OWNER_WRITE : 0) + (changeExec ? PERMS.OWNER_EXEC : 0) + (changeSetuid ? PERMS.SETUID : 0);\n          }\n\n          if (changeGroup) {\n            mask |= (changeRead ? PERMS.GROUP_READ : 0) + (changeWrite ? PERMS.GROUP_WRITE : 0) + (changeExec ? PERMS.GROUP_EXEC : 0) + (changeSetuid ? PERMS.SETGID : 0);\n          }\n\n          if (changeOther) {\n            mask |= (changeRead ? PERMS.OTHER_READ : 0) + (changeWrite ? PERMS.OTHER_WRITE : 0) + (changeExec ? PERMS.OTHER_EXEC : 0);\n          } // Sticky bit is special - it's not tied to user, group or other.\n\n\n          if (changeSticky) {\n            mask |= PERMS.STICKY;\n          }\n\n          switch (operator) {\n            case '+':\n              newPerms |= mask;\n              break;\n\n            case '-':\n              newPerms &= ~mask;\n              break;\n\n            case '=':\n              newPerms = type + mask; // According to POSIX, when using = to explicitly set the\n              // permissions, setuid and setgid can never be cleared.\n\n              if (common.statFollowLinks(file).isDirectory()) {\n                newPerms |= PERMS.SETUID + PERMS.SETGID & perms;\n              }\n\n              break;\n\n            default:\n              common.error('Could not recognize operator: `' + operator + '`');\n          }\n\n          if (options.verbose) {\n            console.log(file + ' -> ' + newPerms.toString(8));\n          }\n\n          if (perms !== newPerms) {\n            if (!options.verbose && options.changes) {\n              console.log(file + ' -> ' + newPerms.toString(8));\n            }\n\n            fs.chmodSync(file, newPerms);\n            perms = newPerms; // for the next round of changes!\n          }\n        } else {\n          common.error('Invalid symbolic mode change: ' + symbolicMode);\n        }\n      });\n    } else {\n      // they gave us a full number\n      newPerms = type + parseInt(mode, 8); // POSIX rules are that setuid and setgid can only be added using numeric\n      // form, but not cleared.\n\n      if (common.statFollowLinks(file).isDirectory()) {\n        newPerms |= PERMS.SETUID + PERMS.SETGID & perms;\n      }\n\n      fs.chmodSync(file, newPerms);\n    }\n  });\n  return '';\n}\n\nmodule.exports = _chmod;","map":{"version":3,"names":["common","require","fs","path","PERMS","base","OTHER_EXEC","EXEC","OTHER_WRITE","WRITE","OTHER_READ","READ","GROUP_EXEC","GROUP_WRITE","GROUP_READ","OWNER_EXEC","OWNER_WRITE","OWNER_READ","STICKY","parseInt","SETGID","SETUID","TYPE_MASK","register","_chmod","options","mode","filePattern","length","charAt","unshift","call","arguments","error","parseOptions","slice","files","recursive","forEach","addFile","expandedFile","stat","statNoFollowLinks","isSymbolicLink","push","isDirectory","readdirSync","child","innerChmod","file","resolve","existsSync","statFollowLinks","isDir","perms","type","newPerms","isNaN","split","symbolicMode","pattern","matches","exec","applyTo","operator","change","changeOwner","indexOf","changeGroup","changeOther","changeRead","changeWrite","changeExec","changeExecDir","changeSticky","changeSetuid","mask","verbose","console","log","toString","changes","chmodSync","module","exports"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/shelljs/src/chmod.js"],"sourcesContent":["var common = require('./common');\nvar fs = require('fs');\nvar path = require('path');\n\nvar PERMS = (function (base) {\n  return {\n    OTHER_EXEC: base.EXEC,\n    OTHER_WRITE: base.WRITE,\n    OTHER_READ: base.READ,\n\n    GROUP_EXEC: base.EXEC << 3,\n    GROUP_WRITE: base.WRITE << 3,\n    GROUP_READ: base.READ << 3,\n\n    OWNER_EXEC: base.EXEC << 6,\n    OWNER_WRITE: base.WRITE << 6,\n    OWNER_READ: base.READ << 6,\n\n    // Literal octal numbers are apparently not allowed in \"strict\" javascript.\n    STICKY: parseInt('01000', 8),\n    SETGID: parseInt('02000', 8),\n    SETUID: parseInt('04000', 8),\n\n    TYPE_MASK: parseInt('0770000', 8),\n  };\n}({\n  EXEC: 1,\n  WRITE: 2,\n  READ: 4,\n}));\n\ncommon.register('chmod', _chmod, {\n});\n\n//@\n//@ ### chmod([options,] octal_mode || octal_string, file)\n//@ ### chmod([options,] symbolic_mode, file)\n//@\n//@ Available options:\n//@\n//@ + `-v`: output a diagnostic for every file processed//@\n//@ + `-c`: like verbose, but report only when a change is made//@\n//@ + `-R`: change files and directories recursively//@\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ chmod(755, '/Users/brandon');\n//@ chmod('755', '/Users/brandon'); // same as above\n//@ chmod('u+x', '/Users/brandon');\n//@ chmod('-R', 'a-w', '/Users/brandon');\n//@ ```\n//@\n//@ Alters the permissions of a file or directory by either specifying the\n//@ absolute permissions in octal form or expressing the changes in symbols.\n//@ This command tries to mimic the POSIX behavior as much as possible.\n//@ Notable exceptions:\n//@\n//@ + In symbolic modes, `a-r` and `-r` are identical.  No consideration is\n//@   given to the `umask`.\n//@ + There is no \"quiet\" option, since default behavior is to run silent.\nfunction _chmod(options, mode, filePattern) {\n  if (!filePattern) {\n    if (options.length > 0 && options.charAt(0) === '-') {\n      // Special case where the specified file permissions started with - to subtract perms, which\n      // get picked up by the option parser as command flags.\n      // If we are down by one argument and options starts with -, shift everything over.\n      [].unshift.call(arguments, '');\n    } else {\n      common.error('You must specify a file.');\n    }\n  }\n\n  options = common.parseOptions(options, {\n    'R': 'recursive',\n    'c': 'changes',\n    'v': 'verbose',\n  });\n\n  filePattern = [].slice.call(arguments, 2);\n\n  var files;\n\n  // TODO: replace this with a call to common.expand()\n  if (options.recursive) {\n    files = [];\n    filePattern.forEach(function addFile(expandedFile) {\n      var stat = common.statNoFollowLinks(expandedFile);\n\n      if (!stat.isSymbolicLink()) {\n        files.push(expandedFile);\n\n        if (stat.isDirectory()) {  // intentionally does not follow symlinks.\n          fs.readdirSync(expandedFile).forEach(function (child) {\n            addFile(expandedFile + '/' + child);\n          });\n        }\n      }\n    });\n  } else {\n    files = filePattern;\n  }\n\n  files.forEach(function innerChmod(file) {\n    file = path.resolve(file);\n    if (!fs.existsSync(file)) {\n      common.error('File not found: ' + file);\n    }\n\n    // When recursing, don't follow symlinks.\n    if (options.recursive && common.statNoFollowLinks(file).isSymbolicLink()) {\n      return;\n    }\n\n    var stat = common.statFollowLinks(file);\n    var isDir = stat.isDirectory();\n    var perms = stat.mode;\n    var type = perms & PERMS.TYPE_MASK;\n\n    var newPerms = perms;\n\n    if (isNaN(parseInt(mode, 8))) {\n      // parse options\n      mode.split(',').forEach(function (symbolicMode) {\n        var pattern = /([ugoa]*)([=\\+-])([rwxXst]*)/i;\n        var matches = pattern.exec(symbolicMode);\n\n        if (matches) {\n          var applyTo = matches[1];\n          var operator = matches[2];\n          var change = matches[3];\n\n          var changeOwner = applyTo.indexOf('u') !== -1 || applyTo === 'a' || applyTo === '';\n          var changeGroup = applyTo.indexOf('g') !== -1 || applyTo === 'a' || applyTo === '';\n          var changeOther = applyTo.indexOf('o') !== -1 || applyTo === 'a' || applyTo === '';\n\n          var changeRead = change.indexOf('r') !== -1;\n          var changeWrite = change.indexOf('w') !== -1;\n          var changeExec = change.indexOf('x') !== -1;\n          var changeExecDir = change.indexOf('X') !== -1;\n          var changeSticky = change.indexOf('t') !== -1;\n          var changeSetuid = change.indexOf('s') !== -1;\n\n          if (changeExecDir && isDir) {\n            changeExec = true;\n          }\n\n          var mask = 0;\n          if (changeOwner) {\n            mask |= (changeRead ? PERMS.OWNER_READ : 0) + (changeWrite ? PERMS.OWNER_WRITE : 0) + (changeExec ? PERMS.OWNER_EXEC : 0) + (changeSetuid ? PERMS.SETUID : 0);\n          }\n          if (changeGroup) {\n            mask |= (changeRead ? PERMS.GROUP_READ : 0) + (changeWrite ? PERMS.GROUP_WRITE : 0) + (changeExec ? PERMS.GROUP_EXEC : 0) + (changeSetuid ? PERMS.SETGID : 0);\n          }\n          if (changeOther) {\n            mask |= (changeRead ? PERMS.OTHER_READ : 0) + (changeWrite ? PERMS.OTHER_WRITE : 0) + (changeExec ? PERMS.OTHER_EXEC : 0);\n          }\n\n          // Sticky bit is special - it's not tied to user, group or other.\n          if (changeSticky) {\n            mask |= PERMS.STICKY;\n          }\n\n          switch (operator) {\n            case '+':\n              newPerms |= mask;\n              break;\n\n            case '-':\n              newPerms &= ~mask;\n              break;\n\n            case '=':\n              newPerms = type + mask;\n\n              // According to POSIX, when using = to explicitly set the\n              // permissions, setuid and setgid can never be cleared.\n              if (common.statFollowLinks(file).isDirectory()) {\n                newPerms |= (PERMS.SETUID + PERMS.SETGID) & perms;\n              }\n              break;\n            default:\n              common.error('Could not recognize operator: `' + operator + '`');\n          }\n\n          if (options.verbose) {\n            console.log(file + ' -> ' + newPerms.toString(8));\n          }\n\n          if (perms !== newPerms) {\n            if (!options.verbose && options.changes) {\n              console.log(file + ' -> ' + newPerms.toString(8));\n            }\n            fs.chmodSync(file, newPerms);\n            perms = newPerms; // for the next round of changes!\n          }\n        } else {\n          common.error('Invalid symbolic mode change: ' + symbolicMode);\n        }\n      });\n    } else {\n      // they gave us a full number\n      newPerms = type + parseInt(mode, 8);\n\n      // POSIX rules are that setuid and setgid can only be added using numeric\n      // form, but not cleared.\n      if (common.statFollowLinks(file).isDirectory()) {\n        newPerms |= (PERMS.SETUID + PERMS.SETGID) & perms;\n      }\n\n      fs.chmodSync(file, newPerms);\n    }\n  });\n  return '';\n}\nmodule.exports = _chmod;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}