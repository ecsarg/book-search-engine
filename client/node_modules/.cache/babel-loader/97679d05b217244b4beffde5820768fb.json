{"ast":null,"code":"/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WorkspaceFoldersFeature = void 0;\n\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\n\nconst WorkspaceFoldersFeature = Base => {\n  return class extends Base {\n    initialize(capabilities) {\n      let workspaceCapabilities = capabilities.workspace;\n\n      if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {\n        this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();\n        this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, params => {\n          this._onDidChangeWorkspaceFolders.fire(params.event);\n        });\n      }\n    }\n\n    getWorkspaceFolders() {\n      return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);\n    }\n\n    get onDidChangeWorkspaceFolders() {\n      if (!this._onDidChangeWorkspaceFolders) {\n        throw new Error('Client doesn\\'t support sending workspace folder change events.');\n      }\n\n      if (!this._unregistration) {\n        this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);\n      }\n\n      return this._onDidChangeWorkspaceFolders.event;\n    }\n\n  };\n};\n\nexports.WorkspaceFoldersFeature = WorkspaceFoldersFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","WorkspaceFoldersFeature","vscode_languageserver_protocol_1","require","Base","initialize","capabilities","workspaceCapabilities","workspace","workspaceFolders","_onDidChangeWorkspaceFolders","Emitter","connection","onNotification","DidChangeWorkspaceFoldersNotification","type","params","fire","event","getWorkspaceFolders","sendRequest","WorkspaceFoldersRequest","onDidChangeWorkspaceFolders","Error","_unregistration","client","register"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/vscode-languageserver/lib/common/workspaceFolders.js"],"sourcesContent":["/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WorkspaceFoldersFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst WorkspaceFoldersFeature = (Base) => {\n    return class extends Base {\n        initialize(capabilities) {\n            let workspaceCapabilities = capabilities.workspace;\n            if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {\n                this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();\n                this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, (params) => {\n                    this._onDidChangeWorkspaceFolders.fire(params.event);\n                });\n            }\n        }\n        getWorkspaceFolders() {\n            return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);\n        }\n        get onDidChangeWorkspaceFolders() {\n            if (!this._onDidChangeWorkspaceFolders) {\n                throw new Error('Client doesn\\'t support sending workspace folder change events.');\n            }\n            if (!this._unregistration) {\n                this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);\n            }\n            return this._onDidChangeWorkspaceFolders.event;\n        }\n    };\n};\nexports.WorkspaceFoldersFeature = WorkspaceFoldersFeature;\n//# sourceMappingURL=workspaceFolders.js.map"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,uBAAR,GAAkC,KAAK,CAAvC;;AACA,MAAMC,gCAAgC,GAAGC,OAAO,CAAC,gCAAD,CAAhD;;AACA,MAAMF,uBAAuB,GAAIG,IAAD,IAAU;EACtC,OAAO,cAAcA,IAAd,CAAmB;IACtBC,UAAU,CAACC,YAAD,EAAe;MACrB,IAAIC,qBAAqB,GAAGD,YAAY,CAACE,SAAzC;;MACA,IAAID,qBAAqB,IAAIA,qBAAqB,CAACE,gBAAnD,EAAqE;QACjE,KAAKC,4BAAL,GAAoC,IAAIR,gCAAgC,CAACS,OAArC,EAApC;QACA,KAAKC,UAAL,CAAgBC,cAAhB,CAA+BX,gCAAgC,CAACY,qCAAjC,CAAuEC,IAAtG,EAA6GC,MAAD,IAAY;UACpH,KAAKN,4BAAL,CAAkCO,IAAlC,CAAuCD,MAAM,CAACE,KAA9C;QACH,CAFD;MAGH;IACJ;;IACDC,mBAAmB,GAAG;MAClB,OAAO,KAAKP,UAAL,CAAgBQ,WAAhB,CAA4BlB,gCAAgC,CAACmB,uBAAjC,CAAyDN,IAArF,CAAP;IACH;;IAC8B,IAA3BO,2BAA2B,GAAG;MAC9B,IAAI,CAAC,KAAKZ,4BAAV,EAAwC;QACpC,MAAM,IAAIa,KAAJ,CAAU,iEAAV,CAAN;MACH;;MACD,IAAI,CAAC,KAAKC,eAAV,EAA2B;QACvB,KAAKA,eAAL,GAAuB,KAAKZ,UAAL,CAAgBa,MAAhB,CAAuBC,QAAvB,CAAgCxB,gCAAgC,CAACY,qCAAjC,CAAuEC,IAAvG,CAAvB;MACH;;MACD,OAAO,KAAKL,4BAAL,CAAkCQ,KAAzC;IACH;;EArBqB,CAA1B;AAuBH,CAxBD;;AAyBAnB,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC"},"metadata":{},"sourceType":"script"}