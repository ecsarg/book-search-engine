{"ast":null,"code":"import { __rest } from 'tslib';\nimport { ApolloLink, Observable } from 'apollo-link';\n\nfunction setContext(setter) {\n  return new ApolloLink(function (operation, forward) {\n    var request = __rest(operation, []);\n\n    return new Observable(function (observer) {\n      var handle;\n      Promise.resolve(request).then(function (req) {\n        return setter(req, operation.getContext());\n      }).then(operation.setContext).then(function () {\n        handle = forward(operation).subscribe({\n          next: observer.next.bind(observer),\n          error: observer.error.bind(observer),\n          complete: observer.complete.bind(observer)\n        });\n      }).catch(observer.error.bind(observer));\n      return function () {\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}\n\nexport { setContext };","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;SAagB,U,CAAW,M,EAAqB;EAC9C,OAAO,IAAI,UAAJ,CAAe,UAAC,SAAD,EAAuB,OAAvB,EAAwC;IAC5D,IAAQ,OAAA,GAAA,MAAA,CAAA,SAAA,EAAA,EAAA,CAAR;;IAEA,OAAO,IAAI,UAAJ,CAAe,UAAA,QAAA,EAAQ;MAC5B,IAAI,MAAJ;MACA,OAAO,CAAC,OAAR,CAAgB,OAAhB,EACG,IADH,CACQ,UAAA,GAAA,EAAG;QAAI,OAAA,MAAM,CAAC,GAAD,EAAM,SAAS,CAAC,UAAV,EAAN,CAAN;MAAmC,CADlD,EAEG,IAFH,CAEQ,SAAS,CAAC,UAFlB,EAGG,IAHH,CAGQ,YAAA;QACJ,MAAM,GAAG,OAAO,CAAC,SAAD,CAAP,CAAmB,SAAnB,CAA6B;UACpC,IAAI,EAAE,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAmB,QAAnB,CAD8B;UAEpC,KAAK,EAAE,QAAQ,CAAC,KAAT,CAAe,IAAf,CAAoB,QAApB,CAF6B;UAGpC,QAAQ,EAAE,QAAQ,CAAC,QAAT,CAAkB,IAAlB,CAAuB,QAAvB;QAH0B,CAA7B,CAAT;MAKD,CATH,EAUG,KAVH,CAUS,QAAQ,CAAC,KAAT,CAAe,IAAf,CAAoB,QAApB,CAVT;MAYA,OAAO,YAAA;QACL,IAAI,MAAJ,EAAY,MAAM,CAAC,WAAP;MACb,CAFD;IAGD,CAjBM,CAAP;EAkBD,CArBM,CAAP;AAsBF","sourcesContent":["import {\n  ApolloLink,\n  Observable,\n  Operation,\n  NextLink,\n  GraphQLRequest,\n} from 'apollo-link';\n\nexport type ContextSetter = (\n  operation: GraphQLRequest,\n  prevContext: any,\n) => Promise<any> | any;\n\nexport function setContext(setter: ContextSetter): ApolloLink {\n  return new ApolloLink((operation: Operation, forward: NextLink) => {\n    const { ...request } = operation;\n\n    return new Observable(observer => {\n      let handle;\n      Promise.resolve(request)\n        .then(req => setter(req, operation.getContext()))\n        .then(operation.setContext)\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}