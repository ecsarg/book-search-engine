{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildFederatedSchema = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst apollo_graphql_1 = require(\"apollo-graphql\");\n\nconst directives_1 = require(\"../directives\");\n\nconst types_1 = require(\"../types\");\n\nconst printFederatedSchema_1 = require(\"./printFederatedSchema\");\n\nfunction buildFederatedSchema(modulesOrSDL) {\n  let shapedModulesOrSDL;\n\n  if ('typeDefs' in modulesOrSDL) {\n    const {\n      typeDefs,\n      resolvers\n    } = modulesOrSDL;\n    const augmentedTypeDefs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];\n    shapedModulesOrSDL = augmentedTypeDefs.map((typeDefs, i) => {\n      const module = {\n        typeDefs\n      };\n      if (i === 0 && resolvers) module.resolvers = resolvers;\n      return module;\n    });\n  } else {\n    shapedModulesOrSDL = modulesOrSDL;\n  }\n\n  const modules = apollo_graphql_1.modulesFromSDL(shapedModulesOrSDL);\n  let schema = apollo_graphql_1.buildSchemaFromSDL(modules, new graphql_1.GraphQLSchema({\n    query: undefined,\n    directives: [...graphql_1.specifiedDirectives, ...directives_1.federationDirectives]\n  }));\n  const sdl = printFederatedSchema_1.printSchema(schema);\n\n  if (!schema.getQueryType()) {\n    schema = new graphql_1.GraphQLSchema({ ...schema.toConfig(),\n      query: new graphql_1.GraphQLObjectType({\n        name: 'Query',\n        fields: {}\n      })\n    });\n  }\n\n  const entityTypes = Object.values(schema.getTypeMap()).filter(type => graphql_1.isObjectType(type) && directives_1.typeIncludesDirective(type, 'key'));\n  const hasEntities = entityTypes.length > 0;\n  schema = apollo_graphql_1.transformSchema(schema, type => {\n    if (graphql_1.isObjectType(type) && type === schema.getQueryType()) {\n      const config = type.toConfig();\n      return new graphql_1.GraphQLObjectType({ ...config,\n        fields: { ...(hasEntities && {\n            _entities: types_1.entitiesField\n          }),\n          _service: { ...types_1.serviceField,\n            resolve: () => ({\n              sdl\n            })\n          },\n          ...config.fields\n        }\n      });\n    }\n\n    return undefined;\n  });\n  schema = apollo_graphql_1.transformSchema(schema, type => {\n    if (hasEntities && graphql_1.isUnionType(type) && type.name === types_1.EntityType.name) {\n      return new graphql_1.GraphQLUnionType({ ...types_1.EntityType.toConfig(),\n        types: entityTypes.filter(graphql_1.isObjectType)\n      });\n    }\n\n    return undefined;\n  });\n\n  for (const module of modules) {\n    if (!module.resolvers) continue;\n    apollo_graphql_1.addResolversToSchema(schema, module.resolvers);\n  }\n\n  return schema;\n}\n\nexports.buildFederatedSchema = buildFederatedSchema;","map":{"version":3,"sources":["../../src/service/buildFederatedSchema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.buildFederatedSchema = void 0;\nconst graphql_1 = require(\"graphql\");\nconst apollo_graphql_1 = require(\"apollo-graphql\");\nconst directives_1 = require(\"../directives\");\nconst types_1 = require(\"../types\");\nconst printFederatedSchema_1 = require(\"./printFederatedSchema\");\nfunction buildFederatedSchema(modulesOrSDL) {\n    let shapedModulesOrSDL;\n    if ('typeDefs' in modulesOrSDL) {\n        const { typeDefs, resolvers } = modulesOrSDL;\n        const augmentedTypeDefs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];\n        shapedModulesOrSDL = augmentedTypeDefs.map((typeDefs, i) => {\n            const module = { typeDefs };\n            if (i === 0 && resolvers)\n                module.resolvers = resolvers;\n            return module;\n        });\n    }\n    else {\n        shapedModulesOrSDL = modulesOrSDL;\n    }\n    const modules = apollo_graphql_1.modulesFromSDL(shapedModulesOrSDL);\n    let schema = apollo_graphql_1.buildSchemaFromSDL(modules, new graphql_1.GraphQLSchema({\n        query: undefined,\n        directives: [...graphql_1.specifiedDirectives, ...directives_1.federationDirectives],\n    }));\n    const sdl = printFederatedSchema_1.printSchema(schema);\n    if (!schema.getQueryType()) {\n        schema = new graphql_1.GraphQLSchema({\n            ...schema.toConfig(),\n            query: new graphql_1.GraphQLObjectType({\n                name: 'Query',\n                fields: {},\n            }),\n        });\n    }\n    const entityTypes = Object.values(schema.getTypeMap()).filter(type => graphql_1.isObjectType(type) && directives_1.typeIncludesDirective(type, 'key'));\n    const hasEntities = entityTypes.length > 0;\n    schema = apollo_graphql_1.transformSchema(schema, type => {\n        if (graphql_1.isObjectType(type) && type === schema.getQueryType()) {\n            const config = type.toConfig();\n            return new graphql_1.GraphQLObjectType({\n                ...config,\n                fields: {\n                    ...(hasEntities && { _entities: types_1.entitiesField }),\n                    _service: {\n                        ...types_1.serviceField,\n                        resolve: () => ({ sdl }),\n                    },\n                    ...config.fields,\n                },\n            });\n        }\n        return undefined;\n    });\n    schema = apollo_graphql_1.transformSchema(schema, type => {\n        if (hasEntities && graphql_1.isUnionType(type) && type.name === types_1.EntityType.name) {\n            return new graphql_1.GraphQLUnionType({\n                ...types_1.EntityType.toConfig(),\n                types: entityTypes.filter(graphql_1.isObjectType),\n            });\n        }\n        return undefined;\n    });\n    for (const module of modules) {\n        if (!module.resolvers)\n            continue;\n        apollo_graphql_1.addResolversToSchema(schema, module.resolvers);\n    }\n    return schema;\n}\nexports.buildFederatedSchema = buildFederatedSchema;\n//# sourceMappingURL=buildFederatedSchema.js.map"]},"metadata":{},"sourceType":"script"}