{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.table = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst F = (0, tslib_1.__importStar)(require(\"@oclif/core/lib/flags\"));\n\nconst screen_1 = require(\"@oclif/screen\");\n\nconst chalk_1 = (0, tslib_1.__importDefault)(require(\"chalk\"));\nconst capitalize_1 = (0, tslib_1.__importDefault)(require(\"lodash/capitalize\"));\nconst sumBy_1 = (0, tslib_1.__importDefault)(require(\"lodash/sumBy\"));\n\nconst js_yaml_1 = require(\"js-yaml\");\n\nconst util_1 = require(\"util\");\n\nconst sw = require('string-width');\n\nconst {\n  orderBy\n} = require('natural-orderby');\n\nclass Table {\n  constructor(data, columns, options = {}) {\n    this.data = data; // assign columns\n\n    this.columns = Object.keys(columns).map(key => {\n      const col = columns[key];\n      const extended = col.extended || false;\n\n      const get = col.get || (row => row[key]);\n\n      const header = typeof col.header === 'string' ? col.header : (0, capitalize_1.default)(key.replace(/_/g, ' '));\n      const minWidth = Math.max(col.minWidth || 0, sw(header) + 1);\n      return {\n        extended,\n        get,\n        header,\n        key,\n        minWidth\n      };\n    }); // assign options\n\n    const {\n      columns: cols,\n      filter,\n      csv,\n      output,\n      extended,\n      sort,\n      title,\n      printLine\n    } = options;\n    this.options = {\n      columns: cols,\n      output: csv ? 'csv' : output,\n      extended,\n      filter,\n      'no-header': options['no-header'] || false,\n      'no-truncate': options['no-truncate'] || false,\n      printLine: printLine || (s => process.stdout.write(s + '\\n')),\n      rowStart: ' ',\n      sort,\n      title\n    };\n  }\n\n  display() {\n    // build table rows from input array data\n    let rows = this.data.map(d => {\n      const row = {};\n\n      for (const col of this.columns) {\n        let val = col.get(d);\n        if (typeof val !== 'string') val = (0, util_1.inspect)(val, {\n          breakLength: Number.POSITIVE_INFINITY\n        });\n        row[col.key] = val;\n      }\n\n      return row;\n    }); // filter rows\n\n    if (this.options.filter) {\n      /* eslint-disable-next-line prefer-const */\n      let [header, regex] = this.options.filter.split('=');\n      const isNot = header[0] === '-';\n      if (isNot) header = header.slice(1);\n      const col = this.findColumnFromHeader(header);\n      if (!col || !regex) throw new Error('Filter flag has an invalid value');\n      rows = rows.filter(d => {\n        const re = new RegExp(regex);\n        const val = d[col.key];\n        const match = val.match(re);\n        return isNot ? !match : match;\n      });\n    } // sort rows\n\n\n    if (this.options.sort) {\n      const sorters = this.options.sort.split(',');\n      const sortHeaders = sorters.map(k => k[0] === '-' ? k.slice(1) : k);\n      const sortKeys = this.filterColumnsFromHeaders(sortHeaders).map(c => {\n        return v => v[c.key];\n      });\n      const sortKeysOrder = sorters.map(k => k[0] === '-' ? 'desc' : 'asc');\n      rows = orderBy(rows, sortKeys, sortKeysOrder);\n    } // and filter columns\n\n\n    if (this.options.columns) {\n      const filters = this.options.columns.split(',');\n      this.columns = this.filterColumnsFromHeaders(filters);\n    } else if (!this.options.extended) {\n      // show extented columns/properties\n      this.columns = this.columns.filter(c => !c.extended);\n    }\n\n    this.data = rows;\n\n    switch (this.options.output) {\n      case 'csv':\n        this.outputCSV();\n        break;\n\n      case 'json':\n        this.outputJSON();\n        break;\n\n      case 'yaml':\n        this.outputYAML();\n        break;\n\n      default:\n        this.outputTable();\n    }\n  }\n\n  findColumnFromHeader(header) {\n    return this.columns.find(c => c.header.toLowerCase() === header.toLowerCase());\n  }\n\n  filterColumnsFromHeaders(filters) {\n    // unique\n    filters = [...new Set(filters)];\n    const cols = [];\n\n    for (const f of filters) {\n      const c = this.columns.find(c => c.header.toLowerCase() === f.toLowerCase());\n      if (c) cols.push(c);\n    }\n\n    return cols;\n  }\n\n  getCSVRow(d) {\n    const values = this.columns.map(col => d[col.key] || '');\n    const lineToBeEscaped = values.find(e => e.includes('\"') || e.includes('\\n') || e.includes('\\r\\n') || e.includes('\\r') || e.includes(','));\n    return values.map(e => lineToBeEscaped ? `\"${e.replace('\"', '\"\"')}\"` : e);\n  }\n\n  resolveColumnsToObjectArray() {\n    // tslint:disable-next-line:no-this-assignment\n    const {\n      data,\n      columns\n    } = this;\n    return data.map(d => {\n      // eslint-disable-next-line unicorn/prefer-object-from-entries\n      return columns.reduce((obj, col) => {\n        return Object.assign(Object.assign({}, obj), {\n          [col.key]: d[col.key] || ''\n        });\n      }, {});\n    });\n  }\n\n  outputJSON() {\n    this.options.printLine(JSON.stringify(this.resolveColumnsToObjectArray(), undefined, 2));\n  }\n\n  outputYAML() {\n    this.options.printLine((0, js_yaml_1.safeDump)(this.resolveColumnsToObjectArray()));\n  }\n\n  outputCSV() {\n    // tslint:disable-next-line:no-this-assignment\n    const {\n      data,\n      columns,\n      options\n    } = this;\n\n    if (!options['no-header']) {\n      options.printLine(columns.map(c => c.header).join(','));\n    }\n\n    for (const d of data) {\n      const row = this.getCSVRow(d);\n      options.printLine(row.join(','));\n    }\n  }\n\n  outputTable() {\n    // tslint:disable-next-line:no-this-assignment\n    const {\n      data,\n      columns,\n      options\n    } = this; // column truncation\n    //\n    // find max width for each column\n\n    for (const col of columns) {\n      // convert multi-line cell to single longest line\n      // for width calculations\n      const widthData = data.map(row => {\n        const d = row[col.key];\n        const manyLines = d.split('\\n');\n\n        if (manyLines.length > 1) {\n          return '*'.repeat(Math.max(...manyLines.map(r => sw(r))));\n        }\n\n        return d;\n      });\n      const widths = ['.'.padEnd(col.minWidth - 1), col.header, ...widthData.map(row => row)].map(r => sw(r));\n      col.maxWidth = Math.max(...widths) + 1;\n      col.width = col.maxWidth;\n    } // terminal width\n\n\n    const maxWidth = screen_1.stdtermwidth - 2; // truncation logic\n\n    const shouldShorten = () => {\n      // don't shorten if full mode\n      if (options['no-truncate'] || !process.stdout.isTTY && !process.env.CLI_UX_SKIP_TTY_CHECK) return; // don't shorten if there is enough screen width\n\n      const dataMaxWidth = (0, sumBy_1.default)(columns, c => c.width);\n      const overWidth = dataMaxWidth - maxWidth;\n      if (overWidth <= 0) return; // not enough room, short all columns to minWidth\n\n      for (const col of columns) {\n        col.width = col.minWidth;\n      } // if sum(minWidth's) is greater than term width\n      // nothing can be done so\n      // display all as minWidth\n\n\n      const dataMinWidth = (0, sumBy_1.default)(columns, c => c.minWidth);\n      if (dataMinWidth >= maxWidth) return; // some wiggle room left, add it back to \"needy\" columns\n\n      let wiggleRoom = maxWidth - dataMinWidth;\n      const needyCols = columns.map(c => ({\n        key: c.key,\n        needs: c.maxWidth - c.width\n      })).sort((a, b) => a.needs - b.needs);\n\n      for (const {\n        key,\n        needs\n      } of needyCols) {\n        if (!needs) continue;\n        const col = columns.find(c => key === c.key);\n        if (!col) continue;\n\n        if (wiggleRoom > needs) {\n          col.width = col.width + needs;\n          wiggleRoom -= needs;\n        } else if (wiggleRoom) {\n          col.width = col.width + wiggleRoom;\n          wiggleRoom = 0;\n        }\n      }\n    };\n\n    shouldShorten(); // print table title\n\n    if (options.title) {\n      options.printLine(options.title); // print title divider\n\n      options.printLine(''.padEnd(columns.reduce((sum, col) => sum + col.width, 1), '='));\n      options.rowStart = '| ';\n    } // print headers\n\n\n    if (!options['no-header']) {\n      let headers = options.rowStart;\n\n      for (const col of columns) {\n        const header = col.header;\n        headers += header.padEnd(col.width);\n      }\n\n      options.printLine(chalk_1.default.bold(headers)); // print header dividers\n\n      let dividers = options.rowStart;\n\n      for (const col of columns) {\n        const divider = ''.padEnd(col.width - 1, '─') + ' ';\n        dividers += divider.padEnd(col.width);\n      }\n\n      options.printLine(chalk_1.default.bold(dividers));\n    } // print rows\n\n\n    for (const row of data) {\n      // find max number of lines\n      // for all cells in a row\n      // with multi-line strings\n      let numOfLines = 1;\n\n      for (const col of columns) {\n        const d = row[col.key];\n        const lines = d.split('\\n').length;\n        if (lines > numOfLines) numOfLines = lines;\n      } // eslint-disable-next-line unicorn/no-new-array\n\n\n      const linesIndexess = [...new Array(numOfLines).keys()]; // print row\n      // including multi-lines\n\n      for (const i of linesIndexess) {\n        let l = options.rowStart;\n\n        for (const col of columns) {\n          const width = col.width;\n          let d = row[col.key];\n          d = d.split('\\n')[i] || '';\n          const visualWidth = sw(d);\n          const colorWidth = d.length - visualWidth;\n          let cell = d.padEnd(width + colorWidth);\n\n          if (cell.length - colorWidth > width || visualWidth === width) {\n            cell = cell.slice(0, width - 2) + '… ';\n          }\n\n          l += cell;\n        }\n\n        options.printLine(l);\n      }\n    }\n  }\n\n}\n\nfunction table(data, columns, options = {}) {\n  new Table(data, columns, options).display();\n}\n\nexports.table = table;\n\n(function (table) {\n  table.Flags = {\n    columns: F.string({\n      exclusive: ['extended'],\n      description: 'only show provided columns (comma-separated)'\n    }),\n    sort: F.string({\n      description: 'property to sort by (prepend \\'-\\' for descending)'\n    }),\n    filter: F.string({\n      description: 'filter property by partial string matching, ex: name=foo'\n    }),\n    csv: F.boolean({\n      exclusive: ['no-truncate'],\n      description: 'output is csv format [alias: --output=csv]'\n    }),\n    output: F.string({\n      exclusive: ['no-truncate', 'csv'],\n      description: 'output in a more machine friendly format',\n      options: ['csv', 'json', 'yaml']\n    }),\n    extended: F.boolean({\n      exclusive: ['columns'],\n      char: 'x',\n      description: 'show extra columns'\n    }),\n    'no-truncate': F.boolean({\n      exclusive: ['csv'],\n      description: 'do not truncate output to fit screen'\n    }),\n    'no-header': F.boolean({\n      exclusive: ['csv'],\n      description: 'hide table header from output'\n    })\n  }; // eslint-disable-next-line no-inner-declarations\n\n  function flags(opts) {\n    if (opts) {\n      const f = {};\n      const o = (opts.only && typeof opts.only === 'string' ? [opts.only] : opts.only) || Object.keys(table.Flags);\n      const e = (opts.except && typeof opts.except === 'string' ? [opts.except] : opts.except) || [];\n\n      for (const key of o) {\n        if (!e.includes(key)) {\n          f[key] = table.Flags[key];\n        }\n      }\n\n      return f;\n    }\n\n    return table.Flags;\n  }\n\n  table.flags = flags;\n})(table = exports.table || (exports.table = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","table","tslib_1","require","F","__importStar","screen_1","chalk_1","__importDefault","capitalize_1","sumBy_1","js_yaml_1","util_1","sw","orderBy","Table","constructor","data","columns","options","keys","map","key","col","extended","get","row","header","default","replace","minWidth","Math","max","cols","filter","csv","output","sort","title","printLine","s","process","stdout","write","rowStart","display","rows","d","val","inspect","breakLength","Number","POSITIVE_INFINITY","regex","split","isNot","slice","findColumnFromHeader","Error","re","RegExp","match","sorters","sortHeaders","k","sortKeys","filterColumnsFromHeaders","c","v","sortKeysOrder","filters","outputCSV","outputJSON","outputYAML","outputTable","find","toLowerCase","Set","f","push","getCSVRow","values","lineToBeEscaped","e","includes","resolveColumnsToObjectArray","reduce","obj","assign","JSON","stringify","undefined","safeDump","join","widthData","manyLines","length","repeat","r","widths","padEnd","maxWidth","width","stdtermwidth","shouldShorten","isTTY","env","CLI_UX_SKIP_TTY_CHECK","dataMaxWidth","overWidth","dataMinWidth","wiggleRoom","needyCols","needs","a","b","sum","headers","bold","dividers","divider","numOfLines","lines","linesIndexess","Array","i","l","visualWidth","colorWidth","cell","Flags","string","exclusive","description","boolean","char","flags","opts","o","only","except"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/cli-ux/lib/styled/table.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.table = void 0;\nconst tslib_1 = require(\"tslib\");\nconst F = (0, tslib_1.__importStar)(require(\"@oclif/core/lib/flags\"));\nconst screen_1 = require(\"@oclif/screen\");\nconst chalk_1 = (0, tslib_1.__importDefault)(require(\"chalk\"));\nconst capitalize_1 = (0, tslib_1.__importDefault)(require(\"lodash/capitalize\"));\nconst sumBy_1 = (0, tslib_1.__importDefault)(require(\"lodash/sumBy\"));\nconst js_yaml_1 = require(\"js-yaml\");\nconst util_1 = require(\"util\");\nconst sw = require('string-width');\nconst { orderBy } = require('natural-orderby');\nclass Table {\n    constructor(data, columns, options = {}) {\n        this.data = data;\n        // assign columns\n        this.columns = Object.keys(columns).map((key) => {\n            const col = columns[key];\n            const extended = col.extended || false;\n            const get = col.get || ((row) => row[key]);\n            const header = typeof col.header === 'string' ? col.header : (0, capitalize_1.default)(key.replace(/_/g, ' '));\n            const minWidth = Math.max(col.minWidth || 0, sw(header) + 1);\n            return {\n                extended,\n                get,\n                header,\n                key,\n                minWidth,\n            };\n        });\n        // assign options\n        const { columns: cols, filter, csv, output, extended, sort, title, printLine } = options;\n        this.options = {\n            columns: cols,\n            output: csv ? 'csv' : output,\n            extended,\n            filter,\n            'no-header': options['no-header'] || false,\n            'no-truncate': options['no-truncate'] || false,\n            printLine: printLine || ((s) => process.stdout.write(s + '\\n')),\n            rowStart: ' ',\n            sort,\n            title,\n        };\n    }\n    display() {\n        // build table rows from input array data\n        let rows = this.data.map(d => {\n            const row = {};\n            for (const col of this.columns) {\n                let val = col.get(d);\n                if (typeof val !== 'string')\n                    val = (0, util_1.inspect)(val, { breakLength: Number.POSITIVE_INFINITY });\n                row[col.key] = val;\n            }\n            return row;\n        });\n        // filter rows\n        if (this.options.filter) {\n            /* eslint-disable-next-line prefer-const */\n            let [header, regex] = this.options.filter.split('=');\n            const isNot = header[0] === '-';\n            if (isNot)\n                header = header.slice(1);\n            const col = this.findColumnFromHeader(header);\n            if (!col || !regex)\n                throw new Error('Filter flag has an invalid value');\n            rows = rows.filter((d) => {\n                const re = new RegExp(regex);\n                const val = d[col.key];\n                const match = val.match(re);\n                return isNot ? !match : match;\n            });\n        }\n        // sort rows\n        if (this.options.sort) {\n            const sorters = this.options.sort.split(',');\n            const sortHeaders = sorters.map(k => k[0] === '-' ? k.slice(1) : k);\n            const sortKeys = this.filterColumnsFromHeaders(sortHeaders).map(c => {\n                return ((v) => v[c.key]);\n            });\n            const sortKeysOrder = sorters.map(k => k[0] === '-' ? 'desc' : 'asc');\n            rows = orderBy(rows, sortKeys, sortKeysOrder);\n        }\n        // and filter columns\n        if (this.options.columns) {\n            const filters = this.options.columns.split(',');\n            this.columns = this.filterColumnsFromHeaders(filters);\n        }\n        else if (!this.options.extended) {\n            // show extented columns/properties\n            this.columns = this.columns.filter(c => !c.extended);\n        }\n        this.data = rows;\n        switch (this.options.output) {\n            case 'csv':\n                this.outputCSV();\n                break;\n            case 'json':\n                this.outputJSON();\n                break;\n            case 'yaml':\n                this.outputYAML();\n                break;\n            default:\n                this.outputTable();\n        }\n    }\n    findColumnFromHeader(header) {\n        return this.columns.find(c => c.header.toLowerCase() === header.toLowerCase());\n    }\n    filterColumnsFromHeaders(filters) {\n        // unique\n        filters = [...(new Set(filters))];\n        const cols = [];\n        for (const f of filters) {\n            const c = this.columns.find(c => c.header.toLowerCase() === f.toLowerCase());\n            if (c)\n                cols.push(c);\n        }\n        return cols;\n    }\n    getCSVRow(d) {\n        const values = this.columns.map(col => d[col.key] || '');\n        const lineToBeEscaped = values.find((e) => e.includes('\"') || e.includes('\\n') || e.includes('\\r\\n') || e.includes('\\r') || e.includes(','));\n        return values.map(e => lineToBeEscaped ? `\"${e.replace('\"', '\"\"')}\"` : e);\n    }\n    resolveColumnsToObjectArray() {\n        // tslint:disable-next-line:no-this-assignment\n        const { data, columns } = this;\n        return data.map((d) => {\n            // eslint-disable-next-line unicorn/prefer-object-from-entries\n            return columns.reduce((obj, col) => {\n                return Object.assign(Object.assign({}, obj), { [col.key]: d[col.key] || '' });\n            }, {});\n        });\n    }\n    outputJSON() {\n        this.options.printLine(JSON.stringify(this.resolveColumnsToObjectArray(), undefined, 2));\n    }\n    outputYAML() {\n        this.options.printLine((0, js_yaml_1.safeDump)(this.resolveColumnsToObjectArray()));\n    }\n    outputCSV() {\n        // tslint:disable-next-line:no-this-assignment\n        const { data, columns, options } = this;\n        if (!options['no-header']) {\n            options.printLine(columns.map(c => c.header).join(','));\n        }\n        for (const d of data) {\n            const row = this.getCSVRow(d);\n            options.printLine(row.join(','));\n        }\n    }\n    outputTable() {\n        // tslint:disable-next-line:no-this-assignment\n        const { data, columns, options } = this;\n        // column truncation\n        //\n        // find max width for each column\n        for (const col of columns) {\n            // convert multi-line cell to single longest line\n            // for width calculations\n            const widthData = data.map((row) => {\n                const d = row[col.key];\n                const manyLines = d.split('\\n');\n                if (manyLines.length > 1) {\n                    return '*'.repeat(Math.max(...manyLines.map((r) => sw(r))));\n                }\n                return d;\n            });\n            const widths = ['.'.padEnd(col.minWidth - 1), col.header, ...widthData.map((row) => row)].map(r => sw(r));\n            col.maxWidth = Math.max(...widths) + 1;\n            col.width = col.maxWidth;\n        }\n        // terminal width\n        const maxWidth = screen_1.stdtermwidth - 2;\n        // truncation logic\n        const shouldShorten = () => {\n            // don't shorten if full mode\n            if (options['no-truncate'] || (!process.stdout.isTTY && !process.env.CLI_UX_SKIP_TTY_CHECK))\n                return;\n            // don't shorten if there is enough screen width\n            const dataMaxWidth = (0, sumBy_1.default)(columns, c => c.width);\n            const overWidth = dataMaxWidth - maxWidth;\n            if (overWidth <= 0)\n                return;\n            // not enough room, short all columns to minWidth\n            for (const col of columns) {\n                col.width = col.minWidth;\n            }\n            // if sum(minWidth's) is greater than term width\n            // nothing can be done so\n            // display all as minWidth\n            const dataMinWidth = (0, sumBy_1.default)(columns, c => c.minWidth);\n            if (dataMinWidth >= maxWidth)\n                return;\n            // some wiggle room left, add it back to \"needy\" columns\n            let wiggleRoom = maxWidth - dataMinWidth;\n            const needyCols = columns.map(c => ({ key: c.key, needs: c.maxWidth - c.width })).sort((a, b) => a.needs - b.needs);\n            for (const { key, needs } of needyCols) {\n                if (!needs)\n                    continue;\n                const col = columns.find(c => key === c.key);\n                if (!col)\n                    continue;\n                if (wiggleRoom > needs) {\n                    col.width = col.width + needs;\n                    wiggleRoom -= needs;\n                }\n                else if (wiggleRoom) {\n                    col.width = col.width + wiggleRoom;\n                    wiggleRoom = 0;\n                }\n            }\n        };\n        shouldShorten();\n        // print table title\n        if (options.title) {\n            options.printLine(options.title);\n            // print title divider\n            options.printLine(''.padEnd(columns.reduce((sum, col) => sum + col.width, 1), '='));\n            options.rowStart = '| ';\n        }\n        // print headers\n        if (!options['no-header']) {\n            let headers = options.rowStart;\n            for (const col of columns) {\n                const header = col.header;\n                headers += header.padEnd(col.width);\n            }\n            options.printLine(chalk_1.default.bold(headers));\n            // print header dividers\n            let dividers = options.rowStart;\n            for (const col of columns) {\n                const divider = ''.padEnd(col.width - 1, '─') + ' ';\n                dividers += divider.padEnd(col.width);\n            }\n            options.printLine(chalk_1.default.bold(dividers));\n        }\n        // print rows\n        for (const row of data) {\n            // find max number of lines\n            // for all cells in a row\n            // with multi-line strings\n            let numOfLines = 1;\n            for (const col of columns) {\n                const d = row[col.key];\n                const lines = d.split('\\n').length;\n                if (lines > numOfLines)\n                    numOfLines = lines;\n            }\n            // eslint-disable-next-line unicorn/no-new-array\n            const linesIndexess = [...new Array(numOfLines).keys()];\n            // print row\n            // including multi-lines\n            for (const i of linesIndexess) {\n                let l = options.rowStart;\n                for (const col of columns) {\n                    const width = col.width;\n                    let d = row[col.key];\n                    d = d.split('\\n')[i] || '';\n                    const visualWidth = sw(d);\n                    const colorWidth = (d.length - visualWidth);\n                    let cell = d.padEnd(width + colorWidth);\n                    if ((cell.length - colorWidth) > width || visualWidth === width) {\n                        cell = cell.slice(0, width - 2) + '… ';\n                    }\n                    l += cell;\n                }\n                options.printLine(l);\n            }\n        }\n    }\n}\nfunction table(data, columns, options = {}) {\n    new Table(data, columns, options).display();\n}\nexports.table = table;\n(function (table) {\n    table.Flags = {\n        columns: F.string({ exclusive: ['extended'], description: 'only show provided columns (comma-separated)' }),\n        sort: F.string({ description: 'property to sort by (prepend \\'-\\' for descending)' }),\n        filter: F.string({ description: 'filter property by partial string matching, ex: name=foo' }),\n        csv: F.boolean({ exclusive: ['no-truncate'], description: 'output is csv format [alias: --output=csv]' }),\n        output: F.string({\n            exclusive: ['no-truncate', 'csv'],\n            description: 'output in a more machine friendly format',\n            options: ['csv', 'json', 'yaml'],\n        }),\n        extended: F.boolean({ exclusive: ['columns'], char: 'x', description: 'show extra columns' }),\n        'no-truncate': F.boolean({ exclusive: ['csv'], description: 'do not truncate output to fit screen' }),\n        'no-header': F.boolean({ exclusive: ['csv'], description: 'hide table header from output' }),\n    };\n    // eslint-disable-next-line no-inner-declarations\n    function flags(opts) {\n        if (opts) {\n            const f = {};\n            const o = (opts.only && typeof opts.only === 'string' ? [opts.only] : opts.only) || Object.keys(table.Flags);\n            const e = (opts.except && typeof opts.except === 'string' ? [opts.except] : opts.except) || [];\n            for (const key of o) {\n                if (!e.includes(key)) {\n                    f[key] = table.Flags[key];\n                }\n            }\n            return f;\n        }\n        return table.Flags;\n    }\n    table.flags = flags;\n})(table = exports.table || (exports.table = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}