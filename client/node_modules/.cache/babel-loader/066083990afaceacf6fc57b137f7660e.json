{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateComposedSchema = exports.validateServicesBeforeComposition = exports.validateServicesBeforeNormalization = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst preNormalizationRules = __importStar(require(\"./preNormalization\"));\n\nconst preCompositionRules = __importStar(require(\"./preComposition\"));\n\nconst postCompositionRules = __importStar(require(\"./postComposition\"));\n\nconst preNormalizationValidators = Object.values(preNormalizationRules);\n\nfunction validateServicesBeforeNormalization(services) {\n  const errors = [];\n\n  for (const serviceDefinition of services) {\n    for (const validator of preNormalizationValidators) {\n      errors.push(...validator(serviceDefinition));\n    }\n  }\n\n  return errors;\n}\n\nexports.validateServicesBeforeNormalization = validateServicesBeforeNormalization;\nconst preCompositionValidators = Object.values(preCompositionRules);\n\nconst validateServicesBeforeComposition = services => {\n  const warningsOrErrors = [];\n\n  for (const serviceDefinition of services) {\n    for (const validator of preCompositionValidators) {\n      warningsOrErrors.push(...validator(serviceDefinition));\n    }\n  }\n\n  return warningsOrErrors;\n};\n\nexports.validateServicesBeforeComposition = validateServicesBeforeComposition;\nconst postCompositionValidators = Object.values(postCompositionRules);\n\nconst validateComposedSchema = ({\n  schema,\n  serviceList\n}) => {\n  const warningsOrErrors = [];\n  warningsOrErrors.push(...graphql_1.validateSchema(schema));\n\n  for (const validator of postCompositionValidators) {\n    warningsOrErrors.push(...validator({\n      schema,\n      serviceList\n    }));\n  }\n\n  return warningsOrErrors;\n};\n\nexports.validateComposedSchema = validateComposedSchema;","map":{"version":3,"sources":["../../../src/composition/validate/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAIA,MAAA,qBAAA,GAAA,YAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,YAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AACA,MAAA,oBAAA,GAAA,YAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;AAEA,MAAM,0BAA0B,GAAG,MAAM,CAAC,MAAP,CAAc,qBAAd,CAAnC;;AAEA,SAAgB,mCAAhB,CACE,QADF,EAC+B;EAE7B,MAAM,MAAM,GAAmB,EAA/B;;EAEA,KAAK,MAAM,iBAAX,IAAgC,QAAhC,EAA0C;IACxC,KAAK,MAAM,SAAX,IAAwB,0BAAxB,EAAoD;MAClD,MAAM,CAAC,IAAP,CAAY,GAAG,SAAS,CAAC,iBAAD,CAAxB;IACD;EACF;;EAED,OAAO,MAAP;AACD;;AAZD,OAAA,CAAA,mCAAA,GAAA,mCAAA;AAcA,MAAM,wBAAwB,GAAG,MAAM,CAAC,MAAP,CAAc,mBAAd,CAAjC;;AAEO,MAAM,iCAAiC,GAC5C,QAD+C,IAE7C;EACF,MAAM,gBAAgB,GAAmB,EAAzC;;EAEA,KAAK,MAAM,iBAAX,IAAgC,QAAhC,EAA0C;IACxC,KAAK,MAAM,SAAX,IAAwB,wBAAxB,EAAkD;MAChD,gBAAgB,CAAC,IAAjB,CAAsB,GAAG,SAAS,CAAC,iBAAD,CAAlC;IACD;EACF;;EAED,OAAO,gBAAP;AACD,CAZM;;AAAM,OAAA,CAAA,iCAAA,GAAiC,iCAAjC;AAcb,MAAM,yBAAyB,GAAG,MAAM,CAAC,MAAP,CAAc,oBAAd,CAAlC;;AAEO,MAAM,sBAAsB,GAAG,CAAC;EACrC,MADqC;EAErC;AAFqC,CAAD,KAMjB;EACnB,MAAM,gBAAgB,GAAmB,EAAzC;EAGA,gBAAgB,CAAC,IAAjB,CAAsB,GAAG,SAAA,CAAA,cAAA,CAAe,MAAf,CAAzB;;EACA,KAAK,MAAM,SAAX,IAAwB,yBAAxB,EAAmD;IACjD,gBAAgB,CAAC,IAAjB,CAAsB,GAAG,SAAS,CAAC;MAAE,MAAF;MAAU;IAAV,CAAD,CAAlC;EACD;;EAED,OAAO,gBAAP;AACD,CAhBM;;AAAM,OAAA,CAAA,sBAAA,GAAsB,sBAAtB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateComposedSchema = exports.validateServicesBeforeComposition = exports.validateServicesBeforeNormalization = void 0;\nconst graphql_1 = require(\"graphql\");\nconst preNormalizationRules = __importStar(require(\"./preNormalization\"));\nconst preCompositionRules = __importStar(require(\"./preComposition\"));\nconst postCompositionRules = __importStar(require(\"./postComposition\"));\nconst preNormalizationValidators = Object.values(preNormalizationRules);\nfunction validateServicesBeforeNormalization(services) {\n    const errors = [];\n    for (const serviceDefinition of services) {\n        for (const validator of preNormalizationValidators) {\n            errors.push(...validator(serviceDefinition));\n        }\n    }\n    return errors;\n}\nexports.validateServicesBeforeNormalization = validateServicesBeforeNormalization;\nconst preCompositionValidators = Object.values(preCompositionRules);\nconst validateServicesBeforeComposition = (services) => {\n    const warningsOrErrors = [];\n    for (const serviceDefinition of services) {\n        for (const validator of preCompositionValidators) {\n            warningsOrErrors.push(...validator(serviceDefinition));\n        }\n    }\n    return warningsOrErrors;\n};\nexports.validateServicesBeforeComposition = validateServicesBeforeComposition;\nconst postCompositionValidators = Object.values(postCompositionRules);\nconst validateComposedSchema = ({ schema, serviceList, }) => {\n    const warningsOrErrors = [];\n    warningsOrErrors.push(...graphql_1.validateSchema(schema));\n    for (const validator of postCompositionValidators) {\n        warningsOrErrors.push(...validator({ schema, serviceList }));\n    }\n    return warningsOrErrors;\n};\nexports.validateComposedSchema = validateComposedSchema;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}