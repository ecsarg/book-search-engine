{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _child_process = _interopRequireDefault(require(\"child_process\"));\n\nvar _git_log_format_markers = require(\"./constants/git_log_format_markers\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst gitLogFormatString = `${_git_log_format_markers.gitLogCommitMarker}%n%H%n%an%n%ae%n%aD%n${_git_log_format_markers.gitLogMessageMarker}%n%B%n${_git_log_format_markers.gitLogFileMarker}`;\n/*\n  Returns a stream of git log data from a git repository\n*/\n\nconst gitLogStream = (pathToRepo, options = {}) => {\n  const sinceCommit = options.sinceCommit ? `${options.sinceCommit}..HEAD` : \"\";\n  const gitParams = [\"log\", `--pretty=format:${gitLogFormatString}`, \"--name-status\", sinceCommit, \"--\", \"./*\", \":!node_modules\"].filter(elt => elt !== \"\");\n\n  const gitProcess = _child_process.default.spawn(\"git\", gitParams, {\n    cwd: pathToRepo\n  });\n\n  const errorHandlers = [];\n  gitProcess.on(\"error\", e => errorHandlers.forEach(handler => handler(e)));\n  return {\n    stream: gitProcess.stdout,\n    addErrorHandler: fn => errorHandlers.push(fn)\n  };\n};\n\nvar _default = gitLogStream;\nexports.default = _default;","map":{"version":3,"sources":["../src/git_log_stream.ts"],"names":["gitLogFormatString","gitLogCommitMarker","gitLogMessageMarker","gitLogFileMarker","gitLogStream","options","sinceCommit","gitParams","elt","gitProcess","cwd","pathToRepo","errorHandlers","e","handler","stream","addErrorHandler","fn"],"mappings":";;;;;;;AAAA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;;;;;;;;AAMA,MAAMA,kBAAkB,GAAI,GAAEC,uBAAAA,CAAAA,kBAAmB,wBAAuBC,uBAAAA,CAAAA,mBAAoB,SAAQC,uBAAAA,CAAAA,gBAApG,EAAA;AAQA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,CAAA,UAAA,EAEnBC,OAA4B,GAFT,EAAA,KAGhB;EACH,MAAMC,WAAW,GAAGD,OAAO,CAAPA,WAAAA,GAAuB,GAAEA,OAAO,CAACC,WAAjCD,QAAAA,GAApB,EAAA;EACA,MAAME,SAAS,GAAG,CAAA,KAAA,EAEf,mBAAkBP,kBAFH,EAAA,EAAA,eAAA,EAAA,WAAA,EAAA,IAAA,EAAA,KAAA,EAAA,gBAAA,EAAA,MAAA,CAQRQ,GAAD,IAASA,GAAG,KARrB,EAAkB,CAAlB;;EAUA,MAAMC,UAAU,GAAG,cAAA,CAAA,OAAA,CAAA,KAAA,CAAA,KAAA,EAAA,SAAA,EAAqC;IAAEC,GAAG,EAAEC;EAAP,CAArC,CAAnB;;EACA,MAAMC,aAAyC,GAA/C,EAAA;EACAH,UAAU,CAAVA,EAAAA,CAAAA,OAAAA,EAAwBI,CAAD,IAAOD,aAAa,CAAbA,OAAAA,CAAuBE,OAAD,IAAaA,OAAO,CAAxEL,CAAwE,CAA1CG,CAA9BH;EACA,OAAO;IACLM,MAAM,EAAEN,UAAU,CADb,MAAA;IAELO,eAAe,EAAGC,EAAD,IAAkCL,aAAa,CAAbA,IAAAA,CAAAA,EAAAA;EAF9C,CAAP;AAlBF,CAAA;;eAwBeR,Y","sourcesContent":["import childProcess from \"child_process\";\nimport {\n  gitLogCommitMarker,\n  gitLogMessageMarker,\n  gitLogFileMarker,\n} from \"./constants/git_log_format_markers\";\n\nconst gitLogFormatString = `${gitLogCommitMarker}%n%H%n%an%n%ae%n%aD%n${gitLogMessageMarker}%n%B%n${gitLogFileMarker}`;\n\nexport type GitLogStreamErrorHandler = (error: Error) => void;\n\nexport interface GitLogStreamOptions {\n  sinceCommit?: string;\n}\n\n/*\n  Returns a stream of git log data from a git repository\n*/\nconst gitLogStream = (\n  pathToRepo: string,\n  options: GitLogStreamOptions = {}\n) => {\n  const sinceCommit = options.sinceCommit ? `${options.sinceCommit}..HEAD` : \"\";\n  const gitParams = [\n    \"log\",\n    `--pretty=format:${gitLogFormatString}`,\n    \"--name-status\",\n    sinceCommit,\n    \"--\",\n    \"./*\",\n    \":!node_modules\",\n  ].filter((elt) => elt !== \"\");\n\n  const gitProcess = childProcess.spawn(\"git\", gitParams, { cwd: pathToRepo });\n  const errorHandlers: GitLogStreamErrorHandler[] = [];\n  gitProcess.on(\"error\", (e) => errorHandlers.forEach((handler) => handler(e)));\n  return {\n    stream: gitProcess.stdout,\n    addErrorHandler: (fn: GitLogStreamErrorHandler) => errorHandlers.push(fn),\n  };\n};\n\nexport default gitLogStream;\n"]},"metadata":{},"sourceType":"script"}