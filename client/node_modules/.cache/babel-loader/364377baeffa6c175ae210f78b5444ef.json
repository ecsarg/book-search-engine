{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadConfig = exports.keyEnvVar = exports.legacyKeyEnvVar = void 0;\n\nconst cosmiconfig_1 = require(\"cosmiconfig\");\n\nconst cosmiconfig_typescript_loader_1 = __importDefault(require(\"@endemolshinegroup/cosmiconfig-typescript-loader\"));\n\nconst path_1 = require(\"path\");\n\nconst fs_1 = require(\"fs\");\n\nconst lodash_merge_1 = __importDefault(require(\"lodash.merge\"));\n\nconst config_1 = require(\"./config\");\n\nconst utils_1 = require(\"./utils\");\n\nconst vscode_uri_1 = __importDefault(require(\"vscode-uri\"));\n\nconst utilities_1 = require(\"../utilities\");\n\nconst MODULE_NAME = \"apollo\";\nconst defaultFileNames = [\"package.json\", `${MODULE_NAME}.config.js`, `${MODULE_NAME}.config.ts`, `${MODULE_NAME}.config.cjs`];\nconst envFileNames = [\".env\", \".env.local\"];\nconst loaders = {\n  \".cjs\": cosmiconfig_1.defaultLoaders[\".js\"],\n  \".js\": cosmiconfig_1.defaultLoaders[\".js\"],\n  \".json\": cosmiconfig_1.defaultLoaders[\".json\"],\n  \".ts\": cosmiconfig_typescript_loader_1.default\n};\nexports.legacyKeyEnvVar = \"ENGINE_API_KEY\";\nexports.keyEnvVar = \"APOLLO_KEY\";\n\nasync function loadConfig({\n  configPath,\n  configFileName,\n  requireConfig = false,\n  name,\n  type\n}) {\n  const explorer = (0, cosmiconfig_1.cosmiconfig)(MODULE_NAME, {\n    searchPlaces: configFileName ? [configFileName] : defaultFileNames,\n    loaders\n  });\n  let loadedConfig;\n\n  try {\n    loadedConfig = await explorer.search(configPath);\n  } catch (error) {\n    return utilities_1.Debug.error(`A config file failed to load with options: ${JSON.stringify(arguments[0])}.\n    The error was: ${error}`);\n  }\n\n  if (configPath && !loadedConfig) {\n    return utilities_1.Debug.error(`A config file failed to load at '${configPath}'. This is likely because this file is empty or malformed. For more information, please refer to: https://go.apollo.dev/t/config`);\n  }\n\n  if (loadedConfig && loadedConfig.filepath.endsWith(\"package.json\")) {\n    utilities_1.Debug.warning('The \"apollo\" package.json configuration key will no longer be supported in Apollo v3. Please use the apollo.config.js file for Apollo project configuration. For more information, see: https://go.apollo.dev/t/config');\n  }\n\n  if (requireConfig && !loadedConfig) {\n    return utilities_1.Debug.error(`No Apollo config found for project. For more information, please refer to: https://go.apollo.dev/t/config`);\n  }\n\n  let engineConfig = {},\n      apiKey,\n      nameFromKey;\n  envFileNames.forEach(envFile => {\n    const dotEnvPath = configPath ? (0, path_1.resolve)(configPath, envFile) : (0, path_1.resolve)(process.cwd(), envFile);\n\n    if ((0, fs_1.existsSync)(dotEnvPath) && (0, fs_1.lstatSync)(dotEnvPath).isFile()) {\n      const env = require(\"dotenv\").parse((0, fs_1.readFileSync)(dotEnvPath));\n\n      const legacyKey = env[exports.legacyKeyEnvVar];\n      const key = env[exports.keyEnvVar];\n\n      if (legacyKey && key) {\n        utilities_1.Debug.warning(`Both ${exports.legacyKeyEnvVar} and ${exports.keyEnvVar} were found. ${exports.keyEnvVar} will take precedence.`);\n      }\n\n      if (legacyKey) {\n        utilities_1.Debug.warning(`[Deprecation warning] Setting the key via ${exports.legacyKeyEnvVar} is deprecated and will not be supported in future versions. Please use ${exports.keyEnvVar} instead.`);\n      }\n\n      apiKey = key || legacyKey;\n    }\n  });\n\n  if (apiKey) {\n    engineConfig = {\n      engine: {\n        apiKey\n      }\n    };\n    nameFromKey = (0, utils_1.getServiceFromKey)(apiKey);\n  }\n\n  let projectType;\n  if (type) projectType = type;else if (loadedConfig && loadedConfig.config.client) projectType = \"client\";else if (loadedConfig && loadedConfig.config.service) projectType = \"service\";else return utilities_1.Debug.error(\"Unable to resolve project type. Please add either a client or service config. For more information, please refer to https://go.apollo.dev/t/config\");\n  let serviceName = name || nameFromKey;\n\n  if (projectType === \"client\" && loadedConfig && loadedConfig.config.client && typeof loadedConfig.config.client.service === \"string\") {\n    serviceName = loadedConfig.config.client.service;\n  }\n\n  if (!loadedConfig || serviceName || !(loadedConfig.config.client || loadedConfig.config.service)) {\n    loadedConfig = {\n      filepath: configPath || process.cwd(),\n      config: Object.assign(Object.assign({}, loadedConfig && loadedConfig.config), projectType === \"client\" ? {\n        client: Object.assign(Object.assign(Object.assign({}, config_1.DefaultConfigBase), loadedConfig && loadedConfig.config.client), {\n          service: serviceName\n        })\n      } : {\n        service: Object.assign(Object.assign(Object.assign({}, config_1.DefaultConfigBase), loadedConfig && loadedConfig.config.service), {\n          name: serviceName\n        })\n      })\n    };\n  }\n\n  let {\n    config,\n    filepath\n  } = loadedConfig;\n  if (config.client) config = (0, lodash_merge_1.default)({\n    client: config_1.DefaultClientConfig\n  }, config);\n  if (config.service) config = (0, lodash_merge_1.default)({\n    service: config_1.DefaultServiceConfig\n  }, config);\n  if (engineConfig) config = (0, lodash_merge_1.default)(engineConfig, config);\n  config = (0, lodash_merge_1.default)({\n    engine: config_1.DefaultEngineConfig\n  }, config);\n  return new config_1.ApolloConfig(config, vscode_uri_1.default.file((0, path_1.resolve)(filepath)));\n}\n\nexports.loadConfig = loadConfig;","map":{"version":3,"sources":["../../src/config/loadConfig.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadConfig = exports.keyEnvVar = exports.legacyKeyEnvVar = void 0;\nconst cosmiconfig_1 = require(\"cosmiconfig\");\nconst cosmiconfig_typescript_loader_1 = __importDefault(require(\"@endemolshinegroup/cosmiconfig-typescript-loader\"));\nconst path_1 = require(\"path\");\nconst fs_1 = require(\"fs\");\nconst lodash_merge_1 = __importDefault(require(\"lodash.merge\"));\nconst config_1 = require(\"./config\");\nconst utils_1 = require(\"./utils\");\nconst vscode_uri_1 = __importDefault(require(\"vscode-uri\"));\nconst utilities_1 = require(\"../utilities\");\nconst MODULE_NAME = \"apollo\";\nconst defaultFileNames = [\n    \"package.json\",\n    `${MODULE_NAME}.config.js`,\n    `${MODULE_NAME}.config.ts`,\n    `${MODULE_NAME}.config.cjs`,\n];\nconst envFileNames = [\".env\", \".env.local\"];\nconst loaders = {\n    \".cjs\": cosmiconfig_1.defaultLoaders[\".js\"],\n    \".js\": cosmiconfig_1.defaultLoaders[\".js\"],\n    \".json\": cosmiconfig_1.defaultLoaders[\".json\"],\n    \".ts\": cosmiconfig_typescript_loader_1.default,\n};\nexports.legacyKeyEnvVar = \"ENGINE_API_KEY\";\nexports.keyEnvVar = \"APOLLO_KEY\";\nasync function loadConfig({ configPath, configFileName, requireConfig = false, name, type, }) {\n    const explorer = (0, cosmiconfig_1.cosmiconfig)(MODULE_NAME, {\n        searchPlaces: configFileName ? [configFileName] : defaultFileNames,\n        loaders,\n    });\n    let loadedConfig;\n    try {\n        loadedConfig = (await explorer.search(configPath));\n    }\n    catch (error) {\n        return utilities_1.Debug.error(`A config file failed to load with options: ${JSON.stringify(arguments[0])}.\n    The error was: ${error}`);\n    }\n    if (configPath && !loadedConfig) {\n        return utilities_1.Debug.error(`A config file failed to load at '${configPath}'. This is likely because this file is empty or malformed. For more information, please refer to: https://go.apollo.dev/t/config`);\n    }\n    if (loadedConfig && loadedConfig.filepath.endsWith(\"package.json\")) {\n        utilities_1.Debug.warning('The \"apollo\" package.json configuration key will no longer be supported in Apollo v3. Please use the apollo.config.js file for Apollo project configuration. For more information, see: https://go.apollo.dev/t/config');\n    }\n    if (requireConfig && !loadedConfig) {\n        return utilities_1.Debug.error(`No Apollo config found for project. For more information, please refer to: https://go.apollo.dev/t/config`);\n    }\n    let engineConfig = {}, apiKey, nameFromKey;\n    envFileNames.forEach((envFile) => {\n        const dotEnvPath = configPath\n            ? (0, path_1.resolve)(configPath, envFile)\n            : (0, path_1.resolve)(process.cwd(), envFile);\n        if ((0, fs_1.existsSync)(dotEnvPath) && (0, fs_1.lstatSync)(dotEnvPath).isFile()) {\n            const env = require(\"dotenv\").parse((0, fs_1.readFileSync)(dotEnvPath));\n            const legacyKey = env[exports.legacyKeyEnvVar];\n            const key = env[exports.keyEnvVar];\n            if (legacyKey && key) {\n                utilities_1.Debug.warning(`Both ${exports.legacyKeyEnvVar} and ${exports.keyEnvVar} were found. ${exports.keyEnvVar} will take precedence.`);\n            }\n            if (legacyKey) {\n                utilities_1.Debug.warning(`[Deprecation warning] Setting the key via ${exports.legacyKeyEnvVar} is deprecated and will not be supported in future versions. Please use ${exports.keyEnvVar} instead.`);\n            }\n            apiKey = key || legacyKey;\n        }\n    });\n    if (apiKey) {\n        engineConfig = { engine: { apiKey } };\n        nameFromKey = (0, utils_1.getServiceFromKey)(apiKey);\n    }\n    let projectType;\n    if (type)\n        projectType = type;\n    else if (loadedConfig && loadedConfig.config.client)\n        projectType = \"client\";\n    else if (loadedConfig && loadedConfig.config.service)\n        projectType = \"service\";\n    else\n        return utilities_1.Debug.error(\"Unable to resolve project type. Please add either a client or service config. For more information, please refer to https://go.apollo.dev/t/config\");\n    let serviceName = name || nameFromKey;\n    if (projectType === \"client\" &&\n        loadedConfig &&\n        loadedConfig.config.client &&\n        typeof loadedConfig.config.client.service === \"string\") {\n        serviceName = loadedConfig.config.client.service;\n    }\n    if (!loadedConfig ||\n        serviceName ||\n        !(loadedConfig.config.client || loadedConfig.config.service)) {\n        loadedConfig = {\n            filepath: configPath || process.cwd(),\n            config: Object.assign(Object.assign({}, (loadedConfig && loadedConfig.config)), (projectType === \"client\"\n                ? {\n                    client: Object.assign(Object.assign(Object.assign({}, config_1.DefaultConfigBase), (loadedConfig && loadedConfig.config.client)), { service: serviceName }),\n                }\n                : {\n                    service: Object.assign(Object.assign(Object.assign({}, config_1.DefaultConfigBase), (loadedConfig && loadedConfig.config.service)), { name: serviceName }),\n                })),\n        };\n    }\n    let { config, filepath } = loadedConfig;\n    if (config.client)\n        config = (0, lodash_merge_1.default)({ client: config_1.DefaultClientConfig }, config);\n    if (config.service)\n        config = (0, lodash_merge_1.default)({ service: config_1.DefaultServiceConfig }, config);\n    if (engineConfig)\n        config = (0, lodash_merge_1.default)(engineConfig, config);\n    config = (0, lodash_merge_1.default)({ engine: config_1.DefaultEngineConfig }, config);\n    return new config_1.ApolloConfig(config, vscode_uri_1.default.file((0, path_1.resolve)(filepath)));\n}\nexports.loadConfig = loadConfig;\n//# sourceMappingURL=loadConfig.js.map"]},"metadata":{},"sourceType":"script"}