{"ast":null,"code":"// default time format\n// format a number of seconds into hours and minutes as appropriate\nmodule.exports = function formatTime(t, options, roundToMultipleOf) {\n  function round(input) {\n    if (roundToMultipleOf) {\n      return roundToMultipleOf * Math.round(input / roundToMultipleOf);\n    } else {\n      return input;\n    }\n  } // leading zero padding\n\n\n  function autopadding(v) {\n    return (options.autopaddingChar + v).slice(-2);\n  } // > 1h ?\n\n\n  if (t > 3600) {\n    return autopadding(Math.floor(t / 3600)) + 'h' + autopadding(round(t % 3600 / 60)) + 'm'; // > 60s ?\n  } else if (t > 60) {\n    return autopadding(Math.floor(t / 60)) + 'm' + autopadding(round(t % 60)) + 's'; // > 10s ?\n  } else if (t > 10) {\n    return autopadding(round(t)) + 's'; // default: don't apply round to multiple\n  } else {\n    return autopadding(t) + 's';\n  }\n};","map":{"version":3,"names":["module","exports","formatTime","t","options","roundToMultipleOf","round","input","Math","autopadding","v","autopaddingChar","slice","floor"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/cli-progress/lib/format-time.js"],"sourcesContent":["// default time format\n\n// format a number of seconds into hours and minutes as appropriate\nmodule.exports = function formatTime(t, options, roundToMultipleOf){\n    function round(input) {\n        if (roundToMultipleOf) {\n            return roundToMultipleOf * Math.round(input / roundToMultipleOf);\n        } else {\n            return input\n        }\n    }\n\n    // leading zero padding\n    function autopadding(v){\n        return (options.autopaddingChar + v).slice(-2);\n    }\n\n    // > 1h ?\n    if (t > 3600) {\n        return autopadding(Math.floor(t / 3600)) + 'h' + autopadding(round((t % 3600) / 60)) + 'm';\n\n    // > 60s ?\n    } else if (t > 60) {\n        return autopadding(Math.floor(t / 60)) + 'm' + autopadding(round((t % 60))) + 's';\n\n    // > 10s ?\n    } else if (t > 10) {\n        return autopadding(round(t)) + 's';\n\n    // default: don't apply round to multiple\n    }else{\n        return autopadding(t) + 's';\n    }\n}"],"mappings":"AAAA;AAEA;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,CAApB,EAAuBC,OAAvB,EAAgCC,iBAAhC,EAAkD;EAC/D,SAASC,KAAT,CAAeC,KAAf,EAAsB;IAClB,IAAIF,iBAAJ,EAAuB;MACnB,OAAOA,iBAAiB,GAAGG,IAAI,CAACF,KAAL,CAAWC,KAAK,GAAGF,iBAAnB,CAA3B;IACH,CAFD,MAEO;MACH,OAAOE,KAAP;IACH;EACJ,CAP8D,CAS/D;;;EACA,SAASE,WAAT,CAAqBC,CAArB,EAAuB;IACnB,OAAO,CAACN,OAAO,CAACO,eAAR,GAA0BD,CAA3B,EAA8BE,KAA9B,CAAoC,CAAC,CAArC,CAAP;EACH,CAZ8D,CAc/D;;;EACA,IAAIT,CAAC,GAAG,IAAR,EAAc;IACV,OAAOM,WAAW,CAACD,IAAI,CAACK,KAAL,CAAWV,CAAC,GAAG,IAAf,CAAD,CAAX,GAAoC,GAApC,GAA0CM,WAAW,CAACH,KAAK,CAAEH,CAAC,GAAG,IAAL,GAAa,EAAd,CAAN,CAArD,GAAgF,GAAvF,CADU,CAGd;EACC,CAJD,MAIO,IAAIA,CAAC,GAAG,EAAR,EAAY;IACf,OAAOM,WAAW,CAACD,IAAI,CAACK,KAAL,CAAWV,CAAC,GAAG,EAAf,CAAD,CAAX,GAAkC,GAAlC,GAAwCM,WAAW,CAACH,KAAK,CAAEH,CAAC,GAAG,EAAN,CAAN,CAAnD,GAAuE,GAA9E,CADe,CAGnB;EACC,CAJM,MAIA,IAAIA,CAAC,GAAG,EAAR,EAAY;IACf,OAAOM,WAAW,CAACH,KAAK,CAACH,CAAD,CAAN,CAAX,GAAwB,GAA/B,CADe,CAGnB;EACC,CAJM,MAIF;IACD,OAAOM,WAAW,CAACN,CAAD,CAAX,GAAiB,GAAxB;EACH;AACJ,CA9BD"},"metadata":{},"sourceType":"script"}