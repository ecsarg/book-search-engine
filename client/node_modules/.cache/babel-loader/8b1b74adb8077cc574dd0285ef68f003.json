{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _git_log_format_markers = require(\"./constants/git_log_format_markers\");\n\nvar _parse_commit = _interopRequireDefault(require(\"./parse_commit\"));\n\nvar _byline = _interopRequireDefault(require(\"byline\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst parseGitLog = stream => {\n  return new Promise((resolve, reject) => {\n    let buffer = [];\n    const parsedCommits = [];\n    const streamByLine = (0, _byline.default)(stream);\n    const commitPattern = _git_log_format_markers.gitLogCommitMarker;\n    streamByLine.on(\"data\", line => {\n      const lineString = line.toString();\n\n      if (lineString.match(commitPattern)) {\n        if (buffer.length) {\n          parsedCommits.push((0, _parse_commit.default)(buffer));\n          buffer = [];\n        }\n      } else {\n        buffer.push(lineString);\n      }\n    });\n    streamByLine.on(\"error\", e => {\n      reject(e);\n    });\n    streamByLine.on(\"end\", () => {\n      if (buffer.length) {\n        parsedCommits.push((0, _parse_commit.default)(buffer));\n      }\n\n      resolve(parsedCommits);\n    });\n  });\n};\n\nvar _default = parseGitLog;\nexports.default = _default;","map":{"version":3,"sources":["../src/parse_git_log.ts"],"names":["parseGitLog","stream","buffer","parsedCommits","streamByLine","commitPattern","gitLogCommitMarker","line","lineString","e","reject","resolve"],"mappings":";;;;;;;AACA,IAAA,uBAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;;;;;;;AAEA,MAAMA,WAAW,GAAIC,MAAD,IAAyD;EAC3E,OAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;IACtC,IAAIC,MAAgB,GAApB,EAAA;IACA,MAAMC,aAA0B,GAAhC,EAAA;IACA,MAAMC,YAAY,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAArB,MAAqB,CAArB;IACA,MAAMC,aAAa,GAAGC,uBAAAA,CAAtB,kBAAA;IAEAF,YAAY,CAAZA,EAAAA,CAAAA,MAAAA,EAAyBG,IAAD,IAAU;MAChC,MAAMC,UAAU,GAAGD,IAAI,CAAvB,QAAmBA,EAAnB;;MACA,IAAIC,UAAU,CAAVA,KAAAA,CAAJ,aAAIA,CAAJ,EAAqC;QACnC,IAAIN,MAAM,CAAV,MAAA,EAAmB;UACjBC,aAAa,CAAbA,IAAAA,CAAmB,CAAA,GAAA,aAAA,CAAA,OAAA,EAAnBA,MAAmB,CAAnBA;UACAD,MAAM,GAANA,EAAAA;QACD;MAJH,CAAA,MAKO;QACLA,MAAM,CAANA,IAAAA,CAAAA,UAAAA;MACD;IATHE,CAAAA;IAYAA,YAAY,CAAZA,EAAAA,CAAAA,OAAAA,EAA0BK,CAAD,IAAO;MAC9BC,MAAM,CAANA,CAAM,CAANA;IADFN,CAAAA;IAIAA,YAAY,CAAZA,EAAAA,CAAAA,KAAAA,EAAuB,MAAM;MAC3B,IAAIF,MAAM,CAAV,MAAA,EAAmB;QACjBC,aAAa,CAAbA,IAAAA,CAAmB,CAAA,GAAA,aAAA,CAAA,OAAA,EAAnBA,MAAmB,CAAnBA;MACD;;MACDQ,OAAO,CAAPA,aAAO,CAAPA;IAJFP,CAAAA;EAtBF,CAAO,CAAP;AADF,CAAA;;eAgCeJ,W","sourcesContent":["import type { GitCommit } from \"./types/git_commit_type\";\nimport { gitLogCommitMarker } from \"./constants/git_log_format_markers\";\nimport parseCommit from \"./parse_commit\";\nimport byline from \"byline\";\n\nconst parseGitLog = (stream: NodeJS.ReadableStream): Promise<GitCommit[]> => {\n  return new Promise((resolve, reject) => {\n    let buffer: string[] = [];\n    const parsedCommits: GitCommit[] = [];\n    const streamByLine = byline(stream);\n    const commitPattern = gitLogCommitMarker;\n\n    streamByLine.on(\"data\", (line) => {\n      const lineString = line.toString();\n      if (lineString.match(commitPattern)) {\n        if (buffer.length) {\n          parsedCommits.push(parseCommit(buffer));\n          buffer = [];\n        }\n      } else {\n        buffer.push(lineString);\n      }\n    });\n\n    streamByLine.on(\"error\", (e) => {\n      reject(e);\n    });\n\n    streamByLine.on(\"end\", () => {\n      if (buffer.length) {\n        parsedCommits.push(parseCommit(buffer));\n      }\n      resolve(parsedCommits);\n    });\n  });\n};\n\nexport default parseGitLog;\n"]},"metadata":{},"sourceType":"script"}