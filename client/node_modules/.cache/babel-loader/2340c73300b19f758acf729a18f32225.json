{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _git_log_format_markers = require(\"./constants/git_log_format_markers\");\n\nconst parseCommit = commit => {\n  const hash = commit[0];\n  const authorName = commit[1];\n  const authorEmail = commit[2];\n  const date = commit[3];\n  const messageIndex = commit.findIndex(line => line.match(_git_log_format_markers.gitLogMessageMarker));\n  const fileIndex = commit.findIndex(line => line.match(_git_log_format_markers.gitLogFileMarker));\n  const message = commit.slice(messageIndex + 1, fileIndex).join(\"\\n\");\n  const files = commit.slice(fileIndex + 1);\n  const addPattern = /^A\\s([^\\s]+)/;\n  const deletePattern = /^D\\s([^\\s]+)/;\n  const modifyPattern = /^M\\s([^\\s]+)/;\n  const renamePattern = /^R[0-9]+\\s(.+)\\s(.+)/;\n\n  const filterFileChanges = pattern => {\n    return files.reduce((accumulator, file) => {\n      const match = file.match(pattern);\n\n      if (match) {\n        accumulator.push({\n          path: match[1]\n        });\n      }\n\n      return accumulator;\n    }, []);\n  };\n\n  const filesRenamed = files.reduce((accumulator, file) => {\n    const match = file.match(renamePattern);\n\n    if (match) {\n      accumulator.push({\n        oldPath: match[1],\n        newPath: match[2]\n      });\n    }\n\n    return accumulator;\n  }, []);\n  const parsedCommit = {\n    hash,\n    authorName,\n    authorEmail,\n    date,\n    message,\n    filesAdded: filterFileChanges(addPattern),\n    filesDeleted: filterFileChanges(deletePattern),\n    filesModified: filterFileChanges(modifyPattern),\n    filesRenamed\n  };\n  return parsedCommit;\n};\n\nvar _default = parseCommit;\nexports.default = _default;","map":{"version":3,"sources":["../src/parse_commit.ts"],"names":["parseCommit","commit","hash","authorName","authorEmail","date","messageIndex","line","gitLogMessageMarker","fileIndex","gitLogFileMarker","message","files","addPattern","deletePattern","modifyPattern","renamePattern","filterFileChanges","pattern","match","file","accumulator","path","filesRenamed","oldPath","newPath","parsedCommit","filesAdded","filesDeleted","filesModified"],"mappings":";;;;;;;AAMA,IAAA,uBAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;;AAKA,MAAMA,WAAW,GAAIC,MAAD,IAAiC;EACnD,MAAMC,IAAI,GAAGD,MAAM,CAAnB,CAAmB,CAAnB;EACA,MAAME,UAAU,GAAGF,MAAM,CAAzB,CAAyB,CAAzB;EACA,MAAMG,WAAW,GAAGH,MAAM,CAA1B,CAA0B,CAA1B;EACA,MAAMI,IAAI,GAAGJ,MAAM,CAAnB,CAAmB,CAAnB;EAEA,MAAMK,YAAY,GAAGL,MAAM,CAANA,SAAAA,CAAkBM,IAAD,IACpCA,IAAI,CAAJA,KAAAA,CAAWC,uBAAAA,CADb,mBACED,CADmBN,CAArB;EAGA,MAAMQ,SAAS,GAAGR,MAAM,CAANA,SAAAA,CAAkBM,IAAD,IAAUA,IAAI,CAAJA,KAAAA,CAAWG,uBAAAA,CAAxD,gBAA6CH,CAA3BN,CAAlB;EACA,MAAMU,OAAO,GAAGV,MAAM,CAANA,KAAAA,CAAaK,YAAY,GAAzBL,CAAAA,EAAAA,SAAAA,EAAAA,IAAAA,CAAhB,IAAgBA,CAAhB;EACA,MAAMW,KAAK,GAAGX,MAAM,CAANA,KAAAA,CAAaQ,SAAS,GAApC,CAAcR,CAAd;EAEA,MAAMY,UAAU,GAAhB,cAAA;EACA,MAAMC,aAAa,GAAnB,cAAA;EACA,MAAMC,aAAa,GAAnB,cAAA;EACA,MAAMC,aAAa,GAAnB,sBAAA;;EAEA,MAAMC,iBAAiB,GAAIC,OAAD,IAAyC;IACjE,OAAO,KAAK,CAAL,MAAA,CAAa,CAAA,WAAA,EAAA,IAAA,KAAmD;MACrE,MAAMC,KAAK,GAAGC,IAAI,CAAJA,KAAAA,CAAd,OAAcA,CAAd;;MACA,IAAA,KAAA,EAAW;QACTC,WAAW,CAAXA,IAAAA,CAAiB;UAAEC,IAAI,EAAEH,KAAK,CAAA,CAAA;QAAb,CAAjBE;MACD;;MAED,OAAA,WAAA;IANK,CAAA,EAAP,EAAO,CAAP;EADF,CAAA;;EAWA,MAAME,YAA0B,GAAG,KAAK,CAAL,MAAA,CACjC,CAAA,WAAA,EAAA,IAAA,KAA6C;IAC3C,MAAMJ,KAAK,GAAGC,IAAI,CAAJA,KAAAA,CAAd,aAAcA,CAAd;;IACA,IAAA,KAAA,EAAW;MACTC,WAAW,CAAXA,IAAAA,CAAiB;QACfG,OAAO,EAAEL,KAAK,CADC,CACD,CADC;QAEfM,OAAO,EAAEN,KAAK,CAAA,CAAA;MAFC,CAAjBE;IAID;;IACD,OAAA,WAAA;EAT+B,CAAA,EAAnC,EAAmC,CAAnC;EAcA,MAAMK,YAAY,GAAG;IAAA,IAAA;IAAA,UAAA;IAAA,WAAA;IAAA,IAAA;IAAA,OAAA;IAMnBC,UAAU,EAAEV,iBAAiB,CANV,UAMU,CANV;IAOnBW,YAAY,EAAEX,iBAAiB,CAPZ,aAOY,CAPZ;IAQnBY,aAAa,EAAEZ,iBAAiB,CARb,aAQa,CARb;IASnBM;EATmB,CAArB;EAYA,OAAA,YAAA;AAvDF,CAAA;;eA0DevB,W","sourcesContent":["import type {\n  GitCommit,\n  FileModification,\n  FileRename,\n} from \"./types/git_commit_type\";\n\nimport {\n  gitLogMessageMarker,\n  gitLogFileMarker,\n} from \"./constants/git_log_format_markers\";\n\nconst parseCommit = (commit: string[]): GitCommit => {\n  const hash = commit[0];\n  const authorName = commit[1];\n  const authorEmail = commit[2];\n  const date = commit[3];\n\n  const messageIndex = commit.findIndex((line) =>\n    line.match(gitLogMessageMarker)\n  );\n  const fileIndex = commit.findIndex((line) => line.match(gitLogFileMarker));\n  const message = commit.slice(messageIndex + 1, fileIndex).join(\"\\n\");\n  const files = commit.slice(fileIndex + 1);\n\n  const addPattern = /^A\\s([^\\s]+)/;\n  const deletePattern = /^D\\s([^\\s]+)/;\n  const modifyPattern = /^M\\s([^\\s]+)/;\n  const renamePattern = /^R[0-9]+\\s(.+)\\s(.+)/;\n\n  const filterFileChanges = (pattern: RegExp): FileModification[] => {\n    return files.reduce((accumulator: FileModification[], file: string) => {\n      const match = file.match(pattern);\n      if (match) {\n        accumulator.push({ path: match[1] });\n      }\n\n      return accumulator;\n    }, []);\n  };\n\n  const filesRenamed: FileRename[] = files.reduce(\n    (accumulator: FileRename[], file: string) => {\n      const match = file.match(renamePattern);\n      if (match) {\n        accumulator.push({\n          oldPath: match[1],\n          newPath: match[2],\n        });\n      }\n      return accumulator;\n    },\n    []\n  );\n\n  const parsedCommit = {\n    hash,\n    authorName,\n    authorEmail,\n    date,\n    message,\n    filesAdded: filterFileChanges(addPattern),\n    filesDeleted: filterFileChanges(deletePattern),\n    filesModified: filterFileChanges(modifyPattern),\n    filesRenamed,\n  };\n\n  return parsedCommit;\n};\n\nexport default parseCommit;\n"]},"metadata":{},"sourceType":"script"}