{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst which = require('which');\n\nconst pathKey = require('path-key')();\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n  const cwd = process.cwd();\n  const hasCustomCwd = parsed.options.cwd != null; // If a custom `cwd` was specified, we need to change the process cwd\n  // because `which` will do stat calls but does not support a custom cwd\n\n  if (hasCustomCwd) {\n    try {\n      process.chdir(parsed.options.cwd);\n    } catch (err) {\n      /* Empty */\n    }\n  }\n\n  let resolved;\n\n  try {\n    resolved = which.sync(parsed.command, {\n      path: (parsed.options.env || process.env)[pathKey],\n      pathExt: withoutPathExt ? path.delimiter : undefined\n    });\n  } catch (e) {\n    /* Empty */\n  } finally {\n    process.chdir(cwd);\n  } // If we successfully resolved, ensure that an absolute path is returned\n  // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it\n\n\n  if (resolved) {\n    resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);\n  }\n\n  return resolved;\n}\n\nfunction resolveCommand(parsed) {\n  return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);\n}\n\nmodule.exports = resolveCommand;","map":{"version":3,"names":["path","require","which","pathKey","resolveCommandAttempt","parsed","withoutPathExt","cwd","process","hasCustomCwd","options","chdir","err","resolved","sync","command","env","pathExt","delimiter","undefined","e","resolve","resolveCommand","module","exports"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/cross-spawn/lib/util/resolveCommand.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\nconst which = require('which');\nconst pathKey = require('path-key')();\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n    const cwd = process.cwd();\n    const hasCustomCwd = parsed.options.cwd != null;\n\n    // If a custom `cwd` was specified, we need to change the process cwd\n    // because `which` will do stat calls but does not support a custom cwd\n    if (hasCustomCwd) {\n        try {\n            process.chdir(parsed.options.cwd);\n        } catch (err) {\n            /* Empty */\n        }\n    }\n\n    let resolved;\n\n    try {\n        resolved = which.sync(parsed.command, {\n            path: (parsed.options.env || process.env)[pathKey],\n            pathExt: withoutPathExt ? path.delimiter : undefined,\n        });\n    } catch (e) {\n        /* Empty */\n    } finally {\n        process.chdir(cwd);\n    }\n\n    // If we successfully resolved, ensure that an absolute path is returned\n    // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it\n    if (resolved) {\n        resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);\n    }\n\n    return resolved;\n}\n\nfunction resolveCommand(parsed) {\n    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);\n}\n\nmodule.exports = resolveCommand;\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAP,EAAhB;;AAEA,SAASG,qBAAT,CAA+BC,MAA/B,EAAuCC,cAAvC,EAAuD;EACnD,MAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,EAAZ;EACA,MAAME,YAAY,GAAGJ,MAAM,CAACK,OAAP,CAAeH,GAAf,IAAsB,IAA3C,CAFmD,CAInD;EACA;;EACA,IAAIE,YAAJ,EAAkB;IACd,IAAI;MACAD,OAAO,CAACG,KAAR,CAAcN,MAAM,CAACK,OAAP,CAAeH,GAA7B;IACH,CAFD,CAEE,OAAOK,GAAP,EAAY;MACV;IACH;EACJ;;EAED,IAAIC,QAAJ;;EAEA,IAAI;IACAA,QAAQ,GAAGX,KAAK,CAACY,IAAN,CAAWT,MAAM,CAACU,OAAlB,EAA2B;MAClCf,IAAI,EAAE,CAACK,MAAM,CAACK,OAAP,CAAeM,GAAf,IAAsBR,OAAO,CAACQ,GAA/B,EAAoCb,OAApC,CAD4B;MAElCc,OAAO,EAAEX,cAAc,GAAGN,IAAI,CAACkB,SAAR,GAAoBC;IAFT,CAA3B,CAAX;EAIH,CALD,CAKE,OAAOC,CAAP,EAAU;IACR;EACH,CAPD,SAOU;IACNZ,OAAO,CAACG,KAAR,CAAcJ,GAAd;EACH,CAzBkD,CA2BnD;EACA;;;EACA,IAAIM,QAAJ,EAAc;IACVA,QAAQ,GAAGb,IAAI,CAACqB,OAAL,CAAaZ,YAAY,GAAGJ,MAAM,CAACK,OAAP,CAAeH,GAAlB,GAAwB,EAAjD,EAAqDM,QAArD,CAAX;EACH;;EAED,OAAOA,QAAP;AACH;;AAED,SAASS,cAAT,CAAwBjB,MAAxB,EAAgC;EAC5B,OAAOD,qBAAqB,CAACC,MAAD,CAArB,IAAiCD,qBAAqB,CAACC,MAAD,EAAS,IAAT,CAA7D;AACH;;AAEDkB,MAAM,CAACC,OAAP,GAAiBF,cAAjB"},"metadata":{},"sourceType":"script"}