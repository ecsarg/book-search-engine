{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServiceConfig = exports.ClientConfig = exports.ApolloConfig = exports.DefaultServiceConfig = exports.DefaultClientConfig = exports.DefaultConfigBase = exports.DefaultEngineConfig = exports.DefaultEngineStatsWindow = void 0;\n\nconst path_1 = require(\"path\");\n\nconst lodash_merge_1 = __importDefault(require(\"lodash.merge\"));\n\nconst vscode_uri_1 = __importDefault(require(\"vscode-uri\"));\n\nconst utils_1 = require(\"./utils\");\n\nexports.DefaultEngineStatsWindow = {\n  to: -0,\n  from: -86400\n};\nexports.DefaultEngineConfig = {\n  endpoint: \"https://graphql.api.apollographql.com/api/graphql\"\n};\nexports.DefaultConfigBase = {\n  includes: [\"src/**/*.{ts,tsx,js,jsx,graphql,gql}\"],\n  excludes: [\"**/node_modules\", \"**/__tests__\"]\n};\nexports.DefaultClientConfig = Object.assign(Object.assign({}, exports.DefaultConfigBase), {\n  tagName: \"gql\",\n  clientOnlyDirectives: [\"connection\", \"type\"],\n  clientSchemaDirectives: [\"client\", \"rest\"],\n  addTypename: true,\n  statsWindow: exports.DefaultEngineStatsWindow\n});\nexports.DefaultServiceConfig = Object.assign(Object.assign({}, exports.DefaultConfigBase), {\n  endpoint: {\n    url: \"http://localhost:4000/graphql\"\n  }\n});\n\nclass ApolloConfig {\n  constructor(rawConfig, configURI) {\n    this.rawConfig = rawConfig;\n    this.configURI = configURI;\n    this.isService = !!rawConfig.service;\n    this.isClient = !!rawConfig.client;\n    this.engine = rawConfig.engine;\n    this._graphId = (0, utils_1.getGraphIdFromConfig)(rawConfig);\n    this.client = rawConfig.client;\n    this.service = rawConfig.service;\n  }\n\n  get configDirURI() {\n    return this.configURI && this.configURI.fsPath.match(/\\.(ts|js|json)$/i) ? vscode_uri_1.default.parse((0, path_1.dirname)(this.configURI.fsPath)) : this.configURI;\n  }\n\n  get projects() {\n    const configs = [];\n    const {\n      client,\n      service\n    } = this.rawConfig;\n\n    if (client) {\n      configs.push(new ClientConfig(this.rawConfig, this.configURI));\n    }\n\n    if (service) {\n      configs.push(new ServiceConfig(this.rawConfig, this.configURI));\n    }\n\n    return configs;\n  }\n\n  set variant(variant) {\n    this._variant = variant;\n  }\n\n  get variant() {\n    if (this._variant) return this._variant;\n    let tag = \"current\";\n\n    if (this.client && typeof this.client.service === \"string\") {\n      const parsedVariant = (0, utils_1.parseServiceSpecifier)(this.client.service)[1];\n      if (parsedVariant) tag = parsedVariant;\n    } else if (this.service && typeof this.service.name === \"string\") {\n      const parsedVariant = (0, utils_1.parseServiceSpecifier)(this.service.name)[1];\n      if (parsedVariant) tag = parsedVariant;\n    }\n\n    return tag;\n  }\n\n  set graph(graphId) {\n    this._graphId = graphId;\n  }\n\n  get graph() {\n    if (this._graphId) return this._graphId;\n    return (0, utils_1.getGraphIdFromConfig)(this.rawConfig);\n  }\n\n  setDefaults({\n    client,\n    engine,\n    service\n  }) {\n    const config = (0, lodash_merge_1.default)(this.rawConfig, {\n      client,\n      engine,\n      service\n    });\n    this.rawConfig = config;\n    this.client = config.client;\n    this.service = config.service;\n    if (engine) this.engine = config.engine;\n  }\n\n}\n\nexports.ApolloConfig = ApolloConfig;\n\nclass ClientConfig extends ApolloConfig {}\n\nexports.ClientConfig = ClientConfig;\n\nclass ServiceConfig extends ApolloConfig {}\n\nexports.ServiceConfig = ServiceConfig;","map":{"version":3,"sources":["../../src/config/config.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServiceConfig = exports.ClientConfig = exports.ApolloConfig = exports.DefaultServiceConfig = exports.DefaultClientConfig = exports.DefaultConfigBase = exports.DefaultEngineConfig = exports.DefaultEngineStatsWindow = void 0;\nconst path_1 = require(\"path\");\nconst lodash_merge_1 = __importDefault(require(\"lodash.merge\"));\nconst vscode_uri_1 = __importDefault(require(\"vscode-uri\"));\nconst utils_1 = require(\"./utils\");\nexports.DefaultEngineStatsWindow = {\n    to: -0,\n    from: -86400,\n};\nexports.DefaultEngineConfig = {\n    endpoint: \"https://graphql.api.apollographql.com/api/graphql\",\n};\nexports.DefaultConfigBase = {\n    includes: [\"src/**/*.{ts,tsx,js,jsx,graphql,gql}\"],\n    excludes: [\"**/node_modules\", \"**/__tests__\"],\n};\nexports.DefaultClientConfig = Object.assign(Object.assign({}, exports.DefaultConfigBase), { tagName: \"gql\", clientOnlyDirectives: [\"connection\", \"type\"], clientSchemaDirectives: [\"client\", \"rest\"], addTypename: true, statsWindow: exports.DefaultEngineStatsWindow });\nexports.DefaultServiceConfig = Object.assign(Object.assign({}, exports.DefaultConfigBase), { endpoint: {\n        url: \"http://localhost:4000/graphql\",\n    } });\nclass ApolloConfig {\n    constructor(rawConfig, configURI) {\n        this.rawConfig = rawConfig;\n        this.configURI = configURI;\n        this.isService = !!rawConfig.service;\n        this.isClient = !!rawConfig.client;\n        this.engine = rawConfig.engine;\n        this._graphId = (0, utils_1.getGraphIdFromConfig)(rawConfig);\n        this.client = rawConfig.client;\n        this.service = rawConfig.service;\n    }\n    get configDirURI() {\n        return this.configURI && this.configURI.fsPath.match(/\\.(ts|js|json)$/i)\n            ? vscode_uri_1.default.parse((0, path_1.dirname)(this.configURI.fsPath))\n            : this.configURI;\n    }\n    get projects() {\n        const configs = [];\n        const { client, service } = this.rawConfig;\n        if (client) {\n            configs.push(new ClientConfig(this.rawConfig, this.configURI));\n        }\n        if (service) {\n            configs.push(new ServiceConfig(this.rawConfig, this.configURI));\n        }\n        return configs;\n    }\n    set variant(variant) {\n        this._variant = variant;\n    }\n    get variant() {\n        if (this._variant)\n            return this._variant;\n        let tag = \"current\";\n        if (this.client && typeof this.client.service === \"string\") {\n            const parsedVariant = (0, utils_1.parseServiceSpecifier)(this.client.service)[1];\n            if (parsedVariant)\n                tag = parsedVariant;\n        }\n        else if (this.service && typeof this.service.name === \"string\") {\n            const parsedVariant = (0, utils_1.parseServiceSpecifier)(this.service.name)[1];\n            if (parsedVariant)\n                tag = parsedVariant;\n        }\n        return tag;\n    }\n    set graph(graphId) {\n        this._graphId = graphId;\n    }\n    get graph() {\n        if (this._graphId)\n            return this._graphId;\n        return (0, utils_1.getGraphIdFromConfig)(this.rawConfig);\n    }\n    setDefaults({ client, engine, service }) {\n        const config = (0, lodash_merge_1.default)(this.rawConfig, { client, engine, service });\n        this.rawConfig = config;\n        this.client = config.client;\n        this.service = config.service;\n        if (engine)\n            this.engine = config.engine;\n    }\n}\nexports.ApolloConfig = ApolloConfig;\nclass ClientConfig extends ApolloConfig {\n}\nexports.ClientConfig = ClientConfig;\nclass ServiceConfig extends ApolloConfig {\n}\nexports.ServiceConfig = ServiceConfig;\n//# sourceMappingURL=config.js.map"]},"metadata":{},"sourceType":"script"}