{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasClientDirective = exports.simpleCollectFields = exports.withTypenameFieldAddedWhereNeeded = exports.removeDirectiveAnnotatedFields = exports.removeDirectives = exports.getFieldDef = exports.highlightNodeForNode = exports.isDirectiveDefinitionNode = exports.isNamedNode = exports.isNode = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nfunction isNode(maybeNode) {\n  return maybeNode && typeof maybeNode.kind === \"string\";\n}\n\nexports.isNode = isNode;\n\nfunction isNamedNode(node) {\n  return \"name\" in node;\n}\n\nexports.isNamedNode = isNamedNode;\n\nfunction isDirectiveDefinitionNode(node) {\n  return node.kind === graphql_1.Kind.DIRECTIVE_DEFINITION;\n}\n\nexports.isDirectiveDefinitionNode = isDirectiveDefinitionNode;\n\nfunction highlightNodeForNode(node) {\n  switch (node.kind) {\n    case graphql_1.Kind.VARIABLE_DEFINITION:\n      return node.variable;\n\n    default:\n      return isNamedNode(node) ? node.name : node;\n  }\n}\n\nexports.highlightNodeForNode = highlightNodeForNode;\n\nfunction getFieldDef(schema, parentType, fieldAST) {\n  const name = fieldAST.name.value;\n\n  if (name === graphql_1.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return graphql_1.SchemaMetaFieldDef;\n  }\n\n  if (name === graphql_1.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return graphql_1.TypeMetaFieldDef;\n  }\n\n  if (name === graphql_1.TypeNameMetaFieldDef.name && ((0, graphql_1.isObjectType)(parentType) || (0, graphql_1.isInterfaceType)(parentType) || (0, graphql_1.isUnionType)(parentType))) {\n    return graphql_1.TypeNameMetaFieldDef;\n  }\n\n  if ((0, graphql_1.isObjectType)(parentType) || (0, graphql_1.isInterfaceType)(parentType)) {\n    return parentType.getFields()[name];\n  }\n\n  return undefined;\n}\n\nexports.getFieldDef = getFieldDef;\n\nfunction removeDirectives(ast, directiveNames) {\n  if (!directiveNames.length) return ast;\n  return (0, graphql_1.visit)(ast, {\n    Directive(node) {\n      if (!!directiveNames.find(name => name === node.name.value)) return null;\n      return node;\n    }\n\n  });\n}\n\nexports.removeDirectives = removeDirectives;\n\nfunction removeOrphanedFragmentDefinitions(ast, fragmentNamesEligibleForRemoval) {\n  let anyFragmentsRemoved = false;\n  const fragmentSpreadNodeNames = new Set();\n  (0, graphql_1.visit)(ast, {\n    FragmentSpread(node) {\n      fragmentSpreadNodeNames.add(node.name.value);\n    }\n\n  });\n  ast = (0, graphql_1.visit)(ast, {\n    FragmentDefinition(node) {\n      if (fragmentNamesEligibleForRemoval.has(node.name.value) && !fragmentSpreadNodeNames.has(node.name.value)) {\n        anyFragmentsRemoved = true;\n        return null;\n      }\n\n      return undefined;\n    }\n\n  });\n\n  if (anyFragmentsRemoved) {\n    return removeOrphanedFragmentDefinitions(ast, fragmentNamesEligibleForRemoval);\n  }\n\n  return ast;\n}\n\nfunction removeNodesWithEmptySelectionSets(ast) {\n  ast = (0, graphql_1.visit)(ast, {\n    enter(node) {\n      return \"selectionSet\" in node && node.selectionSet != null && node.selectionSet.selections.length === 0 ? null : undefined;\n    }\n\n  });\n  return ast;\n}\n\nfunction removeDirectiveAnnotatedFields(ast, directiveNames) {\n  graphql_1.print;\n  if (!directiveNames.length) return ast;\n  const removedFragmentDefinitionNames = new Set();\n  const removedFragmentSpreadNames = new Set();\n  ast = (0, graphql_1.visit)(ast, {\n    enter(node) {\n      if (\"directives\" in node && node.directives && node.directives.find(directive => directiveNames.includes(directive.name.value))) {\n        if (node.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {\n          removedFragmentDefinitionNames.add(node.name.value);\n        }\n\n        (0, graphql_1.visit)(node, {\n          FragmentSpread(node) {\n            removedFragmentSpreadNames.add(node.name.value);\n          }\n\n        });\n        return null;\n      }\n\n      return undefined;\n    }\n\n  });\n  ast = (0, graphql_1.visit)(ast, {\n    FragmentSpread(node) {\n      if (removedFragmentDefinitionNames.has(node.name.value)) {\n        removedFragmentSpreadNames.add(node.name.value);\n        return null;\n      }\n\n      return undefined;\n    }\n\n  });\n  ast = removeOrphanedFragmentDefinitions(ast, removedFragmentSpreadNames);\n  return removeNodesWithEmptySelectionSets(ast);\n}\n\nexports.removeDirectiveAnnotatedFields = removeDirectiveAnnotatedFields;\nconst typenameField = {\n  kind: graphql_1.Kind.FIELD,\n  name: {\n    kind: graphql_1.Kind.NAME,\n    value: \"__typename\"\n  }\n};\n\nfunction withTypenameFieldAddedWhereNeeded(ast) {\n  return (0, graphql_1.visit)(ast, {\n    enter: {\n      SelectionSet(node) {\n        return Object.assign(Object.assign({}, node), {\n          selections: node.selections.filter(selection => !(selection.kind === \"Field\" && selection.name.value === \"__typename\"))\n        });\n      }\n\n    },\n\n    leave(node) {\n      if (!(node.kind === graphql_1.Kind.FIELD || node.kind === graphql_1.Kind.FRAGMENT_DEFINITION || node.kind === graphql_1.Kind.INLINE_FRAGMENT)) {\n        return undefined;\n      }\n\n      if (!node.selectionSet) return undefined;\n      return Object.assign(Object.assign({}, node), {\n        selectionSet: Object.assign(Object.assign({}, node.selectionSet), {\n          selections: [typenameField, ...node.selectionSet.selections]\n        })\n      });\n    }\n\n  });\n}\n\nexports.withTypenameFieldAddedWhereNeeded = withTypenameFieldAddedWhereNeeded;\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n\nfunction simpleCollectFields(context, selectionSet, fields, visitedFragmentNames) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case graphql_1.Kind.FIELD:\n        {\n          const name = getFieldEntryKey(selection);\n\n          if (!fields[name]) {\n            fields[name] = [];\n          }\n\n          fields[name].push(selection);\n          break;\n        }\n\n      case graphql_1.Kind.INLINE_FRAGMENT:\n        {\n          simpleCollectFields(context, selection.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n\n      case graphql_1.Kind.FRAGMENT_SPREAD:\n        {\n          const fragName = selection.name.value;\n          if (visitedFragmentNames[fragName]) continue;\n          visitedFragmentNames[fragName] = true;\n          const fragment = context.fragments[fragName];\n          if (!fragment) continue;\n          simpleCollectFields(context, fragment.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n    }\n  }\n\n  return fields;\n}\n\nexports.simpleCollectFields = simpleCollectFields;\n\nfunction hasClientDirective(node) {\n  return node.directives && node.directives.some(directive => directive.name.value === \"client\");\n}\n\nexports.hasClientDirective = hasClientDirective;","map":{"version":3,"sources":["../../src/utilities/graphql.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hasClientDirective = exports.simpleCollectFields = exports.withTypenameFieldAddedWhereNeeded = exports.removeDirectiveAnnotatedFields = exports.removeDirectives = exports.getFieldDef = exports.highlightNodeForNode = exports.isDirectiveDefinitionNode = exports.isNamedNode = exports.isNode = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction isNode(maybeNode) {\n    return maybeNode && typeof maybeNode.kind === \"string\";\n}\nexports.isNode = isNode;\nfunction isNamedNode(node) {\n    return \"name\" in node;\n}\nexports.isNamedNode = isNamedNode;\nfunction isDirectiveDefinitionNode(node) {\n    return node.kind === graphql_1.Kind.DIRECTIVE_DEFINITION;\n}\nexports.isDirectiveDefinitionNode = isDirectiveDefinitionNode;\nfunction highlightNodeForNode(node) {\n    switch (node.kind) {\n        case graphql_1.Kind.VARIABLE_DEFINITION:\n            return node.variable;\n        default:\n            return isNamedNode(node) ? node.name : node;\n    }\n}\nexports.highlightNodeForNode = highlightNodeForNode;\nfunction getFieldDef(schema, parentType, fieldAST) {\n    const name = fieldAST.name.value;\n    if (name === graphql_1.SchemaMetaFieldDef.name &&\n        schema.getQueryType() === parentType) {\n        return graphql_1.SchemaMetaFieldDef;\n    }\n    if (name === graphql_1.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n        return graphql_1.TypeMetaFieldDef;\n    }\n    if (name === graphql_1.TypeNameMetaFieldDef.name &&\n        ((0, graphql_1.isObjectType)(parentType) ||\n            (0, graphql_1.isInterfaceType)(parentType) ||\n            (0, graphql_1.isUnionType)(parentType))) {\n        return graphql_1.TypeNameMetaFieldDef;\n    }\n    if ((0, graphql_1.isObjectType)(parentType) || (0, graphql_1.isInterfaceType)(parentType)) {\n        return parentType.getFields()[name];\n    }\n    return undefined;\n}\nexports.getFieldDef = getFieldDef;\nfunction removeDirectives(ast, directiveNames) {\n    if (!directiveNames.length)\n        return ast;\n    return (0, graphql_1.visit)(ast, {\n        Directive(node) {\n            if (!!directiveNames.find((name) => name === node.name.value))\n                return null;\n            return node;\n        },\n    });\n}\nexports.removeDirectives = removeDirectives;\nfunction removeOrphanedFragmentDefinitions(ast, fragmentNamesEligibleForRemoval) {\n    let anyFragmentsRemoved = false;\n    const fragmentSpreadNodeNames = new Set();\n    (0, graphql_1.visit)(ast, {\n        FragmentSpread(node) {\n            fragmentSpreadNodeNames.add(node.name.value);\n        },\n    });\n    ast = (0, graphql_1.visit)(ast, {\n        FragmentDefinition(node) {\n            if (fragmentNamesEligibleForRemoval.has(node.name.value) &&\n                !fragmentSpreadNodeNames.has(node.name.value)) {\n                anyFragmentsRemoved = true;\n                return null;\n            }\n            return undefined;\n        },\n    });\n    if (anyFragmentsRemoved) {\n        return removeOrphanedFragmentDefinitions(ast, fragmentNamesEligibleForRemoval);\n    }\n    return ast;\n}\nfunction removeNodesWithEmptySelectionSets(ast) {\n    ast = (0, graphql_1.visit)(ast, {\n        enter(node) {\n            return \"selectionSet\" in node &&\n                node.selectionSet != null &&\n                node.selectionSet.selections.length === 0\n                ? null\n                : undefined;\n        },\n    });\n    return ast;\n}\nfunction removeDirectiveAnnotatedFields(ast, directiveNames) {\n    graphql_1.print;\n    if (!directiveNames.length)\n        return ast;\n    const removedFragmentDefinitionNames = new Set();\n    const removedFragmentSpreadNames = new Set();\n    ast = (0, graphql_1.visit)(ast, {\n        enter(node) {\n            if (\"directives\" in node &&\n                node.directives &&\n                node.directives.find((directive) => directiveNames.includes(directive.name.value))) {\n                if (node.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {\n                    removedFragmentDefinitionNames.add(node.name.value);\n                }\n                (0, graphql_1.visit)(node, {\n                    FragmentSpread(node) {\n                        removedFragmentSpreadNames.add(node.name.value);\n                    },\n                });\n                return null;\n            }\n            return undefined;\n        },\n    });\n    ast = (0, graphql_1.visit)(ast, {\n        FragmentSpread(node) {\n            if (removedFragmentDefinitionNames.has(node.name.value)) {\n                removedFragmentSpreadNames.add(node.name.value);\n                return null;\n            }\n            return undefined;\n        },\n    });\n    ast = removeOrphanedFragmentDefinitions(ast, removedFragmentSpreadNames);\n    return removeNodesWithEmptySelectionSets(ast);\n}\nexports.removeDirectiveAnnotatedFields = removeDirectiveAnnotatedFields;\nconst typenameField = {\n    kind: graphql_1.Kind.FIELD,\n    name: { kind: graphql_1.Kind.NAME, value: \"__typename\" },\n};\nfunction withTypenameFieldAddedWhereNeeded(ast) {\n    return (0, graphql_1.visit)(ast, {\n        enter: {\n            SelectionSet(node) {\n                return Object.assign(Object.assign({}, node), { selections: node.selections.filter((selection) => !(selection.kind === \"Field\" &&\n                        selection.name.value === \"__typename\")) });\n            },\n        },\n        leave(node) {\n            if (!(node.kind === graphql_1.Kind.FIELD ||\n                node.kind === graphql_1.Kind.FRAGMENT_DEFINITION ||\n                node.kind === graphql_1.Kind.INLINE_FRAGMENT)) {\n                return undefined;\n            }\n            if (!node.selectionSet)\n                return undefined;\n            return Object.assign(Object.assign({}, node), { selectionSet: Object.assign(Object.assign({}, node.selectionSet), { selections: [typenameField, ...node.selectionSet.selections] }) });\n        },\n    });\n}\nexports.withTypenameFieldAddedWhereNeeded = withTypenameFieldAddedWhereNeeded;\nfunction getFieldEntryKey(node) {\n    return node.alias ? node.alias.value : node.name.value;\n}\nfunction simpleCollectFields(context, selectionSet, fields, visitedFragmentNames) {\n    for (const selection of selectionSet.selections) {\n        switch (selection.kind) {\n            case graphql_1.Kind.FIELD: {\n                const name = getFieldEntryKey(selection);\n                if (!fields[name]) {\n                    fields[name] = [];\n                }\n                fields[name].push(selection);\n                break;\n            }\n            case graphql_1.Kind.INLINE_FRAGMENT: {\n                simpleCollectFields(context, selection.selectionSet, fields, visitedFragmentNames);\n                break;\n            }\n            case graphql_1.Kind.FRAGMENT_SPREAD: {\n                const fragName = selection.name.value;\n                if (visitedFragmentNames[fragName])\n                    continue;\n                visitedFragmentNames[fragName] = true;\n                const fragment = context.fragments[fragName];\n                if (!fragment)\n                    continue;\n                simpleCollectFields(context, fragment.selectionSet, fields, visitedFragmentNames);\n                break;\n            }\n        }\n    }\n    return fields;\n}\nexports.simpleCollectFields = simpleCollectFields;\nfunction hasClientDirective(node) {\n    return (node.directives &&\n        node.directives.some((directive) => directive.name.value === \"client\"));\n}\nexports.hasClientDirective = hasClientDirective;\n//# sourceMappingURL=graphql.js.map"]},"metadata":{},"sourceType":"script"}