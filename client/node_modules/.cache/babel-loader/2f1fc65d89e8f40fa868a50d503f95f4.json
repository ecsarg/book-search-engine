{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClientCommand = exports.ProjectCommand = void 0;\n\nconst command_1 = __importStar(require(\"@oclif/command\"));\n\nconst listr_1 = __importDefault(require(\"listr\"));\n\nconst path_1 = require(\"path\");\n\nconst apollo_language_server_1 = require(\"apollo-language-server\");\n\nconst OclifLoadingHandler_1 = require(\"./OclifLoadingHandler\");\n\nconst vscode_uri_1 = __importDefault(require(\"vscode-uri\"));\n\nconst chalk_1 = __importDefault(require(\"chalk\"));\n\nconst global_agent_1 = require(\"global-agent\");\n\n(0, global_agent_1.bootstrap)({\n  environmentVariableNamespace: \"\"\n});\n\nconst {\n  version,\n  referenceID\n} = require(\"../package.json\");\n\nconst headersArrayToObject = arr => {\n  if (!arr) return;\n  return arr.map(val => JSON.parse(val)).reduce((pre, next) => Object.assign(Object.assign({}, pre), next), {});\n};\n\nclass ProjectCommand extends command_1.default {\n  constructor() {\n    super(...arguments);\n    this.tasks = [];\n    this.type = \"service\";\n  }\n\n  async init() {\n    const {\n      flags,\n      args\n    } = this.parse(this.constructor);\n    this.ctx = {\n      flags,\n      args\n    };\n    apollo_language_server_1.Debug.SetLoggers({\n      info: this.log,\n      warning: this.warn,\n      error: console.error\n    });\n    const config = await this.createConfig(flags);\n    if (!config) return;\n    this.createService(config, flags);\n    this.ctx.config = config;\n    this.tasks.push({\n      title: \"Loading Apollo Project\",\n      task: async ctx => {\n        await this.project.whenReady;\n        ctx = Object.assign(Object.assign({}, ctx), this.ctx);\n      }\n    });\n  }\n\n  async createConfig(flags) {\n    const service = flags.key ? (0, apollo_language_server_1.getServiceFromKey)(flags.key) : undefined;\n    const config = await (0, apollo_language_server_1.loadConfig)({\n      configPath: flags.config && (0, path_1.parse)((0, path_1.resolve)(flags.config)).dir,\n      configFileName: flags.config,\n      name: service,\n      type: this.type\n    });\n\n    if (!config) {\n      this.error(\"A config failed to load, so the command couldn't be run\");\n      this.exit(1);\n      return;\n    }\n\n    config.variant = flags.variant || flags.tag || config.variant;\n    config.graph = flags.graph || (0, apollo_language_server_1.getGraphIdFromConfig)(config.rawConfig);\n\n    if (flags.tag) {\n      console.warn(chalk_1.default.yellow(\"Using the --tag flag is deprecated. Please use --variant (or -v) instead.\"));\n    }\n\n    config.setDefaults({\n      engine: {\n        apiKey: flags.key,\n        endpoint: flags.engine\n      }\n    });\n\n    if (flags.endpoint) {\n      config.setDefaults({\n        service: {\n          endpoint: Object.assign({\n            url: flags.endpoint,\n            headers: headersArrayToObject(flags.header)\n          }, flags.skipSSLValidation && {\n            skipSSLValidation: true\n          })\n        }\n      });\n    }\n\n    if (flags.localSchemaFile) {\n      const files = flags.localSchemaFile.split(\",\");\n\n      if ((0, apollo_language_server_1.isClientConfig)(config)) {\n        config.setDefaults({\n          client: {\n            service: {\n              localSchemaFile: files\n            }\n          }\n        });\n      } else if ((0, apollo_language_server_1.isServiceConfig)(config)) {\n        config.setDefaults({\n          service: {\n            localSchemaFile: files\n          }\n        });\n      }\n    }\n\n    if (this.configMap) {\n      const defaults = this.configMap(flags);\n      config.setDefaults(defaults);\n    }\n\n    const [tokenType, identifier] = config.engine.apiKey && config.engine.apiKey.split(\":\") || [];\n\n    if (tokenType == \"service\" && identifier !== config.graph) {\n      throw new Error(`Cannot specify a service token that does not match graph. Graph ${config.graph} does not match graph from token (${identifier})`);\n    }\n\n    return config;\n  }\n\n  createService(config, flags) {\n    const loadingHandler = new OclifLoadingHandler_1.OclifLoadingHandler(this);\n    const configPath = config.configURI.fsPath;\n    const rootURI = configPath === process.cwd() ? vscode_uri_1.default.file(configPath) : vscode_uri_1.default.file((0, path_1.parse)(configPath).dir);\n    const clientIdentity = {\n      name: \"Apollo CLI\",\n      version,\n      referenceID\n    };\n\n    if ((0, apollo_language_server_1.isServiceConfig)(config)) {\n      this.project = new apollo_language_server_1.GraphQLServiceProject({\n        config,\n        loadingHandler,\n        rootURI,\n        clientIdentity\n      });\n    } else if ((0, apollo_language_server_1.isClientConfig)(config)) {\n      this.project = new apollo_language_server_1.GraphQLClientProject({\n        config,\n        loadingHandler,\n        rootURI,\n        clientIdentity\n      });\n    } else {\n      throw new Error(\"Unable to resolve project type. Please add either a client or service config. For more information, please refer to https://go.apollo.dev/t/config\");\n    }\n\n    this.ctx.project = this.project;\n  }\n\n  async runTasks(generateTasks, options) {\n    const {\n      ctx\n    } = this;\n\n    if (!ctx) {\n      throw new Error(\"init must be called before trying to access this.ctx\");\n    }\n\n    const tasks = await generateTasks(ctx);\n    return new listr_1.default([...this.tasks, ...tasks], Object.assign(Object.assign(Object.assign({}, process.env.NODE_ENV === \"test\" && {\n      renderer: \"verbose\"\n    }), options && typeof options === \"function\" ? options(ctx) : options), {\n      dateFormat: false\n    })).run();\n  }\n\n  async catch(err) {\n    this.error(err);\n  }\n\n  async finally(err) {}\n\n  printDeprecationWarning() {\n    console.error(ProjectCommand.DEPRECATION_MSG);\n  }\n\n}\n\nexports.ProjectCommand = ProjectCommand;\nProjectCommand.flags = {\n  config: command_1.flags.string({\n    char: \"c\",\n    description: \"Path to your Apollo config file\"\n  }),\n  header: command_1.flags.string({\n    multiple: true,\n    parse: header => {\n      const separatorIndex = header.indexOf(\":\");\n      const key = header.substring(0, separatorIndex).trim();\n      const value = header.substring(separatorIndex + 1).trim();\n      return JSON.stringify({\n        [key]: value\n      });\n    },\n    description: \"Additional header to send during introspection. May be used multiple times to add multiple headers. NOTE: The `--endpoint` flag is REQUIRED if using the `--header` flag.\"\n  }),\n  endpoint: command_1.flags.string({\n    description: \"The URL for the CLI use to introspect your service\"\n  }),\n  key: command_1.flags.string({\n    description: \"The API key to use for authentication to Apollo\",\n    default: () => process.env.APOLLO_KEY || process.env.ENGINE_API_KEY\n  }),\n  engine: command_1.flags.string({\n    description: \"URL for a custom Apollo deployment\",\n    hidden: true\n  })\n};\nProjectCommand.DEPRECATION_MSG = \"\\n-----------------------------------------------------------------\\n\" + \"DEPRECATED: This command will be removed from the `apollo` CLI in \\n\" + \"its next major version. Replacement functionality is available in \\n\" + \"the new Apollo Rover CLI: https://go.apollo.dev/t/migration\\n\" + \"-----------------------------------------------------------------\\n\";\n\nclass ClientCommand extends ProjectCommand {\n  constructor(argv, config) {\n    super(argv, config);\n    this.type = \"client\";\n\n    this.configMap = flags => {\n      const config = {\n        client: {\n          name: flags.clientName,\n          referenceID: flags.clientReferenceId,\n          version: flags.clientVersion\n        }\n      };\n\n      if (flags.endpoint) {\n        config.client.service = {\n          url: flags.endpoint,\n          headers: headersArrayToObject(flags.header)\n        };\n      }\n\n      if (flags.includes || flags.queries) {\n        config.client.includes = [flags.includes || flags.queries];\n      }\n\n      if (flags.excludes) {\n        config.client.excludes = [flags.excludes];\n      }\n\n      if (flags.tagName) {\n        config.client.tagName = flags.tagName;\n      }\n\n      return config;\n    };\n  }\n\n}\n\nexports.ClientCommand = ClientCommand;\nClientCommand.flags = Object.assign(Object.assign({}, ProjectCommand.flags), {\n  clientReferenceId: command_1.flags.string({\n    description: \"Reference id for the client which will match ids from client traces, will use clientName if not provided\"\n  }),\n  clientName: command_1.flags.string({\n    description: \"Name of the client that the queries will be attached to\"\n  }),\n  clientVersion: command_1.flags.string({\n    description: \"The version of the client that the queries will be attached to\"\n  }),\n  tag: command_1.flags.string({\n    char: \"t\",\n    description: \"[Deprecated: please use --variant instead] The tag (AKA variant) of the graph in Apollo to associate this client to\",\n    hidden: true,\n    exclusive: [\"variant\"]\n  }),\n  variant: command_1.flags.string({\n    char: \"v\",\n    description: \"The variant of the graph in Apollo to associate this client to\",\n    exclusive: [\"tag\"]\n  }),\n  graph: command_1.flags.string({\n    char: \"g\",\n    description: \"The ID for the graph in Apollo to operate client commands with. Overrides config file if set.\"\n  }),\n  queries: command_1.flags.string({\n    description: \"Deprecated in favor of the includes flag\"\n  }),\n  includes: command_1.flags.string({\n    description: \"Glob of files to search for GraphQL operations. This should be used to find queries *and* any client schema extensions\"\n  }),\n  excludes: command_1.flags.string({\n    description: \"Glob of files to exclude for GraphQL operations. Caveat: this doesn't currently work in watch mode\"\n  }),\n  tagName: command_1.flags.string({\n    description: \"Name of the template literal tag used to identify template literals containing GraphQL queries in Javascript/Typescript code\"\n  })\n});","map":{"version":3,"sources":["../src/Command.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientCommand = exports.ProjectCommand = void 0;\nconst command_1 = __importStar(require(\"@oclif/command\"));\nconst listr_1 = __importDefault(require(\"listr\"));\nconst path_1 = require(\"path\");\nconst apollo_language_server_1 = require(\"apollo-language-server\");\nconst OclifLoadingHandler_1 = require(\"./OclifLoadingHandler\");\nconst vscode_uri_1 = __importDefault(require(\"vscode-uri\"));\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst global_agent_1 = require(\"global-agent\");\n(0, global_agent_1.bootstrap)({ environmentVariableNamespace: \"\" });\nconst { version, referenceID } = require(\"../package.json\");\nconst headersArrayToObject = (arr) => {\n    if (!arr)\n        return;\n    return arr\n        .map((val) => JSON.parse(val))\n        .reduce((pre, next) => (Object.assign(Object.assign({}, pre), next)), {});\n};\nclass ProjectCommand extends command_1.default {\n    constructor() {\n        super(...arguments);\n        this.tasks = [];\n        this.type = \"service\";\n    }\n    async init() {\n        const { flags, args } = this.parse(this.constructor);\n        this.ctx = { flags, args };\n        apollo_language_server_1.Debug.SetLoggers({\n            info: this.log,\n            warning: this.warn,\n            error: console.error,\n        });\n        const config = await this.createConfig(flags);\n        if (!config)\n            return;\n        this.createService(config, flags);\n        this.ctx.config = config;\n        this.tasks.push({\n            title: \"Loading Apollo Project\",\n            task: async (ctx) => {\n                await this.project.whenReady;\n                ctx = Object.assign(Object.assign({}, ctx), this.ctx);\n            },\n        });\n    }\n    async createConfig(flags) {\n        const service = flags.key ? (0, apollo_language_server_1.getServiceFromKey)(flags.key) : undefined;\n        const config = await (0, apollo_language_server_1.loadConfig)({\n            configPath: flags.config && (0, path_1.parse)((0, path_1.resolve)(flags.config)).dir,\n            configFileName: flags.config,\n            name: service,\n            type: this.type,\n        });\n        if (!config) {\n            this.error(\"A config failed to load, so the command couldn't be run\");\n            this.exit(1);\n            return;\n        }\n        config.variant = flags.variant || flags.tag || config.variant;\n        config.graph = flags.graph || (0, apollo_language_server_1.getGraphIdFromConfig)(config.rawConfig);\n        if (flags.tag) {\n            console.warn(chalk_1.default.yellow(\"Using the --tag flag is deprecated. Please use --variant (or -v) instead.\"));\n        }\n        config.setDefaults({\n            engine: {\n                apiKey: flags.key,\n                endpoint: flags.engine,\n            },\n        });\n        if (flags.endpoint) {\n            config.setDefaults({\n                service: {\n                    endpoint: Object.assign({ url: flags.endpoint, headers: headersArrayToObject(flags.header) }, (flags.skipSSLValidation && { skipSSLValidation: true })),\n                },\n            });\n        }\n        if (flags.localSchemaFile) {\n            const files = flags.localSchemaFile.split(\",\");\n            if ((0, apollo_language_server_1.isClientConfig)(config)) {\n                config.setDefaults({\n                    client: {\n                        service: {\n                            localSchemaFile: files,\n                        },\n                    },\n                });\n            }\n            else if ((0, apollo_language_server_1.isServiceConfig)(config)) {\n                config.setDefaults({\n                    service: {\n                        localSchemaFile: files,\n                    },\n                });\n            }\n        }\n        if (this.configMap) {\n            const defaults = this.configMap(flags);\n            config.setDefaults(defaults);\n        }\n        const [tokenType, identifier] = (config.engine.apiKey && config.engine.apiKey.split(\":\")) || [];\n        if (tokenType == \"service\" && identifier !== config.graph) {\n            throw new Error(`Cannot specify a service token that does not match graph. Graph ${config.graph} does not match graph from token (${identifier})`);\n        }\n        return config;\n    }\n    createService(config, flags) {\n        const loadingHandler = new OclifLoadingHandler_1.OclifLoadingHandler(this);\n        const configPath = config.configURI.fsPath;\n        const rootURI = configPath === process.cwd()\n            ? vscode_uri_1.default.file(configPath)\n            : vscode_uri_1.default.file((0, path_1.parse)(configPath).dir);\n        const clientIdentity = {\n            name: \"Apollo CLI\",\n            version,\n            referenceID,\n        };\n        if ((0, apollo_language_server_1.isServiceConfig)(config)) {\n            this.project = new apollo_language_server_1.GraphQLServiceProject({\n                config,\n                loadingHandler,\n                rootURI,\n                clientIdentity,\n            });\n        }\n        else if ((0, apollo_language_server_1.isClientConfig)(config)) {\n            this.project = new apollo_language_server_1.GraphQLClientProject({\n                config,\n                loadingHandler,\n                rootURI,\n                clientIdentity,\n            });\n        }\n        else {\n            throw new Error(\"Unable to resolve project type. Please add either a client or service config. For more information, please refer to https://go.apollo.dev/t/config\");\n        }\n        this.ctx.project = this.project;\n    }\n    async runTasks(generateTasks, options) {\n        const { ctx } = this;\n        if (!ctx) {\n            throw new Error(\"init must be called before trying to access this.ctx\");\n        }\n        const tasks = await generateTasks(ctx);\n        return new listr_1.default([...this.tasks, ...tasks], Object.assign(Object.assign(Object.assign({}, (process.env.NODE_ENV === \"test\" && { renderer: \"verbose\" })), (options && typeof options === \"function\" ? options(ctx) : options)), { dateFormat: false })).run();\n    }\n    async catch(err) {\n        this.error(err);\n    }\n    async finally(err) {\n    }\n    printDeprecationWarning() {\n        console.error(ProjectCommand.DEPRECATION_MSG);\n    }\n}\nexports.ProjectCommand = ProjectCommand;\nProjectCommand.flags = {\n    config: command_1.flags.string({\n        char: \"c\",\n        description: \"Path to your Apollo config file\",\n    }),\n    header: command_1.flags.string({\n        multiple: true,\n        parse: (header) => {\n            const separatorIndex = header.indexOf(\":\");\n            const key = header.substring(0, separatorIndex).trim();\n            const value = header.substring(separatorIndex + 1).trim();\n            return JSON.stringify({ [key]: value });\n        },\n        description: \"Additional header to send during introspection. May be used multiple times to add multiple headers. NOTE: The `--endpoint` flag is REQUIRED if using the `--header` flag.\",\n    }),\n    endpoint: command_1.flags.string({\n        description: \"The URL for the CLI use to introspect your service\",\n    }),\n    key: command_1.flags.string({\n        description: \"The API key to use for authentication to Apollo\",\n        default: () => process.env.APOLLO_KEY || process.env.ENGINE_API_KEY,\n    }),\n    engine: command_1.flags.string({\n        description: \"URL for a custom Apollo deployment\",\n        hidden: true,\n    }),\n};\nProjectCommand.DEPRECATION_MSG = \"\\n-----------------------------------------------------------------\\n\" +\n    \"DEPRECATED: This command will be removed from the `apollo` CLI in \\n\" +\n    \"its next major version. Replacement functionality is available in \\n\" +\n    \"the new Apollo Rover CLI: https://go.apollo.dev/t/migration\\n\" +\n    \"-----------------------------------------------------------------\\n\";\nclass ClientCommand extends ProjectCommand {\n    constructor(argv, config) {\n        super(argv, config);\n        this.type = \"client\";\n        this.configMap = (flags) => {\n            const config = {\n                client: {\n                    name: flags.clientName,\n                    referenceID: flags.clientReferenceId,\n                    version: flags.clientVersion,\n                },\n            };\n            if (flags.endpoint) {\n                config.client.service = {\n                    url: flags.endpoint,\n                    headers: headersArrayToObject(flags.header),\n                };\n            }\n            if (flags.includes || flags.queries) {\n                config.client.includes = [flags.includes || flags.queries];\n            }\n            if (flags.excludes) {\n                config.client.excludes = [flags.excludes];\n            }\n            if (flags.tagName) {\n                config.client.tagName = flags.tagName;\n            }\n            return config;\n        };\n    }\n}\nexports.ClientCommand = ClientCommand;\nClientCommand.flags = Object.assign(Object.assign({}, ProjectCommand.flags), { clientReferenceId: command_1.flags.string({\n        description: \"Reference id for the client which will match ids from client traces, will use clientName if not provided\",\n    }), clientName: command_1.flags.string({\n        description: \"Name of the client that the queries will be attached to\",\n    }), clientVersion: command_1.flags.string({\n        description: \"The version of the client that the queries will be attached to\",\n    }), tag: command_1.flags.string({\n        char: \"t\",\n        description: \"[Deprecated: please use --variant instead] The tag (AKA variant) of the graph in Apollo to associate this client to\",\n        hidden: true,\n        exclusive: [\"variant\"],\n    }), variant: command_1.flags.string({\n        char: \"v\",\n        description: \"The variant of the graph in Apollo to associate this client to\",\n        exclusive: [\"tag\"],\n    }), graph: command_1.flags.string({\n        char: \"g\",\n        description: \"The ID for the graph in Apollo to operate client commands with. Overrides config file if set.\",\n    }), queries: command_1.flags.string({\n        description: \"Deprecated in favor of the includes flag\",\n    }), includes: command_1.flags.string({\n        description: \"Glob of files to search for GraphQL operations. This should be used to find queries *and* any client schema extensions\",\n    }), excludes: command_1.flags.string({\n        description: \"Glob of files to exclude for GraphQL operations. Caveat: this doesn't currently work in watch mode\",\n    }), tagName: command_1.flags.string({\n        description: \"Name of the template literal tag used to identify template literals containing GraphQL queries in Javascript/Typescript code\",\n    }) });\n//# sourceMappingURL=Command.js.map"]},"metadata":{},"sourceType":"script"}