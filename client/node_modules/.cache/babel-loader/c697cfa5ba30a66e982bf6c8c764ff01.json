{"ast":null,"code":"const _readline = require('readline'); // low-level terminal interactions\n\n\nclass Terminal {\n  constructor(outputStream) {\n    this.stream = outputStream; // default: line wrapping enabled\n\n    this.linewrap = true; // current, relative y position\n\n    this.dy = 0;\n  } // save cursor position + settings\n\n\n  cursorSave() {\n    if (!this.stream.isTTY) {\n      return;\n    } // save position\n\n\n    this.stream.write('\\x1B7');\n  } // restore last cursor position + settings\n\n\n  cursorRestore() {\n    if (!this.stream.isTTY) {\n      return;\n    } // restore cursor\n\n\n    this.stream.write('\\x1B8');\n  } // show/hide cursor\n\n\n  cursor(enabled) {\n    if (!this.stream.isTTY) {\n      return;\n    }\n\n    if (enabled) {\n      this.stream.write('\\x1B[?25h');\n    } else {\n      this.stream.write('\\x1B[?25l');\n    }\n  } // change cursor positionn\n\n\n  cursorTo(x = null, y = null) {\n    if (!this.stream.isTTY) {\n      return;\n    } // move cursor absolute\n\n\n    _readline.cursorTo(this.stream, x, y);\n  } // change relative cursor position\n\n\n  cursorRelative(dx = null, dy = null) {\n    if (!this.stream.isTTY) {\n      return;\n    } // store current position\n\n\n    this.dy = this.dy + dy; // move cursor relative\n\n    _readline.moveCursor(this.stream, dx, dy);\n  } // relative reset\n\n\n  cursorRelativeReset() {\n    if (!this.stream.isTTY) {\n      return;\n    } // move cursor to initial line\n\n\n    _readline.moveCursor(this.stream, 0, -this.dy); // first char\n\n\n    _readline.cursorTo(this.stream, 0, null); // reset counter\n\n\n    this.dy = 0;\n  } // clear to the right from cursor\n\n\n  clearRight() {\n    if (!this.stream.isTTY) {\n      return;\n    }\n\n    _readline.clearLine(this.stream, 1);\n  } // clear the full line\n\n\n  clearLine() {\n    if (!this.stream.isTTY) {\n      return;\n    }\n\n    _readline.clearLine(this.stream, 0);\n  } // clear everyting beyond the current line\n\n\n  clearBottom() {\n    if (!this.stream.isTTY) {\n      return;\n    }\n\n    _readline.clearScreenDown(this.stream);\n  } // add new line; increment counter\n\n\n  newline() {\n    this.stream.write('\\n');\n    this.dy++;\n  } // write content to output stream\n  // @TODO use string-width to strip length\n\n\n  write(s, rawWrite = false) {\n    // line wrapping enabled ? trim output\n    if (this.linewrap === true && rawWrite === false) {\n      this.stream.write(s.substr(0, this.getWidth()));\n    } else {\n      this.stream.write(s);\n    }\n  } // control line wrapping\n\n\n  lineWrapping(enabled) {\n    if (!this.stream.isTTY) {\n      return;\n    } // store state\n\n\n    this.linewrap = enabled;\n\n    if (enabled) {\n      this.stream.write('\\x1B[?7h');\n    } else {\n      this.stream.write('\\x1B[?7l');\n    }\n  } // tty environment ?\n\n\n  isTTY() {\n    return this.stream.isTTY === true;\n  } // get terminal width\n\n\n  getWidth() {\n    // set max width to 80 in tty-mode and 200 in notty-mode\n    return this.stream.columns || (this.stream.isTTY ? 80 : 200);\n  }\n\n}\n\nmodule.exports = Terminal;","map":{"version":3,"names":["_readline","require","Terminal","constructor","outputStream","stream","linewrap","dy","cursorSave","isTTY","write","cursorRestore","cursor","enabled","cursorTo","x","y","cursorRelative","dx","moveCursor","cursorRelativeReset","clearRight","clearLine","clearBottom","clearScreenDown","newline","s","rawWrite","substr","getWidth","lineWrapping","columns","module","exports"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/cli-progress/lib/terminal.js"],"sourcesContent":["const _readline = require('readline');\n\n// low-level terminal interactions\nclass Terminal{\n\n    constructor(outputStream){\n        this.stream = outputStream;\n\n        // default: line wrapping enabled\n        this.linewrap = true;\n\n        // current, relative y position\n        this.dy = 0;\n    }\n\n    // save cursor position + settings\n    cursorSave(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // save position\n        this.stream.write('\\x1B7');\n    }\n\n    // restore last cursor position + settings\n    cursorRestore(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // restore cursor\n        this.stream.write('\\x1B8');\n    }\n\n    // show/hide cursor\n    cursor(enabled){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        if (enabled){\n            this.stream.write('\\x1B[?25h');\n        }else{\n            this.stream.write('\\x1B[?25l');\n        }\n    }\n\n    // change cursor positionn\n    cursorTo(x=null, y=null){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // move cursor absolute\n        _readline.cursorTo(this.stream, x, y);\n    }\n\n    // change relative cursor position\n    cursorRelative(dx=null, dy=null){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // store current position\n        this.dy = this.dy + dy;\n        \n        // move cursor relative\n        _readline.moveCursor(this.stream, dx, dy);\n    }\n\n    // relative reset\n    cursorRelativeReset(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // move cursor to initial line\n        _readline.moveCursor(this.stream, 0, -this.dy);\n\n        // first char\n        _readline.cursorTo(this.stream, 0, null);\n\n        // reset counter\n        this.dy = 0;\n    }\n\n    // clear to the right from cursor\n    clearRight(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        _readline.clearLine(this.stream, 1);\n    }\n\n    // clear the full line\n    clearLine(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        _readline.clearLine(this.stream, 0);\n    }\n\n    // clear everyting beyond the current line\n    clearBottom(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        _readline.clearScreenDown(this.stream);\n    }\n\n    // add new line; increment counter\n    newline(){\n        this.stream.write('\\n');\n        this.dy++;\n    }\n\n    // write content to output stream\n    // @TODO use string-width to strip length\n    write(s, rawWrite=false){\n        // line wrapping enabled ? trim output\n        if (this.linewrap === true && rawWrite === false){\n            this.stream.write(s.substr(0, this.getWidth()));\n        }else{\n            this.stream.write(s);\n        }\n    }\n\n    // control line wrapping\n    lineWrapping(enabled){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // store state\n        this.linewrap = enabled;\n        if (enabled){\n            this.stream.write('\\x1B[?7h');\n        }else{\n            this.stream.write('\\x1B[?7l');\n        }\n    }\n\n    // tty environment ?\n    isTTY(){\n        return (this.stream.isTTY === true);\n    }\n\n    // get terminal width\n    getWidth(){\n        // set max width to 80 in tty-mode and 200 in notty-mode\n        return this.stream.columns || (this.stream.isTTY ? 80 : 200);\n    }\n}\n\nmodule.exports = Terminal;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}