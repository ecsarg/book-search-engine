{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLDataSource = void 0;\n\nconst apollo_link_1 = require(\"apollo-link\");\n\nconst apollo_link_context_1 = require(\"apollo-link-context\");\n\nconst apollo_link_error_1 = require(\"apollo-link-error\");\n\nconst apollo_link_http_1 = require(\"apollo-link-http\");\n\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\n\nconst await_to_js_1 = __importDefault(require(\"await-to-js\"));\n\nconst apollo_env_1 = require(\"apollo-env\");\n\nclass GraphQLDataSource {\n  initialize(config) {\n    this.context = config.context;\n  }\n\n  async execute(operation) {\n    return this.executeSingleOperation(operation);\n  }\n\n  composeLinks() {\n    const uri = this.resolveUri();\n    return apollo_link_1.ApolloLink.from([this.onErrorLink(), this.onRequestLink(), (0, apollo_link_http_1.createHttpLink)({\n      fetch: apollo_env_1.fetch,\n      uri\n    })]);\n  }\n\n  didEncounterError(error) {\n    const status = error.statusCode ? error.statusCode : null;\n    const message = error.bodyText ? error.bodyText : error.message ? error.message : null;\n    let apolloError;\n\n    switch (status) {\n      case 401:\n        apolloError = new apollo_server_errors_1.AuthenticationError(message);\n        break;\n\n      case 403:\n        apolloError = new apollo_server_errors_1.ForbiddenError(message);\n        break;\n\n      default:\n        apolloError = new apollo_server_errors_1.ApolloError(message);\n    }\n\n    throw apolloError;\n  }\n\n  async executeSingleOperation(operation) {\n    const link = this.composeLinks();\n    const [error, response] = await (0, await_to_js_1.default)((0, apollo_link_1.makePromise)((0, apollo_link_1.execute)(link, operation)));\n\n    if (error) {\n      this.didEncounterError(error);\n    }\n\n    return response;\n  }\n\n  resolveUri() {\n    const baseURL = this.baseURL;\n\n    if (!baseURL) {\n      throw new apollo_server_errors_1.ApolloError(\"Cannot make request to GraphQL API, missing baseURL\");\n    }\n\n    return baseURL;\n  }\n\n  onRequestLink() {\n    return (0, apollo_link_context_1.setContext)((_, request) => {\n      if (this.willSendRequest) {\n        this.willSendRequest(request);\n      }\n\n      return request;\n    });\n  }\n\n  onErrorLink() {\n    return (0, apollo_link_error_1.onError)(({\n      graphQLErrors,\n      networkError,\n      operation\n    }) => {\n      const {\n        result,\n        response\n      } = operation.getContext();\n\n      if (graphQLErrors) {\n        graphQLErrors.map(graphqlError => console.error(`[GraphQL error]: ${graphqlError.message}`));\n      }\n\n      if (networkError) {\n        console.log(`[Network Error]: ${networkError}`);\n      }\n\n      if (response && response.status >= 400) {\n        console.log(`[Network Error] ${response.bodyText}`);\n      }\n    });\n  }\n\n}\n\nexports.GraphQLDataSource = GraphQLDataSource;","map":{"version":3,"sources":["../../src/engine/GraphQLDataSource.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLDataSource = void 0;\nconst apollo_link_1 = require(\"apollo-link\");\nconst apollo_link_context_1 = require(\"apollo-link-context\");\nconst apollo_link_error_1 = require(\"apollo-link-error\");\nconst apollo_link_http_1 = require(\"apollo-link-http\");\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\nconst await_to_js_1 = __importDefault(require(\"await-to-js\"));\nconst apollo_env_1 = require(\"apollo-env\");\nclass GraphQLDataSource {\n    initialize(config) {\n        this.context = config.context;\n    }\n    async execute(operation) {\n        return this.executeSingleOperation(operation);\n    }\n    composeLinks() {\n        const uri = this.resolveUri();\n        return apollo_link_1.ApolloLink.from([\n            this.onErrorLink(),\n            this.onRequestLink(),\n            (0, apollo_link_http_1.createHttpLink)({ fetch: apollo_env_1.fetch, uri }),\n        ]);\n    }\n    didEncounterError(error) {\n        const status = error.statusCode ? error.statusCode : null;\n        const message = error.bodyText\n            ? error.bodyText\n            : error.message\n                ? error.message\n                : null;\n        let apolloError;\n        switch (status) {\n            case 401:\n                apolloError = new apollo_server_errors_1.AuthenticationError(message);\n                break;\n            case 403:\n                apolloError = new apollo_server_errors_1.ForbiddenError(message);\n                break;\n            default:\n                apolloError = new apollo_server_errors_1.ApolloError(message);\n        }\n        throw apolloError;\n    }\n    async executeSingleOperation(operation) {\n        const link = this.composeLinks();\n        const [error, response] = await (0, await_to_js_1.default)((0, apollo_link_1.makePromise)((0, apollo_link_1.execute)(link, operation)));\n        if (error) {\n            this.didEncounterError(error);\n        }\n        return response;\n    }\n    resolveUri() {\n        const baseURL = this.baseURL;\n        if (!baseURL) {\n            throw new apollo_server_errors_1.ApolloError(\"Cannot make request to GraphQL API, missing baseURL\");\n        }\n        return baseURL;\n    }\n    onRequestLink() {\n        return (0, apollo_link_context_1.setContext)((_, request) => {\n            if (this.willSendRequest) {\n                this.willSendRequest(request);\n            }\n            return request;\n        });\n    }\n    onErrorLink() {\n        return (0, apollo_link_error_1.onError)(({ graphQLErrors, networkError, operation }) => {\n            const { result, response } = operation.getContext();\n            if (graphQLErrors) {\n                graphQLErrors.map((graphqlError) => console.error(`[GraphQL error]: ${graphqlError.message}`));\n            }\n            if (networkError) {\n                console.log(`[Network Error]: ${networkError}`);\n            }\n            if (response && response.status >= 400) {\n                console.log(`[Network Error] ${response.bodyText}`);\n            }\n        });\n    }\n}\nexports.GraphQLDataSource = GraphQLDataSource;\n//# sourceMappingURL=GraphQLDataSource.js.map"]},"metadata":{},"sourceType":"script"}