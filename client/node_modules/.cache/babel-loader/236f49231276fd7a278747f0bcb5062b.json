{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ROARR = void 0;\n\nvar _boolean = require(\"boolean\");\n\nvar _detectNode = _interopRequireDefault(require(\"detect-node\"));\n\nvar _globalthis = _interopRequireDefault(require(\"globalthis\"));\n\nvar _factories = require(\"./factories\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst globalThis = (0, _globalthis.default)();\nconst ROARR = globalThis.ROARR = (0, _factories.createRoarrInititialGlobalState)(globalThis.ROARR || {});\nexports.ROARR = ROARR;\nlet logFactory = _factories.createLogger;\n\nif (_detectNode.default) {\n  // eslint-disable-next-line no-process-env\n  const enabled = (0, _boolean.boolean)(process.env.ROARR_LOG || '');\n\n  if (!enabled) {\n    logFactory = _factories.createMockLogger;\n  }\n}\n\nvar _default = logFactory(message => {\n  if (ROARR.write) {\n    // Stringify message as soon as it is received to prevent\n    // properties of the context from being modified by reference.\n    const body = JSON.stringify(message);\n    ROARR.write(body);\n  }\n});\n\nexports.default = _default;","map":{"version":3,"sources":["../src/log.js"],"names":["globalThis","ROARR","logFactory","createLogger","environmentIsNode","enabled","process","createMockLogger","message","body","JSON"],"mappings":";;;;;;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAGA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;;;;;;;AAMA,MAAMA,UAAU,GAAG,CAAA,GAAA,WAAA,CAAnB,OAAmB,GAAnB;AAEA,MAAMC,KAAK,GAAGD,UAAU,CAAVA,KAAAA,GAAmB,CAAA,GAAA,UAAA,CAAA,+BAAA,EAAgCA,UAAU,CAAVA,KAAAA,IAAjE,EAAiC,CAAjC;;AAEA,IAAIE,UAAU,GAAGC,UAAAA,CAAjB,YAAA;;AAEA,IAAIC,WAAAA,CAAJ,OAAA,EAAuB;EACrB;EACA,MAAMC,OAAO,GAAG,CAAA,GAAA,QAAA,CAAA,OAAA,EAAQC,OAAO,CAAPA,GAAAA,CAAAA,SAAAA,IAAxB,EAAgB,CAAhB;;EAEA,IAAI,CAAJ,OAAA,EAAc;IACZJ,UAAU,GAAGK,UAAAA,CAAbL,gBAAAA;EACD;AACF;;eAYcA,UAAU,CAAEM,OAAD,IAAa;EACrC,IAAIP,KAAK,CAAT,KAAA,EAAiB;IACf;IACA;IACA,MAAMQ,IAAI,GAAGC,IAAI,CAAJA,SAAAA,CAAb,OAAaA,CAAb;IAEAT,KAAK,CAALA,KAAAA,CAAAA,IAAAA;EACD;AAPsB,CAAA,C","sourcesContent":["// @flow\n\nimport {\n  boolean,\n} from 'boolean';\nimport environmentIsNode from 'detect-node';\nimport createGlobalThis from 'globalthis';\nimport {\n  createLogger,\n  createMockLogger,\n  createRoarrInititialGlobalState,\n} from './factories';\n\nconst globalThis = createGlobalThis();\n\nconst ROARR = globalThis.ROARR = createRoarrInititialGlobalState(globalThis.ROARR || {});\n\nlet logFactory = createLogger;\n\nif (environmentIsNode) {\n  // eslint-disable-next-line no-process-env\n  const enabled = boolean(process.env.ROARR_LOG || '');\n\n  if (!enabled) {\n    logFactory = createMockLogger;\n  }\n}\n\nexport type {\n  LoggerType,\n  MessageType,\n  TranslateMessageFunctionType,\n} from './types';\n\nexport {\n  ROARR,\n};\n\nexport default logFactory((message) => {\n  if (ROARR.write) {\n    // Stringify message as soon as it is received to prevent\n    // properties of the context from being modified by reference.\n    const body = JSON.stringify(message);\n\n    ROARR.write(body);\n  }\n});\n"]},"metadata":{},"sourceType":"script"}