{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateEnumValue = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst duplicateEnumValue = ({\n  name: serviceName,\n  typeDefs\n}) => {\n  const errors = [];\n  const enums = {};\n  graphql_1.visit(typeDefs, {\n    EnumTypeDefinition(definition) {\n      const name = definition.name.value;\n      const enumValues = definition.values && definition.values.map(value => value.name.value);\n      if (!enumValues) return definition;\n\n      if (enums[name] && enums[name].length) {\n        enumValues.map(valueName => {\n          if (enums[name].includes(valueName)) {\n            errors.push(utils_1.errorWithCode('DUPLICATE_ENUM_VALUE', utils_1.logServiceAndType(serviceName, name, valueName) + `The enum, \\`${name}\\` has multiple definitions of the \\`${valueName}\\` value.`, definition));\n            return;\n          }\n\n          enums[name].push(valueName);\n        });\n      } else {\n        enums[name] = enumValues;\n      }\n\n      return definition;\n    },\n\n    EnumTypeExtension(definition) {\n      const name = definition.name.value;\n      const enumValues = definition.values && definition.values.map(value => value.name.value);\n      if (!enumValues) return definition;\n\n      if (enums[name] && enums[name].length) {\n        enumValues.map(valueName => {\n          var _a;\n\n          if (enums[name].includes(valueName)) {\n            errors.push(utils_1.errorWithCode('DUPLICATE_ENUM_VALUE', utils_1.logServiceAndType(serviceName, name, valueName) + `The enum, \\`${name}\\` has multiple definitions of the \\`${valueName}\\` value.`, (_a = definition.values) === null || _a === void 0 ? void 0 : _a.find(enumValue => enumValue.name.value === valueName)));\n            return;\n          }\n\n          enums[name].push(valueName);\n        });\n      } else {\n        enums[name] = enumValues;\n      }\n\n      return definition;\n    }\n\n  });\n  return errors;\n};\n\nexports.duplicateEnumValue = duplicateEnumValue;","map":{"version":3,"sources":["../../../../src/composition/validate/preComposition/duplicateEnumValue.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAGA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEO,MAAM,kBAAkB,GAAG,CAAC;EACjC,IAAI,EAAE,WAD2B;EAEjC;AAFiC,CAAD,KAGV;EACtB,MAAM,MAAM,GAAmB,EAA/B;EAEA,MAAM,KAAK,GAAiC,EAA5C;EAEA,SAAA,CAAA,KAAA,CAAM,QAAN,EAAgB;IACd,kBAAkB,CAAC,UAAD,EAAW;MAC3B,MAAM,IAAI,GAAG,UAAU,CAAC,IAAX,CAAgB,KAA7B;MACA,MAAM,UAAU,GACd,UAAU,CAAC,MAAX,IAAqB,UAAU,CAAC,MAAX,CAAkB,GAAlB,CAAsB,KAAK,IAAI,KAAK,CAAC,IAAN,CAAW,KAA1C,CADvB;MAGA,IAAI,CAAC,UAAL,EAAiB,OAAO,UAAP;;MAEjB,IAAI,KAAK,CAAC,IAAD,CAAL,IAAe,KAAK,CAAC,IAAD,CAAL,CAAY,MAA/B,EAAuC;QACrC,UAAU,CAAC,GAAX,CAAe,SAAS,IAAG;UACzB,IAAI,KAAK,CAAC,IAAD,CAAL,CAAY,QAAZ,CAAqB,SAArB,CAAJ,EAAqC;YACnC,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,sBADF,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,IAA/B,EAAqC,SAArC,IACE,eAAe,IAAI,wCAAwC,SAAS,WAHxE,EAIE,UAJF,CADF;YAQA;UACD;;UACD,KAAK,CAAC,IAAD,CAAL,CAAY,IAAZ,CAAiB,SAAjB;QACD,CAbD;MAcD,CAfD,MAeO;QACL,KAAK,CAAC,IAAD,CAAL,GAAc,UAAd;MACD;;MAED,OAAO,UAAP;IACD,CA5Ba;;IA6Bd,iBAAiB,CAAC,UAAD,EAAW;MAC1B,MAAM,IAAI,GAAG,UAAU,CAAC,IAAX,CAAgB,KAA7B;MACA,MAAM,UAAU,GACd,UAAU,CAAC,MAAX,IAAqB,UAAU,CAAC,MAAX,CAAkB,GAAlB,CAAsB,KAAK,IAAI,KAAK,CAAC,IAAN,CAAW,KAA1C,CADvB;MAGA,IAAI,CAAC,UAAL,EAAiB,OAAO,UAAP;;MAEjB,IAAI,KAAK,CAAC,IAAD,CAAL,IAAe,KAAK,CAAC,IAAD,CAAL,CAAY,MAA/B,EAAuC;QACrC,UAAU,CAAC,GAAX,CAAe,SAAS,IAAG;;;UACzB,IAAI,KAAK,CAAC,IAAD,CAAL,CAAY,QAAZ,CAAqB,SAArB,CAAJ,EAAqC;YACnC,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,sBADF,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,IAA/B,EAAqC,SAArC,IACE,eAAe,IAAI,wCAAwC,SAAS,WAHxE,EAIE,CAAA,EAAA,GAAA,UAAU,CAAC,MAAX,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAiB,EAAA,CAAE,IAAF,CAAO,SAAS,IAAI,SAAS,CAAC,IAAV,CAAe,KAAf,KAAyB,SAA7C,CAJnB,CADF;YAQA;UACD;;UACD,KAAK,CAAC,IAAD,CAAL,CAAY,IAAZ,CAAiB,SAAjB;QACD,CAbD;MAcD,CAfD,MAeO;QACL,KAAK,CAAC,IAAD,CAAL,GAAc,UAAd;MACD;;MAED,OAAO,UAAP;IACD;;EAxDa,CAAhB;EA2DA,OAAO,MAAP;AACD,CApEM;;AAAM,OAAA,CAAA,kBAAA,GAAkB,kBAAlB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.duplicateEnumValue = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nconst duplicateEnumValue = ({ name: serviceName, typeDefs, }) => {\n    const errors = [];\n    const enums = {};\n    graphql_1.visit(typeDefs, {\n        EnumTypeDefinition(definition) {\n            const name = definition.name.value;\n            const enumValues = definition.values && definition.values.map(value => value.name.value);\n            if (!enumValues)\n                return definition;\n            if (enums[name] && enums[name].length) {\n                enumValues.map(valueName => {\n                    if (enums[name].includes(valueName)) {\n                        errors.push(utils_1.errorWithCode('DUPLICATE_ENUM_VALUE', utils_1.logServiceAndType(serviceName, name, valueName) +\n                            `The enum, \\`${name}\\` has multiple definitions of the \\`${valueName}\\` value.`, definition));\n                        return;\n                    }\n                    enums[name].push(valueName);\n                });\n            }\n            else {\n                enums[name] = enumValues;\n            }\n            return definition;\n        },\n        EnumTypeExtension(definition) {\n            const name = definition.name.value;\n            const enumValues = definition.values && definition.values.map(value => value.name.value);\n            if (!enumValues)\n                return definition;\n            if (enums[name] && enums[name].length) {\n                enumValues.map(valueName => {\n                    var _a;\n                    if (enums[name].includes(valueName)) {\n                        errors.push(utils_1.errorWithCode('DUPLICATE_ENUM_VALUE', utils_1.logServiceAndType(serviceName, name, valueName) +\n                            `The enum, \\`${name}\\` has multiple definitions of the \\`${valueName}\\` value.`, (_a = definition.values) === null || _a === void 0 ? void 0 : _a.find(enumValue => enumValue.name.value === valueName)));\n                        return;\n                    }\n                    enums[name].push(valueName);\n                });\n            }\n            else {\n                enums[name] = enumValues;\n            }\n            return definition;\n        },\n    });\n    return errors;\n};\nexports.duplicateEnumValue = duplicateEnumValue;\n//# sourceMappingURL=duplicateEnumValue.js.map"]},"metadata":{},"sourceType":"script"}