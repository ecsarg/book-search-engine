{"ast":null,"code":"\"use strict\"; // Dependencies\n\nvar protocols = require(\"protocols\"),\n    isSsh = require(\"is-ssh\"),\n    qs = require(\"query-string\");\n/**\n * parsePath\n * Parses the input url.\n *\n * @name parsePath\n * @function\n * @param {String} url The input url.\n * @return {Object} An object containing the following fields:\n *\n *  - `protocols` (Array): An array with the url protocols (usually it has one element).\n *  - `protocol` (String): The first protocol, `\"ssh\"` (if the url is a ssh url) or `\"file\"`.\n *  - `port` (null|Number): The domain port.\n *  - `resource` (String): The url domain (including subdomains).\n *  - `user` (String): The authentication user (usually for ssh urls).\n *  - `pathname` (String): The url pathname.\n *  - `hash` (String): The url hash.\n *  - `search` (String): The url querystring value.\n *  - `href` (String): The input url.\n *  - `query` (Object): The url querystring, parsed as object.\n */\n\n\nfunction parsePath(url) {\n  url = (url || \"\").trim().replace(/\\r?\\n|\\r/gm, \"\");\n  var output = {\n    protocols: protocols(url),\n    protocol: null,\n    port: null,\n    resource: \"\",\n    user: \"\",\n    pathname: \"\",\n    hash: \"\",\n    search: \"\",\n    href: url,\n    query: Object.create(null)\n  },\n      protocolIndex = url.indexOf(\"://\"),\n      resourceIndex = -1,\n      splits = null,\n      parts = null;\n\n  if (url.startsWith(\".\")) {\n    if (url.startsWith(\"./\")) {\n      url = url.substring(2);\n    }\n\n    output.pathname = url;\n    output.protocol = \"file\";\n  }\n\n  var firstChar = url.charAt(1);\n\n  if (!output.protocol) {\n    output.protocol = output.protocols[0];\n\n    if (!output.protocol) {\n      if (isSsh(url)) {\n        output.protocol = \"ssh\";\n      } else if (firstChar === \"/\" || firstChar === \"~\") {\n        url = url.substring(2);\n        output.protocol = \"file\";\n      } else {\n        output.protocol = \"file\";\n      }\n    }\n  }\n\n  if (protocolIndex !== -1) {\n    url = url.substring(protocolIndex + 3);\n  }\n\n  parts = url.split(/\\/|\\\\/);\n\n  if (output.protocol !== \"file\") {\n    output.resource = parts.shift();\n  } else {\n    output.resource = \"\";\n  } // user@domain\n\n\n  splits = output.resource.split(\"@\");\n\n  if (splits.length === 2) {\n    output.user = splits[0];\n    output.resource = splits[1];\n  } // domain.com:port\n\n\n  splits = output.resource.split(\":\");\n\n  if (splits.length === 2) {\n    output.resource = splits[0];\n    var port = splits[1];\n\n    if (port) {\n      output.port = Number(port);\n\n      if (isNaN(output.port) || port.match(/^\\d+$/) === null) {\n        output.port = null;\n        parts.unshift(port);\n      }\n    } else {\n      output.port = null;\n    }\n  } // Remove empty elements\n\n\n  parts = parts.filter(Boolean); // Stringify the pathname\n\n  if (output.protocol === \"file\") {\n    output.pathname = output.href;\n  } else {\n    output.pathname = output.pathname || (output.protocol !== \"file\" || output.href[0] === \"/\" ? \"/\" : \"\") + parts.join(\"/\");\n  } // #some-hash\n\n\n  splits = output.pathname.split(\"#\");\n\n  if (splits.length === 2) {\n    output.pathname = splits[0];\n    output.hash = splits[1];\n  } // ?foo=bar\n\n\n  splits = output.pathname.split(\"?\");\n\n  if (splits.length === 2) {\n    output.pathname = splits[0];\n    output.search = splits[1];\n  }\n\n  output.query = qs.parse(output.search);\n  output.href = output.href.replace(/\\/$/, \"\");\n  output.pathname = output.pathname.replace(/\\/$/, \"\");\n  return output;\n}\n\nmodule.exports = parsePath;","map":{"version":3,"names":["protocols","require","isSsh","qs","parsePath","url","trim","replace","output","protocol","port","resource","user","pathname","hash","search","href","query","Object","create","protocolIndex","indexOf","resourceIndex","splits","parts","startsWith","substring","firstChar","charAt","split","shift","length","Number","isNaN","match","unshift","filter","Boolean","join","parse","module","exports"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/parse-path/lib/index.js"],"sourcesContent":["\"use strict\";\n\n// Dependencies\nvar protocols = require(\"protocols\"),\n    isSsh = require(\"is-ssh\"),\n    qs = require(\"query-string\");\n\n/**\n * parsePath\n * Parses the input url.\n *\n * @name parsePath\n * @function\n * @param {String} url The input url.\n * @return {Object} An object containing the following fields:\n *\n *  - `protocols` (Array): An array with the url protocols (usually it has one element).\n *  - `protocol` (String): The first protocol, `\"ssh\"` (if the url is a ssh url) or `\"file\"`.\n *  - `port` (null|Number): The domain port.\n *  - `resource` (String): The url domain (including subdomains).\n *  - `user` (String): The authentication user (usually for ssh urls).\n *  - `pathname` (String): The url pathname.\n *  - `hash` (String): The url hash.\n *  - `search` (String): The url querystring value.\n *  - `href` (String): The input url.\n *  - `query` (Object): The url querystring, parsed as object.\n */\nfunction parsePath(url) {\n    url = (url || \"\").trim().replace(/\\r?\\n|\\r/gm, \"\");\n    var output = {\n        protocols: protocols(url),\n        protocol: null,\n        port: null,\n        resource: \"\",\n        user: \"\",\n        pathname: \"\",\n        hash: \"\",\n        search: \"\",\n        href: url,\n        query: Object.create(null)\n    },\n        protocolIndex = url.indexOf(\"://\"),\n        resourceIndex = -1,\n        splits = null,\n        parts = null;\n\n    if (url.startsWith(\".\")) {\n        if (url.startsWith(\"./\")) {\n            url = url.substring(2);\n        }\n        output.pathname = url;\n        output.protocol = \"file\";\n    }\n\n    var firstChar = url.charAt(1);\n    if (!output.protocol) {\n        output.protocol = output.protocols[0];\n        if (!output.protocol) {\n            if (isSsh(url)) {\n                output.protocol = \"ssh\";\n            } else if (firstChar === \"/\" || firstChar === \"~\") {\n                url = url.substring(2);\n                output.protocol = \"file\";\n            } else {\n                output.protocol = \"file\";\n            }\n        }\n    }\n\n    if (protocolIndex !== -1) {\n        url = url.substring(protocolIndex + 3);\n    }\n\n    parts = url.split(/\\/|\\\\/);\n    if (output.protocol !== \"file\") {\n        output.resource = parts.shift();\n    } else {\n        output.resource = \"\";\n    }\n\n    // user@domain\n    splits = output.resource.split(\"@\");\n    if (splits.length === 2) {\n        output.user = splits[0];\n        output.resource = splits[1];\n    }\n\n    // domain.com:port\n    splits = output.resource.split(\":\");\n    if (splits.length === 2) {\n        output.resource = splits[0];\n        var port = splits[1];\n        if (port) {\n            output.port = Number(port);\n            if (isNaN(output.port) || port.match(/^\\d+$/) === null) {\n                output.port = null;\n                parts.unshift(port);\n            }\n        } else {\n            output.port = null;\n        }\n    }\n\n    // Remove empty elements\n    parts = parts.filter(Boolean);\n\n    // Stringify the pathname\n    if (output.protocol === \"file\") {\n        output.pathname = output.href;\n    } else {\n        output.pathname = output.pathname || (output.protocol !== \"file\" || output.href[0] === \"/\" ? \"/\" : \"\") + parts.join(\"/\");\n    }\n\n    // #some-hash\n    splits = output.pathname.split(\"#\");\n    if (splits.length === 2) {\n        output.pathname = splits[0];\n        output.hash = splits[1];\n    }\n\n    // ?foo=bar\n    splits = output.pathname.split(\"?\");\n    if (splits.length === 2) {\n        output.pathname = splits[0];\n        output.search = splits[1];\n    }\n\n    output.query = qs.parse(output.search);\n    output.href = output.href.replace(/\\/$/, \"\");\n    output.pathname = output.pathname.replace(/\\/$/, \"\");\n    return output;\n}\n\nmodule.exports = parsePath;"],"mappings":"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"},"metadata":{},"sourceType":"script"}