{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloEngineClient = exports.noServiceError = void 0;\n\nconst GraphQLDataSource_1 = require(\"./GraphQLDataSource\");\n\nconst config_1 = require(\"../config\");\n\nconst checkSchema_1 = require(\"./operations/checkSchema\");\n\nconst uploadSchema_1 = require(\"./operations/uploadSchema\");\n\nconst validateOperations_1 = require(\"./operations/validateOperations\");\n\nconst registerOperations_1 = require(\"./operations/registerOperations\");\n\nconst schemaTagsAndFieldStats_1 = require(\"./operations/schemaTagsAndFieldStats\");\n\nconst uploadAndComposePartialSchema_1 = require(\"./operations/uploadAndComposePartialSchema\");\n\nconst checkPartialSchema_1 = require(\"./operations/checkPartialSchema\");\n\nconst removeServiceAndCompose_1 = require(\"./operations/removeServiceAndCompose\");\n\nconst listServices_1 = require(\"./operations/listServices\");\n\nfunction noServiceError(service, endpoint) {\n  return `Could not find graph ${service ? service : \"\"} from Apollo at ${endpoint}. Please check your API key and graph ID`;\n}\n\nexports.noServiceError = noServiceError;\n\nclass ApolloEngineClient extends GraphQLDataSource_1.GraphQLDataSource {\n  constructor(engineKey, engineEndpoint = config_1.DefaultEngineConfig.endpoint, clientIdentity) {\n    super();\n    this.engineKey = engineKey;\n    this.clientIdentity = clientIdentity;\n    this.baseURL = engineEndpoint;\n  }\n\n  willSendRequest(request) {\n    if (!request.headers) request.headers = {};\n    request.headers[\"x-api-key\"] = this.engineKey;\n\n    if (this.clientIdentity && this.clientIdentity.name) {\n      request.headers[\"apollo-client-name\"] = this.clientIdentity.name;\n      request.headers[\"apollo-client-reference-id\"] = this.clientIdentity.referenceID;\n      request.headers[\"apollo-client-version\"] = this.clientIdentity.version;\n      return;\n    }\n\n    request.headers[\"apollo-client-name\"] = \"Apollo Language Server\";\n    request.headers[\"apollo-client-reference-id\"] = \"146d29c0-912c-46d3-b686-920e52586be6\";\n    request.headers[\"apollo-client-version\"] = require(\"../../package.json\").version;\n  }\n\n  async listServices(variables) {\n    return this.execute({\n      query: listServices_1.LIST_SERVICES,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (data && !data.service) {\n        throw new Error(noServiceError(variables.id, this.baseURL));\n      }\n\n      if (!(data && data.service)) {\n        throw new Error(\"Error in response from Apollo\");\n      }\n\n      return data;\n    });\n  }\n\n  async checkSchema(variables) {\n    return this.execute({\n      query: checkSchema_1.CHECK_SCHEMA,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (data && !data.service) {\n        throw new Error(noServiceError(variables.id, this.baseURL));\n      }\n\n      if (!(data && data.service)) {\n        throw new Error(\"Error in response from Apollo\");\n      }\n\n      return data.service.checkSchema;\n    });\n  }\n\n  async uploadSchema(variables) {\n    return this.execute({\n      query: uploadSchema_1.UPLOAD_SCHEMA,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (data && !data.service) {\n        throw new Error(noServiceError(variables.id, this.baseURL));\n      }\n\n      if (!(data && data.service)) {\n        throw new Error(\"Error in response from Apollo\");\n      }\n\n      return data.service.uploadSchema;\n    });\n  }\n\n  async uploadAndComposePartialSchema(variables) {\n    return this.execute({\n      query: uploadAndComposePartialSchema_1.UPLOAD_AND_COMPOSE_PARTIAL_SCHEMA,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (data && !data.service) {\n        throw new Error(noServiceError(variables.id, this.baseURL));\n      }\n\n      if (!(data && data.service && data.service.upsertImplementingServiceAndTriggerComposition)) {\n        throw new Error(\"Error in response from Apollo\");\n      }\n\n      return data.service.upsertImplementingServiceAndTriggerComposition;\n    });\n  }\n\n  async checkPartialSchema(variables) {\n    return this.execute({\n      query: checkPartialSchema_1.CHECK_PARTIAL_SCHEMA,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (data && !data.service) {\n        throw new Error(noServiceError(variables.id, this.baseURL));\n      }\n\n      if (!(data && data.service)) {\n        throw new Error(\"Error in response from Apollo\");\n      }\n\n      return data.service.checkPartialSchema;\n    });\n  }\n\n  async removeServiceAndCompose(variables) {\n    return this.execute({\n      query: removeServiceAndCompose_1.REMOVE_SERVICE_AND_COMPOSE,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (!data || !data.service) {\n        throw new Error(\"Error in response from Apollo\");\n      }\n\n      return data.service.removeImplementingServiceAndTriggerComposition;\n    });\n  }\n\n  async validateOperations(variables) {\n    return this.execute({\n      query: validateOperations_1.VALIDATE_OPERATIONS,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (data && !data.service) {\n        throw new Error(noServiceError(variables.id, this.baseURL));\n      }\n\n      if (!(data && data.service)) {\n        throw new Error(\"Error in response from Apollo\");\n      }\n\n      return data.service.validateOperations.validationResults;\n    });\n  }\n\n  async registerOperations(variables) {\n    return this.execute({\n      query: registerOperations_1.REGISTER_OPERATIONS,\n      variables\n    }).then(({\n      data,\n      errors\n    }) => {\n      if (errors) {\n        throw new Error(errors.map(error => error.message).join(\"\\n\"));\n      }\n\n      if (data && !data.service) {\n        throw new Error(noServiceError(variables.id, this.baseURL));\n      }\n\n      if (!(data && data.service && data.service.registerOperationsWithResponse)) {\n        throw new Error(\"Error in response from Apollo\");\n      }\n\n      return data.service.registerOperationsWithResponse;\n    });\n  }\n\n  async loadSchemaTagsAndFieldStats(serviceID) {\n    const {\n      data,\n      errors\n    } = await this.execute({\n      query: schemaTagsAndFieldStats_1.SCHEMA_TAGS_AND_FIELD_STATS,\n      variables: {\n        id: serviceID\n      }\n    });\n\n    if (!(data && data.service && data.service.schemaTags) || errors) {\n      throw new Error(errors ? errors.map(error => error.message).join(\"\\n\") : \"No service returned. Make sure your service name and API key match\");\n    }\n\n    const schemaTags = data.service.schemaTags.map(({\n      tag\n    }) => tag);\n    const fieldStats = new Map();\n    data.service.stats.fieldStats.forEach(fieldStat => {\n      const [parentType = null, fieldName = null] = fieldStat.groupBy.field ? fieldStat.groupBy.field.split(/\\.|:/) : [];\n\n      if (!parentType || !fieldName) {\n        return;\n      }\n\n      const fieldsMap = fieldStats.get(parentType) || fieldStats.set(parentType, new Map()).get(parentType);\n      fieldsMap.set(fieldName, fieldStat.metrics.fieldHistogram.durationMs);\n    });\n    return {\n      schemaTags,\n      fieldStats\n    };\n  }\n\n}\n\nexports.ApolloEngineClient = ApolloEngineClient;","map":{"version":3,"sources":["../../src/engine/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApolloEngineClient = exports.noServiceError = void 0;\nconst GraphQLDataSource_1 = require(\"./GraphQLDataSource\");\nconst config_1 = require(\"../config\");\nconst checkSchema_1 = require(\"./operations/checkSchema\");\nconst uploadSchema_1 = require(\"./operations/uploadSchema\");\nconst validateOperations_1 = require(\"./operations/validateOperations\");\nconst registerOperations_1 = require(\"./operations/registerOperations\");\nconst schemaTagsAndFieldStats_1 = require(\"./operations/schemaTagsAndFieldStats\");\nconst uploadAndComposePartialSchema_1 = require(\"./operations/uploadAndComposePartialSchema\");\nconst checkPartialSchema_1 = require(\"./operations/checkPartialSchema\");\nconst removeServiceAndCompose_1 = require(\"./operations/removeServiceAndCompose\");\nconst listServices_1 = require(\"./operations/listServices\");\nfunction noServiceError(service, endpoint) {\n    return `Could not find graph ${service ? service : \"\"} from Apollo at ${endpoint}. Please check your API key and graph ID`;\n}\nexports.noServiceError = noServiceError;\nclass ApolloEngineClient extends GraphQLDataSource_1.GraphQLDataSource {\n    constructor(engineKey, engineEndpoint = config_1.DefaultEngineConfig.endpoint, clientIdentity) {\n        super();\n        this.engineKey = engineKey;\n        this.clientIdentity = clientIdentity;\n        this.baseURL = engineEndpoint;\n    }\n    willSendRequest(request) {\n        if (!request.headers)\n            request.headers = {};\n        request.headers[\"x-api-key\"] = this.engineKey;\n        if (this.clientIdentity && this.clientIdentity.name) {\n            request.headers[\"apollo-client-name\"] = this.clientIdentity.name;\n            request.headers[\"apollo-client-reference-id\"] =\n                this.clientIdentity.referenceID;\n            request.headers[\"apollo-client-version\"] = this.clientIdentity.version;\n            return;\n        }\n        request.headers[\"apollo-client-name\"] = \"Apollo Language Server\";\n        request.headers[\"apollo-client-reference-id\"] =\n            \"146d29c0-912c-46d3-b686-920e52586be6\";\n        request.headers[\"apollo-client-version\"] =\n            require(\"../../package.json\").version;\n    }\n    async listServices(variables) {\n        return this.execute({\n            query: listServices_1.LIST_SERVICES,\n            variables,\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map((error) => error.message).join(\"\\n\"));\n            }\n            if (data && !data.service) {\n                throw new Error(noServiceError(variables.id, this.baseURL));\n            }\n            if (!(data && data.service)) {\n                throw new Error(\"Error in response from Apollo\");\n            }\n            return data;\n        });\n    }\n    async checkSchema(variables) {\n        return this.execute({\n            query: checkSchema_1.CHECK_SCHEMA,\n            variables,\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map((error) => error.message).join(\"\\n\"));\n            }\n            if (data && !data.service) {\n                throw new Error(noServiceError(variables.id, this.baseURL));\n            }\n            if (!(data && data.service)) {\n                throw new Error(\"Error in response from Apollo\");\n            }\n            return data.service.checkSchema;\n        });\n    }\n    async uploadSchema(variables) {\n        return this.execute({\n            query: uploadSchema_1.UPLOAD_SCHEMA,\n            variables,\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map((error) => error.message).join(\"\\n\"));\n            }\n            if (data && !data.service) {\n                throw new Error(noServiceError(variables.id, this.baseURL));\n            }\n            if (!(data && data.service)) {\n                throw new Error(\"Error in response from Apollo\");\n            }\n            return data.service.uploadSchema;\n        });\n    }\n    async uploadAndComposePartialSchema(variables) {\n        return this.execute({\n            query: uploadAndComposePartialSchema_1.UPLOAD_AND_COMPOSE_PARTIAL_SCHEMA,\n            variables,\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map((error) => error.message).join(\"\\n\"));\n            }\n            if (data && !data.service) {\n                throw new Error(noServiceError(variables.id, this.baseURL));\n            }\n            if (!(data &&\n                data.service &&\n                data.service.upsertImplementingServiceAndTriggerComposition)) {\n                throw new Error(\"Error in response from Apollo\");\n            }\n            return data.service.upsertImplementingServiceAndTriggerComposition;\n        });\n    }\n    async checkPartialSchema(variables) {\n        return this.execute({\n            query: checkPartialSchema_1.CHECK_PARTIAL_SCHEMA,\n            variables,\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map((error) => error.message).join(\"\\n\"));\n            }\n            if (data && !data.service) {\n                throw new Error(noServiceError(variables.id, this.baseURL));\n            }\n            if (!(data && data.service)) {\n                throw new Error(\"Error in response from Apollo\");\n            }\n            return data.service.checkPartialSchema;\n        });\n    }\n    async removeServiceAndCompose(variables) {\n        return this.execute({\n            query: removeServiceAndCompose_1.REMOVE_SERVICE_AND_COMPOSE,\n            variables,\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map((error) => error.message).join(\"\\n\"));\n            }\n            if (!data || !data.service) {\n                throw new Error(\"Error in response from Apollo\");\n            }\n            return data.service.removeImplementingServiceAndTriggerComposition;\n        });\n    }\n    async validateOperations(variables) {\n        return this.execute({\n            query: validateOperations_1.VALIDATE_OPERATIONS,\n            variables,\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map((error) => error.message).join(\"\\n\"));\n            }\n            if (data && !data.service) {\n                throw new Error(noServiceError(variables.id, this.baseURL));\n            }\n            if (!(data && data.service)) {\n                throw new Error(\"Error in response from Apollo\");\n            }\n            return data.service.validateOperations.validationResults;\n        });\n    }\n    async registerOperations(variables) {\n        return this.execute({\n            query: registerOperations_1.REGISTER_OPERATIONS,\n            variables,\n        }).then(({ data, errors }) => {\n            if (errors) {\n                throw new Error(errors.map((error) => error.message).join(\"\\n\"));\n            }\n            if (data && !data.service) {\n                throw new Error(noServiceError(variables.id, this.baseURL));\n            }\n            if (!(data && data.service && data.service.registerOperationsWithResponse)) {\n                throw new Error(\"Error in response from Apollo\");\n            }\n            return data.service.registerOperationsWithResponse;\n        });\n    }\n    async loadSchemaTagsAndFieldStats(serviceID) {\n        const { data, errors } = await this.execute({\n            query: schemaTagsAndFieldStats_1.SCHEMA_TAGS_AND_FIELD_STATS,\n            variables: {\n                id: serviceID,\n            },\n        });\n        if (!(data && data.service && data.service.schemaTags) || errors) {\n            throw new Error(errors\n                ? errors.map((error) => error.message).join(\"\\n\")\n                : \"No service returned. Make sure your service name and API key match\");\n        }\n        const schemaTags = data.service.schemaTags.map(({ tag }) => tag);\n        const fieldStats = new Map();\n        data.service.stats.fieldStats.forEach((fieldStat) => {\n            const [parentType = null, fieldName = null] = fieldStat.groupBy.field\n                ? fieldStat.groupBy.field.split(/\\.|:/)\n                : [];\n            if (!parentType || !fieldName) {\n                return;\n            }\n            const fieldsMap = fieldStats.get(parentType) ||\n                fieldStats.set(parentType, new Map()).get(parentType);\n            fieldsMap.set(fieldName, fieldStat.metrics.fieldHistogram.durationMs);\n        });\n        return { schemaTags, fieldStats };\n    }\n}\nexports.ApolloEngineClient = ApolloEngineClient;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}