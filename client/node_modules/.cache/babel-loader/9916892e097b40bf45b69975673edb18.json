{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DiagnosticSet = exports.GraphQLDiagnostic = exports.diagnosticsFromError = exports.collectExecutableDefinitionDiagnositics = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst vscode_languageserver_1 = require(\"vscode-languageserver\");\n\nconst graphql_2 = require(\"./utilities/graphql\");\n\nconst source_1 = require(\"./utilities/source\");\n\nconst validation_1 = require(\"./errors/validation\");\n\nfunction collectExecutableDefinitionDiagnositics(schema, queryDocument, fragments = {}, rules) {\n  const ast = queryDocument.ast;\n  if (!ast) return queryDocument.syntaxErrors;\n  const astWithExecutableDefinitions = Object.assign(Object.assign({}, ast), {\n    definitions: ast.definitions.filter(graphql_1.isExecutableDefinitionNode)\n  });\n  const diagnostics = [];\n\n  for (const error of (0, validation_1.getValidationErrors)(schema, astWithExecutableDefinitions, fragments, rules)) {\n    diagnostics.push(...diagnosticsFromError(error, vscode_languageserver_1.DiagnosticSeverity.Error, \"Validation\"));\n  }\n\n  for (const error of (0, graphql_1.findDeprecatedUsages)(schema, astWithExecutableDefinitions)) {\n    diagnostics.push(...diagnosticsFromError(error, vscode_languageserver_1.DiagnosticSeverity.Warning, \"Deprecation\"));\n  }\n\n  return diagnostics;\n}\n\nexports.collectExecutableDefinitionDiagnositics = collectExecutableDefinitionDiagnositics;\n\nfunction diagnosticsFromError(error, severity, type) {\n  if (!error.nodes) {\n    return [];\n  }\n\n  return error.nodes.map(node => {\n    return {\n      source: `GraphQL: ${type}`,\n      message: error.message,\n      severity,\n      range: (0, source_1.rangeForASTNode)((0, graphql_2.highlightNodeForNode)(node) || node),\n      error\n    };\n  });\n}\n\nexports.diagnosticsFromError = diagnosticsFromError;\nvar GraphQLDiagnostic;\n\n(function (GraphQLDiagnostic) {\n  function is(diagnostic) {\n    return \"error\" in diagnostic;\n  }\n\n  GraphQLDiagnostic.is = is;\n})(GraphQLDiagnostic = exports.GraphQLDiagnostic || (exports.GraphQLDiagnostic = {}));\n\nclass DiagnosticSet {\n  constructor() {\n    this.diagnosticsByFile = new Map();\n  }\n\n  entries() {\n    return this.diagnosticsByFile.entries();\n  }\n\n  addDiagnostics(uri, diagnostics) {\n    const existingDiagnostics = this.diagnosticsByFile.get(uri);\n\n    if (!existingDiagnostics) {\n      this.diagnosticsByFile.set(uri, diagnostics);\n    } else {\n      existingDiagnostics.push(...diagnostics);\n    }\n  }\n\n}\n\nexports.DiagnosticSet = DiagnosticSet;","map":{"version":3,"sources":["../src/diagnostics.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagnosticSet = exports.GraphQLDiagnostic = exports.diagnosticsFromError = exports.collectExecutableDefinitionDiagnositics = void 0;\nconst graphql_1 = require(\"graphql\");\nconst vscode_languageserver_1 = require(\"vscode-languageserver\");\nconst graphql_2 = require(\"./utilities/graphql\");\nconst source_1 = require(\"./utilities/source\");\nconst validation_1 = require(\"./errors/validation\");\nfunction collectExecutableDefinitionDiagnositics(schema, queryDocument, fragments = {}, rules) {\n    const ast = queryDocument.ast;\n    if (!ast)\n        return queryDocument.syntaxErrors;\n    const astWithExecutableDefinitions = Object.assign(Object.assign({}, ast), { definitions: ast.definitions.filter(graphql_1.isExecutableDefinitionNode) });\n    const diagnostics = [];\n    for (const error of (0, validation_1.getValidationErrors)(schema, astWithExecutableDefinitions, fragments, rules)) {\n        diagnostics.push(...diagnosticsFromError(error, vscode_languageserver_1.DiagnosticSeverity.Error, \"Validation\"));\n    }\n    for (const error of (0, graphql_1.findDeprecatedUsages)(schema, astWithExecutableDefinitions)) {\n        diagnostics.push(...diagnosticsFromError(error, vscode_languageserver_1.DiagnosticSeverity.Warning, \"Deprecation\"));\n    }\n    return diagnostics;\n}\nexports.collectExecutableDefinitionDiagnositics = collectExecutableDefinitionDiagnositics;\nfunction diagnosticsFromError(error, severity, type) {\n    if (!error.nodes) {\n        return [];\n    }\n    return error.nodes.map((node) => {\n        return {\n            source: `GraphQL: ${type}`,\n            message: error.message,\n            severity,\n            range: (0, source_1.rangeForASTNode)((0, graphql_2.highlightNodeForNode)(node) || node),\n            error,\n        };\n    });\n}\nexports.diagnosticsFromError = diagnosticsFromError;\nvar GraphQLDiagnostic;\n(function (GraphQLDiagnostic) {\n    function is(diagnostic) {\n        return \"error\" in diagnostic;\n    }\n    GraphQLDiagnostic.is = is;\n})(GraphQLDiagnostic = exports.GraphQLDiagnostic || (exports.GraphQLDiagnostic = {}));\nclass DiagnosticSet {\n    constructor() {\n        this.diagnosticsByFile = new Map();\n    }\n    entries() {\n        return this.diagnosticsByFile.entries();\n    }\n    addDiagnostics(uri, diagnostics) {\n        const existingDiagnostics = this.diagnosticsByFile.get(uri);\n        if (!existingDiagnostics) {\n            this.diagnosticsByFile.set(uri, diagnostics);\n        }\n        else {\n            existingDiagnostics.push(...diagnostics);\n        }\n    }\n}\nexports.DiagnosticSet = DiagnosticSet;\n//# sourceMappingURL=diagnostics.js.map"]},"metadata":{},"sourceType":"script"}