{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLClientProject = exports.isClientProject = void 0;\n\nconst base_1 = require(\"./base\");\n\nconst graphql_1 = require(\"graphql\");\n\nconst vscode_languageserver_1 = require(\"vscode-languageserver\");\n\nconst source_1 = require(\"../utilities/source\");\n\nconst format_1 = require(\"../format\");\n\nconst fileSet_1 = require(\"../fileSet\");\n\nconst defaultClientSchema_1 = require(\"./defaultClientSchema\");\n\nconst graphql_2 = require(\"../utilities/graphql\");\n\nconst validation_1 = require(\"../errors/validation\");\n\nconst diagnostics_1 = require(\"../diagnostics\");\n\nfunction schemaHasASTNodes(schema) {\n  const queryType = schema && schema.getQueryType();\n  return !!(queryType && queryType.astNode);\n}\n\nfunction augmentSchemaWithGeneratedSDLIfNeeded(schema) {\n  if (schemaHasASTNodes(schema)) return schema;\n  const sdl = (0, graphql_1.printSchema)(schema);\n  return (0, graphql_1.buildSchema)(new graphql_1.Source(sdl, `graphql-schema:/schema.graphql?${encodeURIComponent(sdl)}`));\n}\n\nfunction isClientProject(project) {\n  return project instanceof GraphQLClientProject;\n}\n\nexports.isClientProject = isClientProject;\n\nclass GraphQLClientProject extends base_1.GraphQLProject {\n  constructor({\n    config,\n    loadingHandler,\n    rootURI,\n    clientIdentity\n  }) {\n    const fileSet = new fileSet_1.FileSet({\n      rootURI: config.configDirURI || rootURI,\n      includes: [...config.client.includes, \".env\", \"apollo.config.js\", \"apollo.config.cjs\"],\n      excludes: config.client.excludes,\n      configURI: config.configURI\n    });\n    super({\n      config,\n      fileSet,\n      loadingHandler,\n      clientIdentity\n    });\n    this.rootURI = rootURI;\n    this.serviceID = config.graph;\n\n    const filterConfigAndEnvFiles = path => !(path.includes(\"apollo.config\") || path.includes(\".env\") || config.configURI && path === config.configURI.fsPath);\n\n    if (fileSet.allFiles().filter(filterConfigAndEnvFiles).length === 0) {\n      console.warn(\"⚠️  It looks like there are 0 files associated with this Apollo Project. \" + \"This may be because you don't have any files yet, or your includes/excludes \" + \"fields are configured incorrectly, and Apollo can't find your files. \" + \"For help configuring Apollo projects, see this guide: https://go.apollo.dev/t/config\");\n    }\n\n    const {\n      validationRules\n    } = this.config.client;\n\n    if (typeof validationRules === \"function\") {\n      this._validationRules = validation_1.defaultValidationRules.filter(validationRules);\n    } else {\n      this._validationRules = validationRules;\n    }\n\n    this.loadEngineData();\n  }\n\n  get displayName() {\n    return this.config.graph || \"Unnamed Project\";\n  }\n\n  initialize() {\n    return [this.scanAllIncludedFiles(), this.loadServiceSchema()];\n  }\n\n  getProjectStats() {\n    const filterTypes = type => !/^__|Boolean|ID|Int|String|Float/.test(type);\n\n    const serviceTypes = this.serviceSchema ? Object.keys(this.serviceSchema.getTypeMap()).filter(filterTypes).length : 0;\n    const totalTypes = this.schema ? Object.keys(this.schema.getTypeMap()).filter(filterTypes).length : 0;\n    return {\n      type: \"client\",\n      serviceId: this.serviceID,\n      types: {\n        service: serviceTypes,\n        client: totalTypes - serviceTypes,\n        total: totalTypes\n      },\n      tag: this.config.variant,\n      loaded: Boolean(this.schema || this.serviceSchema),\n      lastFetch: this.lastLoadDate\n    };\n  }\n\n  onDecorations(handler) {\n    this._onDecorations = handler;\n  }\n\n  onSchemaTags(handler) {\n    this._onSchemaTags = handler;\n  }\n\n  async updateSchemaTag(tag) {\n    await this.loadServiceSchema(tag);\n    this.invalidate();\n  }\n\n  async loadServiceSchema(tag) {\n    await this.loadingHandler.handle(`Loading schema for ${this.displayName}`, (async () => {\n      this.serviceSchema = augmentSchemaWithGeneratedSDLIfNeeded(await this.schemaProvider.resolveSchema({\n        tag: tag || this.config.variant,\n        force: true\n      }));\n      this.schema = (0, graphql_1.extendSchema)(this.serviceSchema, this.clientSchema);\n    })());\n  }\n\n  async resolveSchema() {\n    if (!this.schema) throw new Error();\n    return this.schema;\n  }\n\n  get clientSchema() {\n    return {\n      kind: graphql_1.Kind.DOCUMENT,\n      definitions: [...this.typeSystemDefinitionsAndExtensions, ...this.missingApolloClientDirectives]\n    };\n  }\n\n  get missingApolloClientDirectives() {\n    const {\n      serviceSchema\n    } = this;\n    const serviceDirectives = serviceSchema ? serviceSchema.getDirectives().map(directive => directive.name) : [];\n    const clientDirectives = this.typeSystemDefinitionsAndExtensions.filter(graphql_2.isDirectiveDefinitionNode).map(def => def.name.value);\n    const existingDirectives = serviceDirectives.concat(clientDirectives);\n    const apolloAst = defaultClientSchema_1.apolloClientSchemaDocument.ast;\n    if (!apolloAst) return [];\n    const apolloDirectives = apolloAst.definitions.filter(graphql_2.isDirectiveDefinitionNode).map(def => def.name.value);\n\n    for (const existingDirective of existingDirectives) {\n      if (apolloDirectives.includes(existingDirective)) {\n        return [];\n      }\n    }\n\n    return apolloAst.definitions;\n  }\n\n  addClientMetadataToSchemaNodes() {\n    const {\n      schema,\n      serviceSchema\n    } = this;\n    if (!schema || !serviceSchema) return;\n    (0, graphql_1.visit)(this.clientSchema, {\n      ObjectTypeExtension(node) {\n        const type = schema.getType(node.name.value);\n        const {\n          fields\n        } = node;\n        if (!fields || !type) return;\n        const localInfo = type.clientSchema || {};\n        localInfo.localFields = [...(localInfo.localFields || []), ...fields.map(field => field.name.value)];\n        type.clientSchema = localInfo;\n      }\n\n    });\n  }\n\n  async validate() {\n    if (!this._onDiagnostics) return;\n    if (!this.serviceSchema) return;\n    const diagnosticSet = new diagnostics_1.DiagnosticSet();\n\n    try {\n      this.schema = (0, graphql_1.extendSchema)(this.serviceSchema, this.clientSchema);\n      this.addClientMetadataToSchemaNodes();\n    } catch (error) {\n      if (error instanceof graphql_1.GraphQLError) {\n        const uri = error.source && error.source.name;\n\n        if (uri) {\n          diagnosticSet.addDiagnostics(uri, (0, diagnostics_1.diagnosticsFromError)(error, vscode_languageserver_1.DiagnosticSeverity.Error, \"Validation\"));\n        }\n      } else {\n        console.error(error);\n      }\n\n      this.schema = this.serviceSchema;\n    }\n\n    const fragments = this.fragments;\n\n    for (const [uri, documentsForFile] of this.documentsByFile) {\n      for (const document of documentsForFile) {\n        diagnosticSet.addDiagnostics(uri, (0, diagnostics_1.collectExecutableDefinitionDiagnositics)(this.schema, document, fragments, this._validationRules));\n      }\n    }\n\n    for (const [uri, diagnostics] of diagnosticSet.entries()) {\n      this._onDiagnostics({\n        uri,\n        diagnostics\n      });\n    }\n\n    this.diagnosticSet = diagnosticSet;\n    this.generateDecorations();\n  }\n\n  async loadEngineData() {\n    const engineClient = this.engineClient;\n    if (!engineClient) return;\n    const serviceID = this.serviceID;\n    if (!serviceID) return;\n    await this.loadingHandler.handle(`Loading Apollo data for ${this.displayName}`, (async () => {\n      try {\n        const {\n          schemaTags,\n          fieldStats\n        } = await engineClient.loadSchemaTagsAndFieldStats(serviceID);\n        this._onSchemaTags && this._onSchemaTags([serviceID, schemaTags]);\n        this.fieldStats = fieldStats;\n        this.lastLoadDate = +new Date();\n        this.generateDecorations();\n      } catch (e) {\n        console.error(e);\n      }\n    })());\n  }\n\n  generateDecorations() {\n    if (!this._onDecorations) return;\n    if (!this.schema) return;\n    const decorations = [];\n\n    for (const [uri, queryDocumentsForFile] of this.documentsByFile) {\n      for (const queryDocument of queryDocumentsForFile) {\n        if (queryDocument.ast && this.fieldStats) {\n          const fieldStats = this.fieldStats;\n          const typeInfo = new graphql_1.TypeInfo(this.schema);\n          (0, graphql_1.visit)(queryDocument.ast, (0, graphql_1.visitWithTypeInfo)(typeInfo, {\n            enter: node => {\n              if (node.kind == \"Field\" && typeInfo.getParentType()) {\n                const parentName = typeInfo.getParentType().name;\n                const parentEngineStat = fieldStats.get(parentName);\n                const engineStat = parentEngineStat ? parentEngineStat.get(node.name.value) : undefined;\n\n                if (engineStat && engineStat > 1) {\n                  decorations.push({\n                    document: uri,\n                    message: `~${(0, format_1.formatMS)(engineStat, 0)}`,\n                    range: (0, source_1.rangeForASTNode)(node)\n                  });\n                }\n              }\n            }\n          }));\n        }\n      }\n    }\n\n    this._onDecorations(decorations);\n  }\n\n  get fragments() {\n    const fragments = Object.create(null);\n\n    for (const document of this.documents) {\n      if (!document.ast) continue;\n\n      for (const definition of document.ast.definitions) {\n        if (definition.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {\n          fragments[definition.name.value] = definition;\n        }\n      }\n    }\n\n    return fragments;\n  }\n\n  get operations() {\n    const operations = Object.create(null);\n\n    for (const document of this.documents) {\n      if (!document.ast) continue;\n\n      for (const definition of document.ast.definitions) {\n        if (definition.kind === graphql_1.Kind.OPERATION_DEFINITION) {\n          if (!definition.name) {\n            throw new graphql_1.GraphQLError(\"Apollo does not support anonymous operations\", [definition]);\n          }\n\n          operations[definition.name.value] = definition;\n        }\n      }\n    }\n\n    return operations;\n  }\n\n  get mergedOperationsAndFragments() {\n    return (0, graphql_1.separateOperations)({\n      kind: graphql_1.Kind.DOCUMENT,\n      definitions: [...Object.values(this.fragments), ...Object.values(this.operations)]\n    });\n  }\n\n  get mergedOperationsAndFragmentsForService() {\n    const {\n      clientOnlyDirectives,\n      clientSchemaDirectives,\n      addTypename\n    } = this.config.client;\n    const current = this.mergedOperationsAndFragments;\n    if ((!clientOnlyDirectives || !clientOnlyDirectives.length) && (!clientSchemaDirectives || !clientSchemaDirectives.length)) return current;\n    const filtered = Object.create(null);\n\n    for (const operationName in current) {\n      const document = current[operationName];\n      let serviceOnly = (0, graphql_2.removeDirectiveAnnotatedFields)((0, graphql_2.removeDirectives)(document, clientOnlyDirectives), clientSchemaDirectives);\n      if (addTypename) serviceOnly = (0, graphql_2.withTypenameFieldAddedWhereNeeded)(serviceOnly);\n\n      if (serviceOnly.definitions.filter(Boolean).length) {\n        filtered[operationName] = serviceOnly;\n      }\n    }\n\n    return filtered;\n  }\n\n  getOperationFieldsFromFieldDefinition(fieldName, parent) {\n    if (!this.schema || !parent) return [];\n    const fields = [];\n    const typeInfo = new graphql_1.TypeInfo(this.schema);\n\n    for (const document of this.documents) {\n      if (!document.ast) continue;\n      (0, graphql_1.visit)(document.ast, (0, graphql_1.visitWithTypeInfo)(typeInfo, {\n        Field(node) {\n          if (node.name.value !== fieldName) return;\n          const parentType = typeInfo.getParentType();\n\n          if (parentType && parentType.name === parent.name.value) {\n            fields.push(node);\n          }\n\n          return;\n        }\n\n      }));\n    }\n\n    return fields;\n  }\n\n  fragmentSpreadsForFragment(fragmentName) {\n    const fragmentSpreads = [];\n\n    for (const document of this.documents) {\n      if (!document.ast) continue;\n      (0, graphql_1.visit)(document.ast, {\n        FragmentSpread(node) {\n          if (node.name.value === fragmentName) {\n            fragmentSpreads.push(node);\n          }\n        }\n\n      });\n    }\n\n    return fragmentSpreads;\n  }\n\n}\n\nexports.GraphQLClientProject = GraphQLClientProject;","map":{"version":3,"sources":["../../src/project/client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLClientProject = exports.isClientProject = void 0;\nconst base_1 = require(\"./base\");\nconst graphql_1 = require(\"graphql\");\nconst vscode_languageserver_1 = require(\"vscode-languageserver\");\nconst source_1 = require(\"../utilities/source\");\nconst format_1 = require(\"../format\");\nconst fileSet_1 = require(\"../fileSet\");\nconst defaultClientSchema_1 = require(\"./defaultClientSchema\");\nconst graphql_2 = require(\"../utilities/graphql\");\nconst validation_1 = require(\"../errors/validation\");\nconst diagnostics_1 = require(\"../diagnostics\");\nfunction schemaHasASTNodes(schema) {\n    const queryType = schema && schema.getQueryType();\n    return !!(queryType && queryType.astNode);\n}\nfunction augmentSchemaWithGeneratedSDLIfNeeded(schema) {\n    if (schemaHasASTNodes(schema))\n        return schema;\n    const sdl = (0, graphql_1.printSchema)(schema);\n    return (0, graphql_1.buildSchema)(new graphql_1.Source(sdl, `graphql-schema:/schema.graphql?${encodeURIComponent(sdl)}`));\n}\nfunction isClientProject(project) {\n    return project instanceof GraphQLClientProject;\n}\nexports.isClientProject = isClientProject;\nclass GraphQLClientProject extends base_1.GraphQLProject {\n    constructor({ config, loadingHandler, rootURI, clientIdentity, }) {\n        const fileSet = new fileSet_1.FileSet({\n            rootURI: config.configDirURI || rootURI,\n            includes: [\n                ...config.client.includes,\n                \".env\",\n                \"apollo.config.js\",\n                \"apollo.config.cjs\",\n            ],\n            excludes: config.client.excludes,\n            configURI: config.configURI,\n        });\n        super({ config, fileSet, loadingHandler, clientIdentity });\n        this.rootURI = rootURI;\n        this.serviceID = config.graph;\n        const filterConfigAndEnvFiles = (path) => !(path.includes(\"apollo.config\") ||\n            path.includes(\".env\") ||\n            (config.configURI && path === config.configURI.fsPath));\n        if (fileSet.allFiles().filter(filterConfigAndEnvFiles).length === 0) {\n            console.warn(\"⚠️  It looks like there are 0 files associated with this Apollo Project. \" +\n                \"This may be because you don't have any files yet, or your includes/excludes \" +\n                \"fields are configured incorrectly, and Apollo can't find your files. \" +\n                \"For help configuring Apollo projects, see this guide: https://go.apollo.dev/t/config\");\n        }\n        const { validationRules } = this.config.client;\n        if (typeof validationRules === \"function\") {\n            this._validationRules = validation_1.defaultValidationRules.filter(validationRules);\n        }\n        else {\n            this._validationRules = validationRules;\n        }\n        this.loadEngineData();\n    }\n    get displayName() {\n        return this.config.graph || \"Unnamed Project\";\n    }\n    initialize() {\n        return [this.scanAllIncludedFiles(), this.loadServiceSchema()];\n    }\n    getProjectStats() {\n        const filterTypes = (type) => !/^__|Boolean|ID|Int|String|Float/.test(type);\n        const serviceTypes = this.serviceSchema\n            ? Object.keys(this.serviceSchema.getTypeMap()).filter(filterTypes).length\n            : 0;\n        const totalTypes = this.schema\n            ? Object.keys(this.schema.getTypeMap()).filter(filterTypes).length\n            : 0;\n        return {\n            type: \"client\",\n            serviceId: this.serviceID,\n            types: {\n                service: serviceTypes,\n                client: totalTypes - serviceTypes,\n                total: totalTypes,\n            },\n            tag: this.config.variant,\n            loaded: Boolean(this.schema || this.serviceSchema),\n            lastFetch: this.lastLoadDate,\n        };\n    }\n    onDecorations(handler) {\n        this._onDecorations = handler;\n    }\n    onSchemaTags(handler) {\n        this._onSchemaTags = handler;\n    }\n    async updateSchemaTag(tag) {\n        await this.loadServiceSchema(tag);\n        this.invalidate();\n    }\n    async loadServiceSchema(tag) {\n        await this.loadingHandler.handle(`Loading schema for ${this.displayName}`, (async () => {\n            this.serviceSchema = augmentSchemaWithGeneratedSDLIfNeeded(await this.schemaProvider.resolveSchema({\n                tag: tag || this.config.variant,\n                force: true,\n            }));\n            this.schema = (0, graphql_1.extendSchema)(this.serviceSchema, this.clientSchema);\n        })());\n    }\n    async resolveSchema() {\n        if (!this.schema)\n            throw new Error();\n        return this.schema;\n    }\n    get clientSchema() {\n        return {\n            kind: graphql_1.Kind.DOCUMENT,\n            definitions: [\n                ...this.typeSystemDefinitionsAndExtensions,\n                ...this.missingApolloClientDirectives,\n            ],\n        };\n    }\n    get missingApolloClientDirectives() {\n        const { serviceSchema } = this;\n        const serviceDirectives = serviceSchema\n            ? serviceSchema.getDirectives().map((directive) => directive.name)\n            : [];\n        const clientDirectives = this.typeSystemDefinitionsAndExtensions\n            .filter(graphql_2.isDirectiveDefinitionNode)\n            .map((def) => def.name.value);\n        const existingDirectives = serviceDirectives.concat(clientDirectives);\n        const apolloAst = defaultClientSchema_1.apolloClientSchemaDocument.ast;\n        if (!apolloAst)\n            return [];\n        const apolloDirectives = apolloAst.definitions\n            .filter(graphql_2.isDirectiveDefinitionNode)\n            .map((def) => def.name.value);\n        for (const existingDirective of existingDirectives) {\n            if (apolloDirectives.includes(existingDirective)) {\n                return [];\n            }\n        }\n        return apolloAst.definitions;\n    }\n    addClientMetadataToSchemaNodes() {\n        const { schema, serviceSchema } = this;\n        if (!schema || !serviceSchema)\n            return;\n        (0, graphql_1.visit)(this.clientSchema, {\n            ObjectTypeExtension(node) {\n                const type = schema.getType(node.name.value);\n                const { fields } = node;\n                if (!fields || !type)\n                    return;\n                const localInfo = type.clientSchema || {};\n                localInfo.localFields = [\n                    ...(localInfo.localFields || []),\n                    ...fields.map((field) => field.name.value),\n                ];\n                type.clientSchema = localInfo;\n            },\n        });\n    }\n    async validate() {\n        if (!this._onDiagnostics)\n            return;\n        if (!this.serviceSchema)\n            return;\n        const diagnosticSet = new diagnostics_1.DiagnosticSet();\n        try {\n            this.schema = (0, graphql_1.extendSchema)(this.serviceSchema, this.clientSchema);\n            this.addClientMetadataToSchemaNodes();\n        }\n        catch (error) {\n            if (error instanceof graphql_1.GraphQLError) {\n                const uri = error.source && error.source.name;\n                if (uri) {\n                    diagnosticSet.addDiagnostics(uri, (0, diagnostics_1.diagnosticsFromError)(error, vscode_languageserver_1.DiagnosticSeverity.Error, \"Validation\"));\n                }\n            }\n            else {\n                console.error(error);\n            }\n            this.schema = this.serviceSchema;\n        }\n        const fragments = this.fragments;\n        for (const [uri, documentsForFile] of this.documentsByFile) {\n            for (const document of documentsForFile) {\n                diagnosticSet.addDiagnostics(uri, (0, diagnostics_1.collectExecutableDefinitionDiagnositics)(this.schema, document, fragments, this._validationRules));\n            }\n        }\n        for (const [uri, diagnostics] of diagnosticSet.entries()) {\n            this._onDiagnostics({ uri, diagnostics });\n        }\n        this.diagnosticSet = diagnosticSet;\n        this.generateDecorations();\n    }\n    async loadEngineData() {\n        const engineClient = this.engineClient;\n        if (!engineClient)\n            return;\n        const serviceID = this.serviceID;\n        if (!serviceID)\n            return;\n        await this.loadingHandler.handle(`Loading Apollo data for ${this.displayName}`, (async () => {\n            try {\n                const { schemaTags, fieldStats } = await engineClient.loadSchemaTagsAndFieldStats(serviceID);\n                this._onSchemaTags && this._onSchemaTags([serviceID, schemaTags]);\n                this.fieldStats = fieldStats;\n                this.lastLoadDate = +new Date();\n                this.generateDecorations();\n            }\n            catch (e) {\n                console.error(e);\n            }\n        })());\n    }\n    generateDecorations() {\n        if (!this._onDecorations)\n            return;\n        if (!this.schema)\n            return;\n        const decorations = [];\n        for (const [uri, queryDocumentsForFile] of this.documentsByFile) {\n            for (const queryDocument of queryDocumentsForFile) {\n                if (queryDocument.ast && this.fieldStats) {\n                    const fieldStats = this.fieldStats;\n                    const typeInfo = new graphql_1.TypeInfo(this.schema);\n                    (0, graphql_1.visit)(queryDocument.ast, (0, graphql_1.visitWithTypeInfo)(typeInfo, {\n                        enter: (node) => {\n                            if (node.kind == \"Field\" && typeInfo.getParentType()) {\n                                const parentName = typeInfo.getParentType().name;\n                                const parentEngineStat = fieldStats.get(parentName);\n                                const engineStat = parentEngineStat\n                                    ? parentEngineStat.get(node.name.value)\n                                    : undefined;\n                                if (engineStat && engineStat > 1) {\n                                    decorations.push({\n                                        document: uri,\n                                        message: `~${(0, format_1.formatMS)(engineStat, 0)}`,\n                                        range: (0, source_1.rangeForASTNode)(node),\n                                    });\n                                }\n                            }\n                        },\n                    }));\n                }\n            }\n        }\n        this._onDecorations(decorations);\n    }\n    get fragments() {\n        const fragments = Object.create(null);\n        for (const document of this.documents) {\n            if (!document.ast)\n                continue;\n            for (const definition of document.ast.definitions) {\n                if (definition.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {\n                    fragments[definition.name.value] = definition;\n                }\n            }\n        }\n        return fragments;\n    }\n    get operations() {\n        const operations = Object.create(null);\n        for (const document of this.documents) {\n            if (!document.ast)\n                continue;\n            for (const definition of document.ast.definitions) {\n                if (definition.kind === graphql_1.Kind.OPERATION_DEFINITION) {\n                    if (!definition.name) {\n                        throw new graphql_1.GraphQLError(\"Apollo does not support anonymous operations\", [definition]);\n                    }\n                    operations[definition.name.value] = definition;\n                }\n            }\n        }\n        return operations;\n    }\n    get mergedOperationsAndFragments() {\n        return (0, graphql_1.separateOperations)({\n            kind: graphql_1.Kind.DOCUMENT,\n            definitions: [\n                ...Object.values(this.fragments),\n                ...Object.values(this.operations),\n            ],\n        });\n    }\n    get mergedOperationsAndFragmentsForService() {\n        const { clientOnlyDirectives, clientSchemaDirectives, addTypename } = this.config.client;\n        const current = this.mergedOperationsAndFragments;\n        if ((!clientOnlyDirectives || !clientOnlyDirectives.length) &&\n            (!clientSchemaDirectives || !clientSchemaDirectives.length))\n            return current;\n        const filtered = Object.create(null);\n        for (const operationName in current) {\n            const document = current[operationName];\n            let serviceOnly = (0, graphql_2.removeDirectiveAnnotatedFields)((0, graphql_2.removeDirectives)(document, clientOnlyDirectives), clientSchemaDirectives);\n            if (addTypename)\n                serviceOnly = (0, graphql_2.withTypenameFieldAddedWhereNeeded)(serviceOnly);\n            if (serviceOnly.definitions.filter(Boolean).length) {\n                filtered[operationName] = serviceOnly;\n            }\n        }\n        return filtered;\n    }\n    getOperationFieldsFromFieldDefinition(fieldName, parent) {\n        if (!this.schema || !parent)\n            return [];\n        const fields = [];\n        const typeInfo = new graphql_1.TypeInfo(this.schema);\n        for (const document of this.documents) {\n            if (!document.ast)\n                continue;\n            (0, graphql_1.visit)(document.ast, (0, graphql_1.visitWithTypeInfo)(typeInfo, {\n                Field(node) {\n                    if (node.name.value !== fieldName)\n                        return;\n                    const parentType = typeInfo.getParentType();\n                    if (parentType && parentType.name === parent.name.value) {\n                        fields.push(node);\n                    }\n                    return;\n                },\n            }));\n        }\n        return fields;\n    }\n    fragmentSpreadsForFragment(fragmentName) {\n        const fragmentSpreads = [];\n        for (const document of this.documents) {\n            if (!document.ast)\n                continue;\n            (0, graphql_1.visit)(document.ast, {\n                FragmentSpread(node) {\n                    if (node.name.value === fragmentName) {\n                        fragmentSpreads.push(node);\n                    }\n                },\n            });\n        }\n        return fragmentSpreads;\n    }\n}\nexports.GraphQLClientProject = GraphQLClientProject;\n//# sourceMappingURL=client.js.map"]},"metadata":{},"sourceType":"script"}