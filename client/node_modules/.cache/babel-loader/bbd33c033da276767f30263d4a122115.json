{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = _interopRequireDefault(require(\"util.promisify\"));\n\nvar _child_process = _interopRequireDefault(require(\"child_process\"));\n\nvar _util2 = require(\"./util\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst exec = (0, _util.default)(_child_process.default.exec);\n/**\n * Checks out a commit given its repo and hash.\n *\n * Returns void. Throws error on failure.\n */\n\nconst checkoutCommit = async (pathToRepo, hash, options = {\n  force: false\n}) => {\n  const resolvedPath = (0, _util2.resolveHome)(pathToRepo);\n\n  try {\n    (0, _util2.validatePath)(resolvedPath);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n\n  return exec(`git checkout ${hash} ${options.force ? \"--force\" : \"\"}`, {\n    cwd: resolvedPath\n  });\n};\n\nvar _default = checkoutCommit;\nexports.default = _default;","map":{"version":3,"sources":["../src/checkout_commit.ts"],"names":["exec","childProcess","checkoutCommit","options","force","resolvedPath","Promise","hash","cwd"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;;;;;;;AAEA,MAAMA,IAAI,GAAG,CAAA,GAAA,KAAA,CAAA,OAAA,EAAUC,cAAAA,CAAAA,OAAAA,CAAvB,IAAa,CAAb;AAMA;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG,OAAA,UAAA,EAAA,IAAA,EAGrBC,OAA+B,GAAG;EAAEC,KAAK,EAAE;AAAT,CAHb,KAIlB;EACH,MAAMC,YAAY,GAAG,CAAA,GAAA,MAAA,CAAA,WAAA,EAArB,UAAqB,CAArB;;EAEA,IAAI;IACF,CAAA,GAAA,MAAA,CAAA,YAAA,EAAA,YAAA;EADF,CAAA,CAEE,OAAA,CAAA,EAAU;IACV,OAAOC,OAAO,CAAPA,MAAAA,CAAP,CAAOA,CAAP;EACD;;EAED,OAAON,IAAI,CAAE,gBAAeO,IAAK,IAAGJ,OAAO,CAAPA,KAAAA,GAAAA,SAAAA,GAA4B,EAArD,EAAA,EAA2D;IACpEK,GAAG,EAAEH;EAD+D,CAA3D,CAAX;AAbF,CAAA;;eAkBeH,c","sourcesContent":["import promisify from \"util.promisify\";\nimport childProcess from \"child_process\";\nimport { validatePath, resolveHome } from \"./util\";\n\nconst exec = promisify(childProcess.exec);\n\nexport interface CheckoutCommmitOptions {\n  force?: boolean | undefined;\n}\n\n/**\n * Checks out a commit given its repo and hash.\n *\n * Returns void. Throws error on failure.\n */\nconst checkoutCommit = async (\n  pathToRepo: string,\n  hash: string,\n  options: CheckoutCommmitOptions = { force: false }\n) => {\n  const resolvedPath = resolveHome(pathToRepo);\n\n  try {\n    validatePath(resolvedPath);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n\n  return exec(`git checkout ${hash} ${options.force ? \"--force\" : \"\"}`, {\n    cwd: resolvedPath,\n  });\n};\n\nexport default checkoutCommit;\n"]},"metadata":{},"sourceType":"script"}