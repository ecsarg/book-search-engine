{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyFieldsMissingExternal = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst apollo_graphql_1 = require(\"apollo-graphql\");\n\nconst directives_1 = __importDefault(require(\"../../../directives\"));\n\nconst utils_1 = require(\"../../utils\");\n\nconst utilities_1 = require(\"../../../utilities\");\n\nconst keyFieldsMissingExternal = ({\n  name: serviceName,\n  typeDefs\n}) => {\n  const errors = [];\n  let keyDirectiveInfoOnTypeExtensions = [];\n  graphql_1.visit(typeDefs, {\n    ObjectTypeExtension(node) {\n      const keyDirectivesOnTypeExtension = utils_1.findDirectivesOnNode(node, 'key');\n      const keyDirectivesInfo = keyDirectivesOnTypeExtension.map(keyDirective => keyDirective.arguments && utils_1.isStringValueNode(keyDirective.arguments[0].value) ? {\n        typeName: node.name.value,\n        keyArgument: keyDirective.arguments[0].value.value\n      } : null).filter(utilities_1.isNotNullOrUndefined);\n      keyDirectiveInfoOnTypeExtensions.push(...keyDirectivesInfo);\n    }\n\n  });\n  let schema = new graphql_1.GraphQLSchema({\n    query: undefined,\n    directives: [...graphql_1.specifiedDirectives, ...directives_1.default]\n  });\n\n  try {\n    schema = apollo_graphql_1.buildSchemaFromSDL(typeDefs, schema);\n  } catch (e) {\n    errors.push(e);\n    return errors;\n  }\n\n  const typeInfo = new graphql_1.TypeInfo(schema);\n\n  for (const {\n    typeName,\n    keyArgument\n  } of keyDirectiveInfoOnTypeExtensions) {\n    const keyDirectiveSelectionSet = graphql_1.parse(`fragment __generated on ${typeName} { ${keyArgument} }`);\n    graphql_1.visit(keyDirectiveSelectionSet, graphql_1.visitWithTypeInfo(typeInfo, {\n      Field(node) {\n        var _a;\n\n        const fieldDef = typeInfo.getFieldDef();\n        const parentType = typeInfo.getParentType();\n\n        if (parentType) {\n          if (!fieldDef) {\n            errors.push(utils_1.errorWithCode('KEY_FIELDS_MISSING_EXTERNAL', utils_1.logServiceAndType(serviceName, parentType.name) + `A @key directive specifies a field which is not found in this service. Add a field to this type with @external.`, node));\n            return;\n          }\n\n          const externalDirectivesOnField = utils_1.findDirectivesOnNode(fieldDef.astNode, 'external');\n\n          if (externalDirectivesOnField.length === 0) {\n            errors.push(utils_1.errorWithCode('KEY_FIELDS_MISSING_EXTERNAL', utils_1.logServiceAndType(serviceName, parentType.name) + `A @key directive specifies the \\`${fieldDef.name}\\` field which has no matching @external field.`, (_a = fieldDef.astNode) !== null && _a !== void 0 ? _a : undefined));\n          }\n        }\n      }\n\n    }));\n  }\n\n  return errors;\n};\n\nexports.keyFieldsMissingExternal = keyFieldsMissingExternal;","map":{"version":3,"sources":["../../../../src/composition/validate/preComposition/keyFieldsMissingExternal.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keyFieldsMissingExternal = void 0;\nconst graphql_1 = require(\"graphql\");\nconst apollo_graphql_1 = require(\"apollo-graphql\");\nconst directives_1 = __importDefault(require(\"../../../directives\"));\nconst utils_1 = require(\"../../utils\");\nconst utilities_1 = require(\"../../../utilities\");\nconst keyFieldsMissingExternal = ({ name: serviceName, typeDefs, }) => {\n    const errors = [];\n    let keyDirectiveInfoOnTypeExtensions = [];\n    graphql_1.visit(typeDefs, {\n        ObjectTypeExtension(node) {\n            const keyDirectivesOnTypeExtension = utils_1.findDirectivesOnNode(node, 'key');\n            const keyDirectivesInfo = keyDirectivesOnTypeExtension\n                .map(keyDirective => keyDirective.arguments &&\n                utils_1.isStringValueNode(keyDirective.arguments[0].value)\n                ? {\n                    typeName: node.name.value,\n                    keyArgument: keyDirective.arguments[0].value.value,\n                }\n                : null)\n                .filter(utilities_1.isNotNullOrUndefined);\n            keyDirectiveInfoOnTypeExtensions.push(...keyDirectivesInfo);\n        },\n    });\n    let schema = new graphql_1.GraphQLSchema({\n        query: undefined,\n        directives: [...graphql_1.specifiedDirectives, ...directives_1.default],\n    });\n    try {\n        schema = apollo_graphql_1.buildSchemaFromSDL(typeDefs, schema);\n    }\n    catch (e) {\n        errors.push(e);\n        return errors;\n    }\n    const typeInfo = new graphql_1.TypeInfo(schema);\n    for (const { typeName, keyArgument } of keyDirectiveInfoOnTypeExtensions) {\n        const keyDirectiveSelectionSet = graphql_1.parse(`fragment __generated on ${typeName} { ${keyArgument} }`);\n        graphql_1.visit(keyDirectiveSelectionSet, graphql_1.visitWithTypeInfo(typeInfo, {\n            Field(node) {\n                var _a;\n                const fieldDef = typeInfo.getFieldDef();\n                const parentType = typeInfo.getParentType();\n                if (parentType) {\n                    if (!fieldDef) {\n                        errors.push(utils_1.errorWithCode('KEY_FIELDS_MISSING_EXTERNAL', utils_1.logServiceAndType(serviceName, parentType.name) +\n                            `A @key directive specifies a field which is not found in this service. Add a field to this type with @external.`, node));\n                        return;\n                    }\n                    const externalDirectivesOnField = utils_1.findDirectivesOnNode(fieldDef.astNode, 'external');\n                    if (externalDirectivesOnField.length === 0) {\n                        errors.push(utils_1.errorWithCode('KEY_FIELDS_MISSING_EXTERNAL', utils_1.logServiceAndType(serviceName, parentType.name) +\n                            `A @key directive specifies the \\`${fieldDef.name}\\` field which has no matching @external field.`, (_a = fieldDef.astNode) !== null && _a !== void 0 ? _a : undefined));\n                    }\n                }\n            },\n        }));\n    }\n    return errors;\n};\nexports.keyFieldsMissingExternal = keyFieldsMissingExternal;\n//# sourceMappingURL=keyFieldsMissingExternal.js.map"]},"metadata":{},"sourceType":"script"}