{"ast":null,"code":"\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConnection = exports.combineFeatures = exports.combineLanguagesFeatures = exports.combineWorkspaceFeatures = exports.combineWindowFeatures = exports.combineClientFeatures = exports.combineTracerFeatures = exports.combineTelemetryFeatures = exports.combineConsoleFeatures = exports._LanguagesImpl = exports.BulkUnregistration = exports.BulkRegistration = exports.ErrorMessageTracker = exports.TextDocuments = void 0;\n\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\n\nconst Is = require(\"./utils/is\");\n\nconst UUID = require(\"./utils/uuid\");\n\nconst progress_1 = require(\"./progress\");\n\nconst configuration_1 = require(\"./configuration\");\n\nconst workspaceFolders_1 = require(\"./workspaceFolders\");\n\nconst callHierarchy_1 = require(\"./callHierarchy\");\n\nconst semanticTokens_1 = require(\"./semanticTokens\");\n\nconst showDocument_1 = require(\"./showDocument\");\n\nconst fileOperations_1 = require(\"./fileOperations\");\n\nconst linkedEditingRange_1 = require(\"./linkedEditingRange\");\n\nconst moniker_1 = require(\"./moniker\");\n\nfunction null2Undefined(value) {\n  if (value === null) {\n    return undefined;\n  }\n\n  return value;\n}\n/**\n * A manager for simple text documents\n */\n\n\nclass TextDocuments {\n  /**\n   * Create a new text document manager.\n   */\n  constructor(configuration) {\n    this._documents = Object.create(null);\n    this._configuration = configuration;\n    this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();\n    this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();\n    this._onDidClose = new vscode_languageserver_protocol_1.Emitter();\n    this._onDidSave = new vscode_languageserver_protocol_1.Emitter();\n    this._onWillSave = new vscode_languageserver_protocol_1.Emitter();\n  }\n  /**\n   * An event that fires when a text document managed by this manager\n   * has been opened or the content changes.\n   */\n\n\n  get onDidChangeContent() {\n    return this._onDidChangeContent.event;\n  }\n  /**\n   * An event that fires when a text document managed by this manager\n   * has been opened.\n   */\n\n\n  get onDidOpen() {\n    return this._onDidOpen.event;\n  }\n  /**\n   * An event that fires when a text document managed by this manager\n   * will be saved.\n   */\n\n\n  get onWillSave() {\n    return this._onWillSave.event;\n  }\n  /**\n   * Sets a handler that will be called if a participant wants to provide\n   * edits during a text document save.\n   */\n\n\n  onWillSaveWaitUntil(handler) {\n    this._willSaveWaitUntil = handler;\n  }\n  /**\n   * An event that fires when a text document managed by this manager\n   * has been saved.\n   */\n\n\n  get onDidSave() {\n    return this._onDidSave.event;\n  }\n  /**\n   * An event that fires when a text document managed by this manager\n   * has been closed.\n   */\n\n\n  get onDidClose() {\n    return this._onDidClose.event;\n  }\n  /**\n   * Returns the document for the given URI. Returns undefined if\n   * the document is not managed by this instance.\n   *\n   * @param uri The text document's URI to retrieve.\n   * @return the text document or `undefined`.\n   */\n\n\n  get(uri) {\n    return this._documents[uri];\n  }\n  /**\n   * Returns all text documents managed by this instance.\n   *\n   * @return all text documents.\n   */\n\n\n  all() {\n    return Object.keys(this._documents).map(key => this._documents[key]);\n  }\n  /**\n   * Returns the URIs of all text documents managed by this instance.\n   *\n   * @return the URI's of all text documents.\n   */\n\n\n  keys() {\n    return Object.keys(this._documents);\n  }\n  /**\n   * Listens for `low level` notification on the given connection to\n   * update the text documents managed by this instance.\n   *\n   * Please note that the connection only provides handlers not an event model. Therefore\n   * listening on a connection will overwrite the following handlers on a connection:\n   * `onDidOpenTextDocument`, `onDidChangeTextDocument`, `onDidCloseTextDocument`,\n   * `onWillSaveTextDocument`, `onWillSaveTextDocumentWaitUntil` and `onDidSaveTextDocument`.\n   *\n   * Use the corresponding events on the TextDocuments instance instead.\n   *\n   * @param connection The connection to listen on.\n   */\n\n\n  listen(connection) {\n    connection.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;\n    connection.onDidOpenTextDocument(event => {\n      let td = event.textDocument;\n\n      let document = this._configuration.create(td.uri, td.languageId, td.version, td.text);\n\n      this._documents[td.uri] = document;\n      let toFire = Object.freeze({\n        document\n      });\n\n      this._onDidOpen.fire(toFire);\n\n      this._onDidChangeContent.fire(toFire);\n    });\n    connection.onDidChangeTextDocument(event => {\n      let td = event.textDocument;\n      let changes = event.contentChanges;\n\n      if (changes.length === 0) {\n        return;\n      }\n\n      let document = this._documents[td.uri];\n      const {\n        version\n      } = td;\n\n      if (version === null || version === undefined) {\n        throw new Error(`Received document change event for ${td.uri} without valid version identifier`);\n      }\n\n      document = this._configuration.update(document, changes, version);\n      this._documents[td.uri] = document;\n\n      this._onDidChangeContent.fire(Object.freeze({\n        document\n      }));\n    });\n    connection.onDidCloseTextDocument(event => {\n      let document = this._documents[event.textDocument.uri];\n\n      if (document) {\n        delete this._documents[event.textDocument.uri];\n\n        this._onDidClose.fire(Object.freeze({\n          document\n        }));\n      }\n    });\n    connection.onWillSaveTextDocument(event => {\n      let document = this._documents[event.textDocument.uri];\n\n      if (document) {\n        this._onWillSave.fire(Object.freeze({\n          document,\n          reason: event.reason\n        }));\n      }\n    });\n    connection.onWillSaveTextDocumentWaitUntil((event, token) => {\n      let document = this._documents[event.textDocument.uri];\n\n      if (document && this._willSaveWaitUntil) {\n        return this._willSaveWaitUntil(Object.freeze({\n          document,\n          reason: event.reason\n        }), token);\n      } else {\n        return [];\n      }\n    });\n    connection.onDidSaveTextDocument(event => {\n      let document = this._documents[event.textDocument.uri];\n\n      if (document) {\n        this._onDidSave.fire(Object.freeze({\n          document\n        }));\n      }\n    });\n  }\n\n}\n\nexports.TextDocuments = TextDocuments;\n/**\n * Helps tracking error message. Equal occurrences of the same\n * message are only stored once. This class is for example\n * useful if text documents are validated in a loop and equal\n * error message should be folded into one.\n */\n\nclass ErrorMessageTracker {\n  constructor() {\n    this._messages = Object.create(null);\n  }\n  /**\n   * Add a message to the tracker.\n   *\n   * @param message The message to add.\n   */\n\n\n  add(message) {\n    let count = this._messages[message];\n\n    if (!count) {\n      count = 0;\n    }\n\n    count++;\n    this._messages[message] = count;\n  }\n  /**\n   * Send all tracked messages to the connection's window.\n   *\n   * @param connection The connection established between client and server.\n   */\n\n\n  sendErrors(connection) {\n    Object.keys(this._messages).forEach(message => {\n      connection.window.showErrorMessage(message);\n    });\n  }\n\n}\n\nexports.ErrorMessageTracker = ErrorMessageTracker;\n\nclass RemoteConsoleImpl {\n  constructor() {}\n\n  rawAttach(connection) {\n    this._rawConnection = connection;\n  }\n\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  get connection() {\n    if (!this._connection) {\n      throw new Error('Remote is not attached to a connection yet.');\n    }\n\n    return this._connection;\n  }\n\n  fillServerCapabilities(_capabilities) {}\n\n  initialize(_capabilities) {}\n\n  error(message) {\n    this.send(vscode_languageserver_protocol_1.MessageType.Error, message);\n  }\n\n  warn(message) {\n    this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);\n  }\n\n  info(message) {\n    this.send(vscode_languageserver_protocol_1.MessageType.Info, message);\n  }\n\n  log(message) {\n    this.send(vscode_languageserver_protocol_1.MessageType.Log, message);\n  }\n\n  send(type, message) {\n    if (this._rawConnection) {\n      this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, {\n        type,\n        message\n      });\n    }\n  }\n\n}\n\nclass _RemoteWindowImpl {\n  constructor() {}\n\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  get connection() {\n    if (!this._connection) {\n      throw new Error('Remote is not attached to a connection yet.');\n    }\n\n    return this._connection;\n  }\n\n  initialize(_capabilities) {}\n\n  fillServerCapabilities(_capabilities) {}\n\n  showErrorMessage(message, ...actions) {\n    let params = {\n      type: vscode_languageserver_protocol_1.MessageType.Error,\n      message,\n      actions\n    };\n    return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\n  }\n\n  showWarningMessage(message, ...actions) {\n    let params = {\n      type: vscode_languageserver_protocol_1.MessageType.Warning,\n      message,\n      actions\n    };\n    return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\n  }\n\n  showInformationMessage(message, ...actions) {\n    let params = {\n      type: vscode_languageserver_protocol_1.MessageType.Info,\n      message,\n      actions\n    };\n    return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\n  }\n\n}\n\nconst RemoteWindowImpl = showDocument_1.ShowDocumentFeature(progress_1.ProgressFeature(_RemoteWindowImpl));\nvar BulkRegistration;\n\n(function (BulkRegistration) {\n  /**\n   * Creates a new bulk registration.\n   * @return an empty bulk registration.\n   */\n  function create() {\n    return new BulkRegistrationImpl();\n  }\n\n  BulkRegistration.create = create;\n})(BulkRegistration = exports.BulkRegistration || (exports.BulkRegistration = {}));\n\nclass BulkRegistrationImpl {\n  constructor() {\n    this._registrations = [];\n    this._registered = new Set();\n  }\n\n  add(type, registerOptions) {\n    const method = Is.string(type) ? type : type.method;\n\n    if (this._registered.has(method)) {\n      throw new Error(`${method} is already added to this registration`);\n    }\n\n    const id = UUID.generateUuid();\n\n    this._registrations.push({\n      id: id,\n      method: method,\n      registerOptions: registerOptions || {}\n    });\n\n    this._registered.add(method);\n  }\n\n  asRegistrationParams() {\n    return {\n      registrations: this._registrations\n    };\n  }\n\n}\n\nvar BulkUnregistration;\n\n(function (BulkUnregistration) {\n  function create() {\n    return new BulkUnregistrationImpl(undefined, []);\n  }\n\n  BulkUnregistration.create = create;\n})(BulkUnregistration = exports.BulkUnregistration || (exports.BulkUnregistration = {}));\n\nclass BulkUnregistrationImpl {\n  constructor(_connection, unregistrations) {\n    this._connection = _connection;\n    this._unregistrations = new Map();\n    unregistrations.forEach(unregistration => {\n      this._unregistrations.set(unregistration.method, unregistration);\n    });\n  }\n\n  get isAttached() {\n    return !!this._connection;\n  }\n\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  add(unregistration) {\n    this._unregistrations.set(unregistration.method, unregistration);\n  }\n\n  dispose() {\n    let unregistrations = [];\n\n    for (let unregistration of this._unregistrations.values()) {\n      unregistrations.push(unregistration);\n    }\n\n    let params = {\n      unregisterations: unregistrations\n    };\n\n    this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(undefined, _error => {\n      this._connection.console.info(`Bulk unregistration failed.`);\n    });\n  }\n\n  disposeSingle(arg) {\n    const method = Is.string(arg) ? arg : arg.method;\n\n    const unregistration = this._unregistrations.get(method);\n\n    if (!unregistration) {\n      return false;\n    }\n\n    let params = {\n      unregisterations: [unregistration]\n    };\n\n    this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(() => {\n      this._unregistrations.delete(method);\n    }, _error => {\n      this._connection.console.info(`Un-registering request handler for ${unregistration.id} failed.`);\n    });\n\n    return true;\n  }\n\n}\n\nclass RemoteClientImpl {\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  get connection() {\n    if (!this._connection) {\n      throw new Error('Remote is not attached to a connection yet.');\n    }\n\n    return this._connection;\n  }\n\n  initialize(_capabilities) {}\n\n  fillServerCapabilities(_capabilities) {}\n\n  register(typeOrRegistrations, registerOptionsOrType, registerOptions) {\n    if (typeOrRegistrations instanceof BulkRegistrationImpl) {\n      return this.registerMany(typeOrRegistrations);\n    } else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {\n      return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);\n    } else {\n      return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);\n    }\n  }\n\n  registerSingle1(unregistration, type, registerOptions) {\n    const method = Is.string(type) ? type : type.method;\n    const id = UUID.generateUuid();\n    let params = {\n      registrations: [{\n        id,\n        method,\n        registerOptions: registerOptions || {}\n      }]\n    };\n\n    if (!unregistration.isAttached) {\n      unregistration.attach(this.connection);\n    }\n\n    return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(_result => {\n      unregistration.add({\n        id: id,\n        method: method\n      });\n      return unregistration;\n    }, _error => {\n      this.connection.console.info(`Registering request handler for ${method} failed.`);\n      return Promise.reject(_error);\n    });\n  }\n\n  registerSingle2(type, registerOptions) {\n    const method = Is.string(type) ? type : type.method;\n    const id = UUID.generateUuid();\n    let params = {\n      registrations: [{\n        id,\n        method,\n        registerOptions: registerOptions || {}\n      }]\n    };\n    return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(_result => {\n      return vscode_languageserver_protocol_1.Disposable.create(() => {\n        this.unregisterSingle(id, method);\n      });\n    }, _error => {\n      this.connection.console.info(`Registering request handler for ${method} failed.`);\n      return Promise.reject(_error);\n    });\n  }\n\n  unregisterSingle(id, method) {\n    let params = {\n      unregisterations: [{\n        id,\n        method\n      }]\n    };\n    return this.connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(undefined, _error => {\n      this.connection.console.info(`Un-registering request handler for ${id} failed.`);\n    });\n  }\n\n  registerMany(registrations) {\n    let params = registrations.asRegistrationParams();\n    return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(() => {\n      return new BulkUnregistrationImpl(this._connection, params.registrations.map(registration => {\n        return {\n          id: registration.id,\n          method: registration.method\n        };\n      }));\n    }, _error => {\n      this.connection.console.info(`Bulk registration failed.`);\n      return Promise.reject(_error);\n    });\n  }\n\n}\n\nclass _RemoteWorkspaceImpl {\n  constructor() {}\n\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  get connection() {\n    if (!this._connection) {\n      throw new Error('Remote is not attached to a connection yet.');\n    }\n\n    return this._connection;\n  }\n\n  initialize(_capabilities) {}\n\n  fillServerCapabilities(_capabilities) {}\n\n  applyEdit(paramOrEdit) {\n    function isApplyWorkspaceEditParams(value) {\n      return value && !!value.edit;\n    }\n\n    let params = isApplyWorkspaceEditParams(paramOrEdit) ? paramOrEdit : {\n      edit: paramOrEdit\n    };\n    return this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);\n  }\n\n}\n\nconst RemoteWorkspaceImpl = fileOperations_1.FileOperationsFeature(workspaceFolders_1.WorkspaceFoldersFeature(configuration_1.ConfigurationFeature(_RemoteWorkspaceImpl)));\n\nclass TracerImpl {\n  constructor() {\n    this._trace = vscode_languageserver_protocol_1.Trace.Off;\n  }\n\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  get connection() {\n    if (!this._connection) {\n      throw new Error('Remote is not attached to a connection yet.');\n    }\n\n    return this._connection;\n  }\n\n  initialize(_capabilities) {}\n\n  fillServerCapabilities(_capabilities) {}\n\n  set trace(value) {\n    this._trace = value;\n  }\n\n  log(message, verbose) {\n    if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {\n      return;\n    }\n\n    this.connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {\n      message: message,\n      verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose : undefined\n    });\n  }\n\n}\n\nclass TelemetryImpl {\n  constructor() {}\n\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  get connection() {\n    if (!this._connection) {\n      throw new Error('Remote is not attached to a connection yet.');\n    }\n\n    return this._connection;\n  }\n\n  initialize(_capabilities) {}\n\n  fillServerCapabilities(_capabilities) {}\n\n  logEvent(data) {\n    this.connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data);\n  }\n\n}\n\nclass _LanguagesImpl {\n  constructor() {}\n\n  attach(connection) {\n    this._connection = connection;\n  }\n\n  get connection() {\n    if (!this._connection) {\n      throw new Error('Remote is not attached to a connection yet.');\n    }\n\n    return this._connection;\n  }\n\n  initialize(_capabilities) {}\n\n  fillServerCapabilities(_capabilities) {}\n\n  attachWorkDoneProgress(params) {\n    return progress_1.attachWorkDone(this.connection, params);\n  }\n\n  attachPartialResultProgress(_type, params) {\n    return progress_1.attachPartialResult(this.connection, params);\n  }\n\n}\n\nexports._LanguagesImpl = _LanguagesImpl;\nconst LanguagesImpl = moniker_1.MonikerFeature(linkedEditingRange_1.LinkedEditingRangeFeature(semanticTokens_1.SemanticTokensFeature(callHierarchy_1.CallHierarchyFeature(_LanguagesImpl))));\n\nfunction combineConsoleFeatures(one, two) {\n  return function (Base) {\n    return two(one(Base));\n  };\n}\n\nexports.combineConsoleFeatures = combineConsoleFeatures;\n\nfunction combineTelemetryFeatures(one, two) {\n  return function (Base) {\n    return two(one(Base));\n  };\n}\n\nexports.combineTelemetryFeatures = combineTelemetryFeatures;\n\nfunction combineTracerFeatures(one, two) {\n  return function (Base) {\n    return two(one(Base));\n  };\n}\n\nexports.combineTracerFeatures = combineTracerFeatures;\n\nfunction combineClientFeatures(one, two) {\n  return function (Base) {\n    return two(one(Base));\n  };\n}\n\nexports.combineClientFeatures = combineClientFeatures;\n\nfunction combineWindowFeatures(one, two) {\n  return function (Base) {\n    return two(one(Base));\n  };\n}\n\nexports.combineWindowFeatures = combineWindowFeatures;\n\nfunction combineWorkspaceFeatures(one, two) {\n  return function (Base) {\n    return two(one(Base));\n  };\n}\n\nexports.combineWorkspaceFeatures = combineWorkspaceFeatures;\n\nfunction combineLanguagesFeatures(one, two) {\n  return function (Base) {\n    return two(one(Base));\n  };\n}\n\nexports.combineLanguagesFeatures = combineLanguagesFeatures;\n\nfunction combineFeatures(one, two) {\n  function combine(one, two, func) {\n    if (one && two) {\n      return func(one, two);\n    } else if (one) {\n      return one;\n    } else {\n      return two;\n    }\n  }\n\n  let result = {\n    __brand: 'features',\n    console: combine(one.console, two.console, combineConsoleFeatures),\n    tracer: combine(one.tracer, two.tracer, combineTracerFeatures),\n    telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),\n    client: combine(one.client, two.client, combineClientFeatures),\n    window: combine(one.window, two.window, combineWindowFeatures),\n    workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures)\n  };\n  return result;\n}\n\nexports.combineFeatures = combineFeatures;\n\nfunction createConnection(connectionFactory, watchDog, factories) {\n  const logger = factories && factories.console ? new (factories.console(RemoteConsoleImpl))() : new RemoteConsoleImpl();\n  const connection = connectionFactory(logger);\n  logger.rawAttach(connection);\n  const tracer = factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl();\n  const telemetry = factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl();\n  const client = factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl();\n  const remoteWindow = factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl();\n  const workspace = factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl();\n  const languages = factories && factories.languages ? new (factories.languages(LanguagesImpl))() : new LanguagesImpl();\n  const allRemotes = [logger, tracer, telemetry, client, remoteWindow, workspace, languages];\n\n  function asPromise(value) {\n    if (value instanceof Promise) {\n      return value;\n    } else if (Is.thenable(value)) {\n      return new Promise((resolve, reject) => {\n        value.then(resolved => resolve(resolved), error => reject(error));\n      });\n    } else {\n      return Promise.resolve(value);\n    }\n  }\n\n  let shutdownHandler = undefined;\n  let initializeHandler = undefined;\n  let exitHandler = undefined;\n  let protocolConnection = {\n    listen: () => connection.listen(),\n    sendRequest: (type, ...params) => connection.sendRequest(Is.string(type) ? type : type.method, ...params),\n    onRequest: (type, handler) => connection.onRequest(type, handler),\n    sendNotification: (type, param) => {\n      const method = Is.string(type) ? type : type.method;\n\n      if (arguments.length === 1) {\n        connection.sendNotification(method);\n      } else {\n        connection.sendNotification(method, param);\n      }\n    },\n    onNotification: (type, handler) => connection.onNotification(type, handler),\n    onProgress: connection.onProgress,\n    sendProgress: connection.sendProgress,\n    onInitialize: handler => initializeHandler = handler,\n    onInitialized: handler => connection.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler),\n    onShutdown: handler => shutdownHandler = handler,\n    onExit: handler => exitHandler = handler,\n\n    get console() {\n      return logger;\n    },\n\n    get telemetry() {\n      return telemetry;\n    },\n\n    get tracer() {\n      return tracer;\n    },\n\n    get client() {\n      return client;\n    },\n\n    get window() {\n      return remoteWindow;\n    },\n\n    get workspace() {\n      return workspace;\n    },\n\n    get languages() {\n      return languages;\n    },\n\n    onDidChangeConfiguration: handler => connection.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler),\n    onDidChangeWatchedFiles: handler => connection.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler),\n    __textDocumentSync: undefined,\n    onDidOpenTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler),\n    onDidChangeTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler),\n    onDidCloseTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler),\n    onWillSaveTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler),\n    onWillSaveTextDocumentWaitUntil: handler => connection.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler),\n    onDidSaveTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler),\n    sendDiagnostics: params => connection.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params),\n    onHover: handler => connection.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);\n    }),\n    onCompletion: handler => connection.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onCompletionResolve: handler => connection.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler),\n    onSignatureHelp: handler => connection.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);\n    }),\n    onDeclaration: handler => connection.onRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onDefinition: handler => connection.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onTypeDefinition: handler => connection.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onImplementation: handler => connection.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onReferences: handler => connection.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onDocumentHighlight: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onDocumentSymbol: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onWorkspaceSymbol: handler => connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onCodeAction: handler => connection.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onCodeActionResolve: handler => connection.onRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, (params, cancel) => {\n      return handler(params, cancel);\n    }),\n    onCodeLens: handler => connection.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onCodeLensResolve: handler => connection.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, (params, cancel) => {\n      return handler(params, cancel);\n    }),\n    onDocumentFormatting: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);\n    }),\n    onDocumentRangeFormatting: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);\n    }),\n    onDocumentOnTypeFormatting: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, (params, cancel) => {\n      return handler(params, cancel);\n    }),\n    onRenameRequest: handler => connection.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);\n    }),\n    onPrepareRename: handler => connection.onRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, (params, cancel) => {\n      return handler(params, cancel);\n    }),\n    onDocumentLinks: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onDocumentLinkResolve: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, (params, cancel) => {\n      return handler(params, cancel);\n    }),\n    onDocumentColor: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onColorPresentation: handler => connection.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onFoldingRanges: handler => connection.onRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onSelectionRanges: handler => connection.onRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n    }),\n    onExecuteCommand: handler => connection.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, (params, cancel) => {\n      return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);\n    }),\n    dispose: () => connection.dispose()\n  };\n\n  for (let remote of allRemotes) {\n    remote.attach(protocolConnection);\n  }\n\n  connection.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, params => {\n    watchDog.initialize(params);\n\n    if (Is.string(params.trace)) {\n      tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);\n    }\n\n    for (let remote of allRemotes) {\n      remote.initialize(params.capabilities);\n    }\n\n    if (initializeHandler) {\n      let result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token, progress_1.attachWorkDone(connection, params), undefined);\n      return asPromise(result).then(value => {\n        if (value instanceof vscode_languageserver_protocol_1.ResponseError) {\n          return value;\n        }\n\n        let result = value;\n\n        if (!result) {\n          result = {\n            capabilities: {}\n          };\n        }\n\n        let capabilities = result.capabilities;\n\n        if (!capabilities) {\n          capabilities = {};\n          result.capabilities = capabilities;\n        }\n\n        if (capabilities.textDocumentSync === undefined || capabilities.textDocumentSync === null) {\n          capabilities.textDocumentSync = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n        } else if (!Is.number(capabilities.textDocumentSync) && !Is.number(capabilities.textDocumentSync.change)) {\n          capabilities.textDocumentSync.change = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n        }\n\n        for (let remote of allRemotes) {\n          remote.fillServerCapabilities(capabilities);\n        }\n\n        return result;\n      });\n    } else {\n      let result = {\n        capabilities: {\n          textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None\n        }\n      };\n\n      for (let remote of allRemotes) {\n        remote.fillServerCapabilities(result.capabilities);\n      }\n\n      return result;\n    }\n  });\n  connection.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, () => {\n    watchDog.shutdownReceived = true;\n\n    if (shutdownHandler) {\n      return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);\n    } else {\n      return undefined;\n    }\n  });\n  connection.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, () => {\n    try {\n      if (exitHandler) {\n        exitHandler();\n      }\n    } finally {\n      if (watchDog.shutdownReceived) {\n        watchDog.exit(0);\n      } else {\n        watchDog.exit(1);\n      }\n    }\n  });\n  connection.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, params => {\n    tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);\n  });\n  return protocolConnection;\n}\n\nexports.createConnection = createConnection;","map":{"version":3,"names":["Object","defineProperty","exports","value","createConnection","combineFeatures","combineLanguagesFeatures","combineWorkspaceFeatures","combineWindowFeatures","combineClientFeatures","combineTracerFeatures","combineTelemetryFeatures","combineConsoleFeatures","_LanguagesImpl","BulkUnregistration","BulkRegistration","ErrorMessageTracker","TextDocuments","vscode_languageserver_protocol_1","require","Is","UUID","progress_1","configuration_1","workspaceFolders_1","callHierarchy_1","semanticTokens_1","showDocument_1","fileOperations_1","linkedEditingRange_1","moniker_1","null2Undefined","undefined","constructor","configuration","_documents","create","_configuration","_onDidChangeContent","Emitter","_onDidOpen","_onDidClose","_onDidSave","_onWillSave","onDidChangeContent","event","onDidOpen","onWillSave","onWillSaveWaitUntil","handler","_willSaveWaitUntil","onDidSave","onDidClose","get","uri","all","keys","map","key","listen","connection","__textDocumentSync","TextDocumentSyncKind","Full","onDidOpenTextDocument","td","textDocument","document","languageId","version","text","toFire","freeze","fire","onDidChangeTextDocument","changes","contentChanges","length","Error","update","onDidCloseTextDocument","onWillSaveTextDocument","reason","onWillSaveTextDocumentWaitUntil","token","onDidSaveTextDocument","_messages","add","message","count","sendErrors","forEach","window","showErrorMessage","RemoteConsoleImpl","rawAttach","_rawConnection","attach","_connection","fillServerCapabilities","_capabilities","initialize","error","send","MessageType","warn","Warning","info","Info","log","Log","type","sendNotification","LogMessageNotification","_RemoteWindowImpl","actions","params","sendRequest","ShowMessageRequest","then","showWarningMessage","showInformationMessage","RemoteWindowImpl","ShowDocumentFeature","ProgressFeature","BulkRegistrationImpl","_registrations","_registered","Set","registerOptions","method","string","has","id","generateUuid","push","asRegistrationParams","registrations","BulkUnregistrationImpl","unregistrations","_unregistrations","Map","unregistration","set","isAttached","dispose","values","unregisterations","UnregistrationRequest","_error","console","disposeSingle","arg","delete","RemoteClientImpl","register","typeOrRegistrations","registerOptionsOrType","registerMany","registerSingle1","registerSingle2","RegistrationRequest","_result","Promise","reject","Disposable","unregisterSingle","registration","_RemoteWorkspaceImpl","applyEdit","paramOrEdit","isApplyWorkspaceEditParams","edit","ApplyWorkspaceEditRequest","RemoteWorkspaceImpl","FileOperationsFeature","WorkspaceFoldersFeature","ConfigurationFeature","TracerImpl","_trace","Trace","Off","trace","verbose","LogTraceNotification","Verbose","TelemetryImpl","logEvent","data","TelemetryEventNotification","attachWorkDoneProgress","attachWorkDone","attachPartialResultProgress","_type","attachPartialResult","LanguagesImpl","MonikerFeature","LinkedEditingRangeFeature","SemanticTokensFeature","CallHierarchyFeature","one","two","Base","combine","func","result","__brand","tracer","telemetry","client","workspace","connectionFactory","watchDog","factories","logger","remoteWindow","languages","allRemotes","asPromise","thenable","resolve","resolved","shutdownHandler","initializeHandler","exitHandler","protocolConnection","onRequest","param","arguments","onNotification","onProgress","sendProgress","onInitialize","onInitialized","InitializedNotification","onShutdown","onExit","onDidChangeConfiguration","DidChangeConfigurationNotification","onDidChangeWatchedFiles","DidChangeWatchedFilesNotification","DidOpenTextDocumentNotification","DidChangeTextDocumentNotification","DidCloseTextDocumentNotification","WillSaveTextDocumentNotification","WillSaveTextDocumentWaitUntilRequest","DidSaveTextDocumentNotification","sendDiagnostics","PublishDiagnosticsNotification","onHover","HoverRequest","cancel","onCompletion","CompletionRequest","onCompletionResolve","CompletionResolveRequest","onSignatureHelp","SignatureHelpRequest","onDeclaration","DeclarationRequest","onDefinition","DefinitionRequest","onTypeDefinition","TypeDefinitionRequest","onImplementation","ImplementationRequest","onReferences","ReferencesRequest","onDocumentHighlight","DocumentHighlightRequest","onDocumentSymbol","DocumentSymbolRequest","onWorkspaceSymbol","WorkspaceSymbolRequest","onCodeAction","CodeActionRequest","onCodeActionResolve","CodeActionResolveRequest","onCodeLens","CodeLensRequest","onCodeLensResolve","CodeLensResolveRequest","onDocumentFormatting","DocumentFormattingRequest","onDocumentRangeFormatting","DocumentRangeFormattingRequest","onDocumentOnTypeFormatting","DocumentOnTypeFormattingRequest","onRenameRequest","RenameRequest","onPrepareRename","PrepareRenameRequest","onDocumentLinks","DocumentLinkRequest","onDocumentLinkResolve","DocumentLinkResolveRequest","onDocumentColor","DocumentColorRequest","onColorPresentation","ColorPresentationRequest","onFoldingRanges","FoldingRangeRequest","onSelectionRanges","SelectionRangeRequest","onExecuteCommand","ExecuteCommandRequest","remote","InitializeRequest","fromString","capabilities","CancellationTokenSource","ResponseError","textDocumentSync","number","None","change","ShutdownRequest","shutdownReceived","ExitNotification","exit","SetTraceNotification"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/vscode-languageserver/lib/common/server.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createConnection = exports.combineFeatures = exports.combineLanguagesFeatures = exports.combineWorkspaceFeatures = exports.combineWindowFeatures = exports.combineClientFeatures = exports.combineTracerFeatures = exports.combineTelemetryFeatures = exports.combineConsoleFeatures = exports._LanguagesImpl = exports.BulkUnregistration = exports.BulkRegistration = exports.ErrorMessageTracker = exports.TextDocuments = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst Is = require(\"./utils/is\");\nconst UUID = require(\"./utils/uuid\");\nconst progress_1 = require(\"./progress\");\nconst configuration_1 = require(\"./configuration\");\nconst workspaceFolders_1 = require(\"./workspaceFolders\");\nconst callHierarchy_1 = require(\"./callHierarchy\");\nconst semanticTokens_1 = require(\"./semanticTokens\");\nconst showDocument_1 = require(\"./showDocument\");\nconst fileOperations_1 = require(\"./fileOperations\");\nconst linkedEditingRange_1 = require(\"./linkedEditingRange\");\nconst moniker_1 = require(\"./moniker\");\nfunction null2Undefined(value) {\n    if (value === null) {\n        return undefined;\n    }\n    return value;\n}\n/**\n * A manager for simple text documents\n */\nclass TextDocuments {\n    /**\n     * Create a new text document manager.\n     */\n    constructor(configuration) {\n        this._documents = Object.create(null);\n        this._configuration = configuration;\n        this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();\n        this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();\n        this._onDidClose = new vscode_languageserver_protocol_1.Emitter();\n        this._onDidSave = new vscode_languageserver_protocol_1.Emitter();\n        this._onWillSave = new vscode_languageserver_protocol_1.Emitter();\n    }\n    /**\n     * An event that fires when a text document managed by this manager\n     * has been opened or the content changes.\n     */\n    get onDidChangeContent() {\n        return this._onDidChangeContent.event;\n    }\n    /**\n     * An event that fires when a text document managed by this manager\n     * has been opened.\n     */\n    get onDidOpen() {\n        return this._onDidOpen.event;\n    }\n    /**\n     * An event that fires when a text document managed by this manager\n     * will be saved.\n     */\n    get onWillSave() {\n        return this._onWillSave.event;\n    }\n    /**\n     * Sets a handler that will be called if a participant wants to provide\n     * edits during a text document save.\n     */\n    onWillSaveWaitUntil(handler) {\n        this._willSaveWaitUntil = handler;\n    }\n    /**\n     * An event that fires when a text document managed by this manager\n     * has been saved.\n     */\n    get onDidSave() {\n        return this._onDidSave.event;\n    }\n    /**\n     * An event that fires when a text document managed by this manager\n     * has been closed.\n     */\n    get onDidClose() {\n        return this._onDidClose.event;\n    }\n    /**\n     * Returns the document for the given URI. Returns undefined if\n     * the document is not managed by this instance.\n     *\n     * @param uri The text document's URI to retrieve.\n     * @return the text document or `undefined`.\n     */\n    get(uri) {\n        return this._documents[uri];\n    }\n    /**\n     * Returns all text documents managed by this instance.\n     *\n     * @return all text documents.\n     */\n    all() {\n        return Object.keys(this._documents).map(key => this._documents[key]);\n    }\n    /**\n     * Returns the URIs of all text documents managed by this instance.\n     *\n     * @return the URI's of all text documents.\n     */\n    keys() {\n        return Object.keys(this._documents);\n    }\n    /**\n     * Listens for `low level` notification on the given connection to\n     * update the text documents managed by this instance.\n     *\n     * Please note that the connection only provides handlers not an event model. Therefore\n     * listening on a connection will overwrite the following handlers on a connection:\n     * `onDidOpenTextDocument`, `onDidChangeTextDocument`, `onDidCloseTextDocument`,\n     * `onWillSaveTextDocument`, `onWillSaveTextDocumentWaitUntil` and `onDidSaveTextDocument`.\n     *\n     * Use the corresponding events on the TextDocuments instance instead.\n     *\n     * @param connection The connection to listen on.\n     */\n    listen(connection) {\n        connection.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;\n        connection.onDidOpenTextDocument((event) => {\n            let td = event.textDocument;\n            let document = this._configuration.create(td.uri, td.languageId, td.version, td.text);\n            this._documents[td.uri] = document;\n            let toFire = Object.freeze({ document });\n            this._onDidOpen.fire(toFire);\n            this._onDidChangeContent.fire(toFire);\n        });\n        connection.onDidChangeTextDocument((event) => {\n            let td = event.textDocument;\n            let changes = event.contentChanges;\n            if (changes.length === 0) {\n                return;\n            }\n            let document = this._documents[td.uri];\n            const { version } = td;\n            if (version === null || version === undefined) {\n                throw new Error(`Received document change event for ${td.uri} without valid version identifier`);\n            }\n            document = this._configuration.update(document, changes, version);\n            this._documents[td.uri] = document;\n            this._onDidChangeContent.fire(Object.freeze({ document }));\n        });\n        connection.onDidCloseTextDocument((event) => {\n            let document = this._documents[event.textDocument.uri];\n            if (document) {\n                delete this._documents[event.textDocument.uri];\n                this._onDidClose.fire(Object.freeze({ document }));\n            }\n        });\n        connection.onWillSaveTextDocument((event) => {\n            let document = this._documents[event.textDocument.uri];\n            if (document) {\n                this._onWillSave.fire(Object.freeze({ document, reason: event.reason }));\n            }\n        });\n        connection.onWillSaveTextDocumentWaitUntil((event, token) => {\n            let document = this._documents[event.textDocument.uri];\n            if (document && this._willSaveWaitUntil) {\n                return this._willSaveWaitUntil(Object.freeze({ document, reason: event.reason }), token);\n            }\n            else {\n                return [];\n            }\n        });\n        connection.onDidSaveTextDocument((event) => {\n            let document = this._documents[event.textDocument.uri];\n            if (document) {\n                this._onDidSave.fire(Object.freeze({ document }));\n            }\n        });\n    }\n}\nexports.TextDocuments = TextDocuments;\n/**\n * Helps tracking error message. Equal occurrences of the same\n * message are only stored once. This class is for example\n * useful if text documents are validated in a loop and equal\n * error message should be folded into one.\n */\nclass ErrorMessageTracker {\n    constructor() {\n        this._messages = Object.create(null);\n    }\n    /**\n     * Add a message to the tracker.\n     *\n     * @param message The message to add.\n     */\n    add(message) {\n        let count = this._messages[message];\n        if (!count) {\n            count = 0;\n        }\n        count++;\n        this._messages[message] = count;\n    }\n    /**\n     * Send all tracked messages to the connection's window.\n     *\n     * @param connection The connection established between client and server.\n     */\n    sendErrors(connection) {\n        Object.keys(this._messages).forEach(message => {\n            connection.window.showErrorMessage(message);\n        });\n    }\n}\nexports.ErrorMessageTracker = ErrorMessageTracker;\nclass RemoteConsoleImpl {\n    constructor() {\n    }\n    rawAttach(connection) {\n        this._rawConnection = connection;\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    initialize(_capabilities) {\n    }\n    error(message) {\n        this.send(vscode_languageserver_protocol_1.MessageType.Error, message);\n    }\n    warn(message) {\n        this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);\n    }\n    info(message) {\n        this.send(vscode_languageserver_protocol_1.MessageType.Info, message);\n    }\n    log(message) {\n        this.send(vscode_languageserver_protocol_1.MessageType.Log, message);\n    }\n    send(type, message) {\n        if (this._rawConnection) {\n            this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, { type, message });\n        }\n    }\n}\nclass _RemoteWindowImpl {\n    constructor() {\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    initialize(_capabilities) {\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    showErrorMessage(message, ...actions) {\n        let params = { type: vscode_languageserver_protocol_1.MessageType.Error, message, actions };\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\n    }\n    showWarningMessage(message, ...actions) {\n        let params = { type: vscode_languageserver_protocol_1.MessageType.Warning, message, actions };\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\n    }\n    showInformationMessage(message, ...actions) {\n        let params = { type: vscode_languageserver_protocol_1.MessageType.Info, message, actions };\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\n    }\n}\nconst RemoteWindowImpl = showDocument_1.ShowDocumentFeature(progress_1.ProgressFeature(_RemoteWindowImpl));\nvar BulkRegistration;\n(function (BulkRegistration) {\n    /**\n     * Creates a new bulk registration.\n     * @return an empty bulk registration.\n     */\n    function create() {\n        return new BulkRegistrationImpl();\n    }\n    BulkRegistration.create = create;\n})(BulkRegistration = exports.BulkRegistration || (exports.BulkRegistration = {}));\nclass BulkRegistrationImpl {\n    constructor() {\n        this._registrations = [];\n        this._registered = new Set();\n    }\n    add(type, registerOptions) {\n        const method = Is.string(type) ? type : type.method;\n        if (this._registered.has(method)) {\n            throw new Error(`${method} is already added to this registration`);\n        }\n        const id = UUID.generateUuid();\n        this._registrations.push({\n            id: id,\n            method: method,\n            registerOptions: registerOptions || {}\n        });\n        this._registered.add(method);\n    }\n    asRegistrationParams() {\n        return {\n            registrations: this._registrations\n        };\n    }\n}\nvar BulkUnregistration;\n(function (BulkUnregistration) {\n    function create() {\n        return new BulkUnregistrationImpl(undefined, []);\n    }\n    BulkUnregistration.create = create;\n})(BulkUnregistration = exports.BulkUnregistration || (exports.BulkUnregistration = {}));\nclass BulkUnregistrationImpl {\n    constructor(_connection, unregistrations) {\n        this._connection = _connection;\n        this._unregistrations = new Map();\n        unregistrations.forEach(unregistration => {\n            this._unregistrations.set(unregistration.method, unregistration);\n        });\n    }\n    get isAttached() {\n        return !!this._connection;\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    add(unregistration) {\n        this._unregistrations.set(unregistration.method, unregistration);\n    }\n    dispose() {\n        let unregistrations = [];\n        for (let unregistration of this._unregistrations.values()) {\n            unregistrations.push(unregistration);\n        }\n        let params = {\n            unregisterations: unregistrations\n        };\n        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(undefined, (_error) => {\n            this._connection.console.info(`Bulk unregistration failed.`);\n        });\n    }\n    disposeSingle(arg) {\n        const method = Is.string(arg) ? arg : arg.method;\n        const unregistration = this._unregistrations.get(method);\n        if (!unregistration) {\n            return false;\n        }\n        let params = {\n            unregisterations: [unregistration]\n        };\n        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(() => {\n            this._unregistrations.delete(method);\n        }, (_error) => {\n            this._connection.console.info(`Un-registering request handler for ${unregistration.id} failed.`);\n        });\n        return true;\n    }\n}\nclass RemoteClientImpl {\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    initialize(_capabilities) {\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    register(typeOrRegistrations, registerOptionsOrType, registerOptions) {\n        if (typeOrRegistrations instanceof BulkRegistrationImpl) {\n            return this.registerMany(typeOrRegistrations);\n        }\n        else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {\n            return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);\n        }\n        else {\n            return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);\n        }\n    }\n    registerSingle1(unregistration, type, registerOptions) {\n        const method = Is.string(type) ? type : type.method;\n        const id = UUID.generateUuid();\n        let params = {\n            registrations: [{ id, method, registerOptions: registerOptions || {} }]\n        };\n        if (!unregistration.isAttached) {\n            unregistration.attach(this.connection);\n        }\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {\n            unregistration.add({ id: id, method: method });\n            return unregistration;\n        }, (_error) => {\n            this.connection.console.info(`Registering request handler for ${method} failed.`);\n            return Promise.reject(_error);\n        });\n    }\n    registerSingle2(type, registerOptions) {\n        const method = Is.string(type) ? type : type.method;\n        const id = UUID.generateUuid();\n        let params = {\n            registrations: [{ id, method, registerOptions: registerOptions || {} }]\n        };\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {\n            return vscode_languageserver_protocol_1.Disposable.create(() => {\n                this.unregisterSingle(id, method);\n            });\n        }, (_error) => {\n            this.connection.console.info(`Registering request handler for ${method} failed.`);\n            return Promise.reject(_error);\n        });\n    }\n    unregisterSingle(id, method) {\n        let params = {\n            unregisterations: [{ id, method }]\n        };\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(undefined, (_error) => {\n            this.connection.console.info(`Un-registering request handler for ${id} failed.`);\n        });\n    }\n    registerMany(registrations) {\n        let params = registrations.asRegistrationParams();\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(() => {\n            return new BulkUnregistrationImpl(this._connection, params.registrations.map(registration => { return { id: registration.id, method: registration.method }; }));\n        }, (_error) => {\n            this.connection.console.info(`Bulk registration failed.`);\n            return Promise.reject(_error);\n        });\n    }\n}\nclass _RemoteWorkspaceImpl {\n    constructor() {\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    initialize(_capabilities) {\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    applyEdit(paramOrEdit) {\n        function isApplyWorkspaceEditParams(value) {\n            return value && !!value.edit;\n        }\n        let params = isApplyWorkspaceEditParams(paramOrEdit) ? paramOrEdit : { edit: paramOrEdit };\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);\n    }\n}\nconst RemoteWorkspaceImpl = fileOperations_1.FileOperationsFeature(workspaceFolders_1.WorkspaceFoldersFeature(configuration_1.ConfigurationFeature(_RemoteWorkspaceImpl)));\nclass TracerImpl {\n    constructor() {\n        this._trace = vscode_languageserver_protocol_1.Trace.Off;\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    initialize(_capabilities) {\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    set trace(value) {\n        this._trace = value;\n    }\n    log(message, verbose) {\n        if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {\n            return;\n        }\n        this.connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {\n            message: message,\n            verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose : undefined\n        });\n    }\n}\nclass TelemetryImpl {\n    constructor() {\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    initialize(_capabilities) {\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    logEvent(data) {\n        this.connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data);\n    }\n}\nclass _LanguagesImpl {\n    constructor() {\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    initialize(_capabilities) {\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    attachWorkDoneProgress(params) {\n        return progress_1.attachWorkDone(this.connection, params);\n    }\n    attachPartialResultProgress(_type, params) {\n        return progress_1.attachPartialResult(this.connection, params);\n    }\n}\nexports._LanguagesImpl = _LanguagesImpl;\nconst LanguagesImpl = moniker_1.MonikerFeature(linkedEditingRange_1.LinkedEditingRangeFeature(semanticTokens_1.SemanticTokensFeature(callHierarchy_1.CallHierarchyFeature(_LanguagesImpl))));\nfunction combineConsoleFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineConsoleFeatures = combineConsoleFeatures;\nfunction combineTelemetryFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineTelemetryFeatures = combineTelemetryFeatures;\nfunction combineTracerFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineTracerFeatures = combineTracerFeatures;\nfunction combineClientFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineClientFeatures = combineClientFeatures;\nfunction combineWindowFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineWindowFeatures = combineWindowFeatures;\nfunction combineWorkspaceFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineWorkspaceFeatures = combineWorkspaceFeatures;\nfunction combineLanguagesFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineLanguagesFeatures = combineLanguagesFeatures;\nfunction combineFeatures(one, two) {\n    function combine(one, two, func) {\n        if (one && two) {\n            return func(one, two);\n        }\n        else if (one) {\n            return one;\n        }\n        else {\n            return two;\n        }\n    }\n    let result = {\n        __brand: 'features',\n        console: combine(one.console, two.console, combineConsoleFeatures),\n        tracer: combine(one.tracer, two.tracer, combineTracerFeatures),\n        telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),\n        client: combine(one.client, two.client, combineClientFeatures),\n        window: combine(one.window, two.window, combineWindowFeatures),\n        workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures)\n    };\n    return result;\n}\nexports.combineFeatures = combineFeatures;\nfunction createConnection(connectionFactory, watchDog, factories) {\n    const logger = (factories && factories.console ? new (factories.console(RemoteConsoleImpl))() : new RemoteConsoleImpl());\n    const connection = connectionFactory(logger);\n    logger.rawAttach(connection);\n    const tracer = (factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl());\n    const telemetry = (factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl());\n    const client = (factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl());\n    const remoteWindow = (factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl());\n    const workspace = (factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl());\n    const languages = (factories && factories.languages ? new (factories.languages(LanguagesImpl))() : new LanguagesImpl());\n    const allRemotes = [logger, tracer, telemetry, client, remoteWindow, workspace, languages];\n    function asPromise(value) {\n        if (value instanceof Promise) {\n            return value;\n        }\n        else if (Is.thenable(value)) {\n            return new Promise((resolve, reject) => {\n                value.then((resolved) => resolve(resolved), (error) => reject(error));\n            });\n        }\n        else {\n            return Promise.resolve(value);\n        }\n    }\n    let shutdownHandler = undefined;\n    let initializeHandler = undefined;\n    let exitHandler = undefined;\n    let protocolConnection = {\n        listen: () => connection.listen(),\n        sendRequest: (type, ...params) => connection.sendRequest(Is.string(type) ? type : type.method, ...params),\n        onRequest: (type, handler) => connection.onRequest(type, handler),\n        sendNotification: (type, param) => {\n            const method = Is.string(type) ? type : type.method;\n            if (arguments.length === 1) {\n                connection.sendNotification(method);\n            }\n            else {\n                connection.sendNotification(method, param);\n            }\n        },\n        onNotification: (type, handler) => connection.onNotification(type, handler),\n        onProgress: connection.onProgress,\n        sendProgress: connection.sendProgress,\n        onInitialize: (handler) => initializeHandler = handler,\n        onInitialized: (handler) => connection.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler),\n        onShutdown: (handler) => shutdownHandler = handler,\n        onExit: (handler) => exitHandler = handler,\n        get console() { return logger; },\n        get telemetry() { return telemetry; },\n        get tracer() { return tracer; },\n        get client() { return client; },\n        get window() { return remoteWindow; },\n        get workspace() { return workspace; },\n        get languages() { return languages; },\n        onDidChangeConfiguration: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler),\n        onDidChangeWatchedFiles: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler),\n        __textDocumentSync: undefined,\n        onDidOpenTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler),\n        onDidChangeTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler),\n        onDidCloseTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler),\n        onWillSaveTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler),\n        onWillSaveTextDocumentWaitUntil: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler),\n        onDidSaveTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler),\n        sendDiagnostics: (params) => connection.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params),\n        onHover: (handler) => connection.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);\n        }),\n        onCompletion: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onCompletionResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler),\n        onSignatureHelp: (handler) => connection.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);\n        }),\n        onDeclaration: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onDefinition: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onTypeDefinition: (handler) => connection.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onImplementation: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onReferences: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onDocumentHighlight: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onDocumentSymbol: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onWorkspaceSymbol: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onCodeAction: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onCodeActionResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, (params, cancel) => {\n            return handler(params, cancel);\n        }),\n        onCodeLens: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onCodeLensResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, (params, cancel) => {\n            return handler(params, cancel);\n        }),\n        onDocumentFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);\n        }),\n        onDocumentRangeFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);\n        }),\n        onDocumentOnTypeFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, (params, cancel) => {\n            return handler(params, cancel);\n        }),\n        onRenameRequest: (handler) => connection.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);\n        }),\n        onPrepareRename: (handler) => connection.onRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, (params, cancel) => {\n            return handler(params, cancel);\n        }),\n        onDocumentLinks: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onDocumentLinkResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, (params, cancel) => {\n            return handler(params, cancel);\n        }),\n        onDocumentColor: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onColorPresentation: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onFoldingRanges: (handler) => connection.onRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onSelectionRanges: (handler) => connection.onRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), progress_1.attachPartialResult(connection, params));\n        }),\n        onExecuteCommand: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, (params, cancel) => {\n            return handler(params, cancel, progress_1.attachWorkDone(connection, params), undefined);\n        }),\n        dispose: () => connection.dispose()\n    };\n    for (let remote of allRemotes) {\n        remote.attach(protocolConnection);\n    }\n    connection.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, (params) => {\n        watchDog.initialize(params);\n        if (Is.string(params.trace)) {\n            tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);\n        }\n        for (let remote of allRemotes) {\n            remote.initialize(params.capabilities);\n        }\n        if (initializeHandler) {\n            let result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token, progress_1.attachWorkDone(connection, params), undefined);\n            return asPromise(result).then((value) => {\n                if (value instanceof vscode_languageserver_protocol_1.ResponseError) {\n                    return value;\n                }\n                let result = value;\n                if (!result) {\n                    result = { capabilities: {} };\n                }\n                let capabilities = result.capabilities;\n                if (!capabilities) {\n                    capabilities = {};\n                    result.capabilities = capabilities;\n                }\n                if (capabilities.textDocumentSync === undefined || capabilities.textDocumentSync === null) {\n                    capabilities.textDocumentSync = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n                }\n                else if (!Is.number(capabilities.textDocumentSync) && !Is.number(capabilities.textDocumentSync.change)) {\n                    capabilities.textDocumentSync.change = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n                }\n                for (let remote of allRemotes) {\n                    remote.fillServerCapabilities(capabilities);\n                }\n                return result;\n            });\n        }\n        else {\n            let result = { capabilities: { textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None } };\n            for (let remote of allRemotes) {\n                remote.fillServerCapabilities(result.capabilities);\n            }\n            return result;\n        }\n    });\n    connection.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, () => {\n        watchDog.shutdownReceived = true;\n        if (shutdownHandler) {\n            return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);\n        }\n        else {\n            return undefined;\n        }\n    });\n    connection.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, () => {\n        try {\n            if (exitHandler) {\n                exitHandler();\n            }\n        }\n        finally {\n            if (watchDog.shutdownReceived) {\n                watchDog.exit(0);\n            }\n            else {\n                watchDog.exit(1);\n            }\n        }\n    });\n    connection.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, (params) => {\n        tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);\n    });\n    return protocolConnection;\n}\nexports.createConnection = createConnection;\n//# sourceMappingURL=server.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}