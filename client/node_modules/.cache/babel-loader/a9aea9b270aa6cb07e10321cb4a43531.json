{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractGraphQLDocuments = exports.GraphQLDocument = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst location_1 = require(\"graphql/language/location\");\n\nconst vscode_languageserver_1 = require(\"vscode-languageserver\");\n\nconst getDiagnostics_1 = require(\"@apollographql/graphql-language-service-interface/dist/getDiagnostics\");\n\nconst source_1 = require(\"./utilities/source\");\n\nclass GraphQLDocument {\n  constructor(source) {\n    this.source = source;\n    this.syntaxErrors = [];\n\n    try {\n      this.ast = (0, graphql_1.parse)(source);\n    } catch (error) {\n      if (maybeCommentedOut(source.body)) return;\n      const range = (0, source_1.rangeInContainingDocument)(source, (0, getDiagnostics_1.getRange)(error.locations[0], source.body));\n      this.syntaxErrors.push({\n        severity: vscode_languageserver_1.DiagnosticSeverity.Error,\n        message: error.message,\n        source: \"GraphQL: Syntax\",\n        range\n      });\n    }\n  }\n\n  containsPosition(position) {\n    if (position.line < this.source.locationOffset.line - 1) return false;\n    const end = (0, source_1.positionFromSourceLocation)(this.source, (0, location_1.getLocation)(this.source, this.source.body.length));\n    return position.line <= end.line;\n  }\n\n}\n\nexports.GraphQLDocument = GraphQLDocument;\n\nfunction extractGraphQLDocuments(document, tagName = \"gql\") {\n  switch (document.languageId) {\n    case \"graphql\":\n      return [new GraphQLDocument(new graphql_1.Source(document.getText(), document.uri))];\n\n    case \"javascript\":\n    case \"javascriptreact\":\n    case \"typescript\":\n    case \"typescriptreact\":\n    case \"vue\":\n      return extractGraphQLDocumentsFromJSTemplateLiterals(document, tagName);\n\n    case \"python\":\n      return extractGraphQLDocumentsFromPythonStrings(document, tagName);\n\n    case \"ruby\":\n      return extractGraphQLDocumentsFromRubyStrings(document, tagName);\n\n    case \"dart\":\n      return extractGraphQLDocumentsFromDartStrings(document, tagName);\n\n    case \"reason\":\n      return extractGraphQLDocumentsFromReasonStrings(document, tagName);\n\n    case \"elixir\":\n      return extractGraphQLDocumentsFromElixirStrings(document, tagName);\n\n    default:\n      return null;\n  }\n}\n\nexports.extractGraphQLDocuments = extractGraphQLDocuments;\n\nfunction extractGraphQLDocumentsFromJSTemplateLiterals(document, tagName) {\n  const text = document.getText();\n  const documents = [];\n  const regExp = new RegExp(`${tagName}\\\\s*\\`([\\\\s\\\\S]+?)\\``, \"gm\");\n  let result;\n\n  while ((result = regExp.exec(text)) !== null) {\n    const contents = replacePlaceholdersWithWhiteSpace(result[1]);\n    const position = document.positionAt(result.index + (tagName.length + 1));\n    const locationOffset = {\n      line: position.line + 1,\n      column: position.character + 1\n    };\n    const source = new graphql_1.Source(contents, document.uri, locationOffset);\n    documents.push(new GraphQLDocument(source));\n  }\n\n  if (documents.length < 1) return null;\n  return documents;\n}\n\nfunction extractGraphQLDocumentsFromPythonStrings(document, tagName) {\n  const text = document.getText();\n  const documents = [];\n  const regExp = new RegExp(`\\\\b(${tagName}\\\\s*\\\\(\\\\s*[bfru]*(\"(?:\"\")?|'(?:'')?))([\\\\s\\\\S]+?)\\\\2\\\\s*\\\\)`, \"gm\");\n  let result;\n\n  while ((result = regExp.exec(text)) !== null) {\n    const contents = replacePlaceholdersWithWhiteSpace(result[3]);\n    const position = document.positionAt(result.index + result[1].length);\n    const locationOffset = {\n      line: position.line + 1,\n      column: position.character + 1\n    };\n    const source = new graphql_1.Source(contents, document.uri, locationOffset);\n    documents.push(new GraphQLDocument(source));\n  }\n\n  if (documents.length < 1) return null;\n  return documents;\n}\n\nfunction extractGraphQLDocumentsFromRubyStrings(document, tagName) {\n  const text = document.getText();\n  const documents = [];\n  const regExp = new RegExp(`(<<-${tagName})([\\\\s\\\\S]+?)${tagName}`, \"gm\");\n  let result;\n\n  while ((result = regExp.exec(text)) !== null) {\n    const contents = replacePlaceholdersWithWhiteSpace(result[2]);\n    const position = document.positionAt(result.index + result[1].length);\n    const locationOffset = {\n      line: position.line + 1,\n      column: position.character + 1\n    };\n    const source = new graphql_1.Source(contents, document.uri, locationOffset);\n    documents.push(new GraphQLDocument(source));\n  }\n\n  if (documents.length < 1) return null;\n  return documents;\n}\n\nfunction extractGraphQLDocumentsFromDartStrings(document, tagName) {\n  const text = document.getText();\n  const documents = [];\n  const regExp = new RegExp(`\\\\b(${tagName}\\\\(\\\\s*r?(\"\"\"|'''))([\\\\s\\\\S]+?)\\\\2\\\\s*\\\\)`, \"gm\");\n  let result;\n\n  while ((result = regExp.exec(text)) !== null) {\n    const contents = replacePlaceholdersWithWhiteSpace(result[3]);\n    const position = document.positionAt(result.index + result[1].length);\n    const locationOffset = {\n      line: position.line + 1,\n      column: position.character + 1\n    };\n    const source = new graphql_1.Source(contents, document.uri, locationOffset);\n    documents.push(new GraphQLDocument(source));\n  }\n\n  if (documents.length < 1) return null;\n  return documents;\n}\n\nfunction extractGraphQLDocumentsFromReasonStrings(document, tagName) {\n  const text = document.getText();\n  const documents = [];\n  const reasonFileFilter = new RegExp(/(\\[%(graphql|relay\\.))/g);\n\n  if (!reasonFileFilter.test(text)) {\n    return documents;\n  }\n\n  const reasonRegexp = new RegExp(/(?<=\\[%(graphql|relay\\.\\w*)[\\s\\S]*{\\|)[.\\s\\S]+?(?=\\|})/gm);\n  let result;\n\n  while ((result = reasonRegexp.exec(text)) !== null) {\n    const contents = result[0];\n    const position = document.positionAt(result.index);\n    const locationOffset = {\n      line: position.line + 1,\n      column: position.character + 1\n    };\n    const source = new graphql_1.Source(contents, document.uri, locationOffset);\n    documents.push(new GraphQLDocument(source));\n  }\n\n  if (documents.length < 1) return null;\n  return documents;\n}\n\nfunction extractGraphQLDocumentsFromElixirStrings(document, tagName) {\n  const text = document.getText();\n  const documents = [];\n  const regExp = new RegExp(`\\\\b(${tagName}\\\\(\\\\s*r?(\"\"\"))([\\\\s\\\\S]+?)\\\\2\\\\s*\\\\)`, \"gm\");\n  let result;\n\n  while ((result = regExp.exec(text)) !== null) {\n    const contents = replacePlaceholdersWithWhiteSpace(result[3]);\n    const position = document.positionAt(result.index + result[1].length);\n    const locationOffset = {\n      line: position.line + 1,\n      column: position.character + 1\n    };\n    const source = new graphql_1.Source(contents, document.uri, locationOffset);\n    documents.push(new GraphQLDocument(source));\n  }\n\n  if (documents.length < 1) return null;\n  return documents;\n}\n\nfunction replacePlaceholdersWithWhiteSpace(content) {\n  return content.replace(/\\$\\{([\\s\\S]+?)\\}/gm, match => {\n    return Array(match.length).join(\" \");\n  });\n}\n\nfunction maybeCommentedOut(content) {\n  return content.indexOf(\"/*\") > -1 && content.indexOf(\"*/\") > -1 || content.split(\"//\").length > 1;\n}","map":{"version":3,"sources":["../src/document.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extractGraphQLDocuments = exports.GraphQLDocument = void 0;\nconst graphql_1 = require(\"graphql\");\nconst location_1 = require(\"graphql/language/location\");\nconst vscode_languageserver_1 = require(\"vscode-languageserver\");\nconst getDiagnostics_1 = require(\"@apollographql/graphql-language-service-interface/dist/getDiagnostics\");\nconst source_1 = require(\"./utilities/source\");\nclass GraphQLDocument {\n    constructor(source) {\n        this.source = source;\n        this.syntaxErrors = [];\n        try {\n            this.ast = (0, graphql_1.parse)(source);\n        }\n        catch (error) {\n            if (maybeCommentedOut(source.body))\n                return;\n            const range = (0, source_1.rangeInContainingDocument)(source, (0, getDiagnostics_1.getRange)(error.locations[0], source.body));\n            this.syntaxErrors.push({\n                severity: vscode_languageserver_1.DiagnosticSeverity.Error,\n                message: error.message,\n                source: \"GraphQL: Syntax\",\n                range,\n            });\n        }\n    }\n    containsPosition(position) {\n        if (position.line < this.source.locationOffset.line - 1)\n            return false;\n        const end = (0, source_1.positionFromSourceLocation)(this.source, (0, location_1.getLocation)(this.source, this.source.body.length));\n        return position.line <= end.line;\n    }\n}\nexports.GraphQLDocument = GraphQLDocument;\nfunction extractGraphQLDocuments(document, tagName = \"gql\") {\n    switch (document.languageId) {\n        case \"graphql\":\n            return [\n                new GraphQLDocument(new graphql_1.Source(document.getText(), document.uri)),\n            ];\n        case \"javascript\":\n        case \"javascriptreact\":\n        case \"typescript\":\n        case \"typescriptreact\":\n        case \"vue\":\n            return extractGraphQLDocumentsFromJSTemplateLiterals(document, tagName);\n        case \"python\":\n            return extractGraphQLDocumentsFromPythonStrings(document, tagName);\n        case \"ruby\":\n            return extractGraphQLDocumentsFromRubyStrings(document, tagName);\n        case \"dart\":\n            return extractGraphQLDocumentsFromDartStrings(document, tagName);\n        case \"reason\":\n            return extractGraphQLDocumentsFromReasonStrings(document, tagName);\n        case \"elixir\":\n            return extractGraphQLDocumentsFromElixirStrings(document, tagName);\n        default:\n            return null;\n    }\n}\nexports.extractGraphQLDocuments = extractGraphQLDocuments;\nfunction extractGraphQLDocumentsFromJSTemplateLiterals(document, tagName) {\n    const text = document.getText();\n    const documents = [];\n    const regExp = new RegExp(`${tagName}\\\\s*\\`([\\\\s\\\\S]+?)\\``, \"gm\");\n    let result;\n    while ((result = regExp.exec(text)) !== null) {\n        const contents = replacePlaceholdersWithWhiteSpace(result[1]);\n        const position = document.positionAt(result.index + (tagName.length + 1));\n        const locationOffset = {\n            line: position.line + 1,\n            column: position.character + 1,\n        };\n        const source = new graphql_1.Source(contents, document.uri, locationOffset);\n        documents.push(new GraphQLDocument(source));\n    }\n    if (documents.length < 1)\n        return null;\n    return documents;\n}\nfunction extractGraphQLDocumentsFromPythonStrings(document, tagName) {\n    const text = document.getText();\n    const documents = [];\n    const regExp = new RegExp(`\\\\b(${tagName}\\\\s*\\\\(\\\\s*[bfru]*(\"(?:\"\")?|'(?:'')?))([\\\\s\\\\S]+?)\\\\2\\\\s*\\\\)`, \"gm\");\n    let result;\n    while ((result = regExp.exec(text)) !== null) {\n        const contents = replacePlaceholdersWithWhiteSpace(result[3]);\n        const position = document.positionAt(result.index + result[1].length);\n        const locationOffset = {\n            line: position.line + 1,\n            column: position.character + 1,\n        };\n        const source = new graphql_1.Source(contents, document.uri, locationOffset);\n        documents.push(new GraphQLDocument(source));\n    }\n    if (documents.length < 1)\n        return null;\n    return documents;\n}\nfunction extractGraphQLDocumentsFromRubyStrings(document, tagName) {\n    const text = document.getText();\n    const documents = [];\n    const regExp = new RegExp(`(<<-${tagName})([\\\\s\\\\S]+?)${tagName}`, \"gm\");\n    let result;\n    while ((result = regExp.exec(text)) !== null) {\n        const contents = replacePlaceholdersWithWhiteSpace(result[2]);\n        const position = document.positionAt(result.index + result[1].length);\n        const locationOffset = {\n            line: position.line + 1,\n            column: position.character + 1,\n        };\n        const source = new graphql_1.Source(contents, document.uri, locationOffset);\n        documents.push(new GraphQLDocument(source));\n    }\n    if (documents.length < 1)\n        return null;\n    return documents;\n}\nfunction extractGraphQLDocumentsFromDartStrings(document, tagName) {\n    const text = document.getText();\n    const documents = [];\n    const regExp = new RegExp(`\\\\b(${tagName}\\\\(\\\\s*r?(\"\"\"|'''))([\\\\s\\\\S]+?)\\\\2\\\\s*\\\\)`, \"gm\");\n    let result;\n    while ((result = regExp.exec(text)) !== null) {\n        const contents = replacePlaceholdersWithWhiteSpace(result[3]);\n        const position = document.positionAt(result.index + result[1].length);\n        const locationOffset = {\n            line: position.line + 1,\n            column: position.character + 1,\n        };\n        const source = new graphql_1.Source(contents, document.uri, locationOffset);\n        documents.push(new GraphQLDocument(source));\n    }\n    if (documents.length < 1)\n        return null;\n    return documents;\n}\nfunction extractGraphQLDocumentsFromReasonStrings(document, tagName) {\n    const text = document.getText();\n    const documents = [];\n    const reasonFileFilter = new RegExp(/(\\[%(graphql|relay\\.))/g);\n    if (!reasonFileFilter.test(text)) {\n        return documents;\n    }\n    const reasonRegexp = new RegExp(/(?<=\\[%(graphql|relay\\.\\w*)[\\s\\S]*{\\|)[.\\s\\S]+?(?=\\|})/gm);\n    let result;\n    while ((result = reasonRegexp.exec(text)) !== null) {\n        const contents = result[0];\n        const position = document.positionAt(result.index);\n        const locationOffset = {\n            line: position.line + 1,\n            column: position.character + 1,\n        };\n        const source = new graphql_1.Source(contents, document.uri, locationOffset);\n        documents.push(new GraphQLDocument(source));\n    }\n    if (documents.length < 1)\n        return null;\n    return documents;\n}\nfunction extractGraphQLDocumentsFromElixirStrings(document, tagName) {\n    const text = document.getText();\n    const documents = [];\n    const regExp = new RegExp(`\\\\b(${tagName}\\\\(\\\\s*r?(\"\"\"))([\\\\s\\\\S]+?)\\\\2\\\\s*\\\\)`, \"gm\");\n    let result;\n    while ((result = regExp.exec(text)) !== null) {\n        const contents = replacePlaceholdersWithWhiteSpace(result[3]);\n        const position = document.positionAt(result.index + result[1].length);\n        const locationOffset = {\n            line: position.line + 1,\n            column: position.character + 1,\n        };\n        const source = new graphql_1.Source(contents, document.uri, locationOffset);\n        documents.push(new GraphQLDocument(source));\n    }\n    if (documents.length < 1)\n        return null;\n    return documents;\n}\nfunction replacePlaceholdersWithWhiteSpace(content) {\n    return content.replace(/\\$\\{([\\s\\S]+?)\\}/gm, (match) => {\n        return Array(match.length).join(\" \");\n    });\n}\nfunction maybeCommentedOut(content) {\n    return ((content.indexOf(\"/*\") > -1 && content.indexOf(\"*/\") > -1) ||\n        content.split(\"//\").length > 1);\n}\n//# sourceMappingURL=document.js.map"]},"metadata":{},"sourceType":"script"}