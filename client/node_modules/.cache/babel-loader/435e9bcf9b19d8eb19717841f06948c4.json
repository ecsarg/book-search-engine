{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _net = _interopRequireDefault(require(\"net\"));\n\nvar _tls = _interopRequireDefault(require(\"tls\"));\n\nvar _Agent = _interopRequireDefault(require(\"./Agent\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nclass HttpsProxyAgent extends _Agent.default {\n  // eslint-disable-next-line unicorn/prevent-abbreviations\n  constructor(...args) {\n    super(...args);\n    this.protocol = 'https:';\n    this.defaultPort = 443;\n  }\n\n  createConnection(configuration, callback) {\n    const socket = _net.default.connect(configuration.proxy.port, configuration.proxy.hostname);\n\n    socket.on('error', error => {\n      callback(error);\n    });\n    socket.once('data', () => {\n      const secureSocket = _tls.default.connect({ ...configuration.tls,\n        socket\n      });\n\n      callback(null, secureSocket);\n    });\n    let connectMessage = '';\n    connectMessage += 'CONNECT ' + configuration.host + ':' + configuration.port + ' HTTP/1.1\\r\\n';\n    connectMessage += 'Host: ' + configuration.host + ':' + configuration.port + '\\r\\n';\n\n    if (configuration.proxy.authorization) {\n      connectMessage += 'Proxy-Authorization: Basic ' + Buffer.from(configuration.proxy.authorization).toString('base64') + '\\r\\n';\n    }\n\n    connectMessage += '\\r\\n';\n    socket.write(connectMessage);\n  }\n\n}\n\nvar _default = HttpsProxyAgent;\nexports.default = _default;","map":{"version":3,"sources":["../../src/classes/HttpsProxyAgent.js"],"names":["Agent","constructor","createConnection","socket","net","configuration","error","callback","secureSocket","connectMessage","Buffer","HttpsProxyAgent"],"mappings":";;;;;;;AAEA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;;AACA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;;AAKA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;;;;;;;AAEA,MAAA,eAAA,SAA8BA,MAAAA,CAA9B,OAAA,CAAoC;EAClC;EACAC,WAAW,CAAE,GAAF,IAAA,EAAc;IACvB,MAAM,GAAN,IAAA;IAEA,KAAA,QAAA,GAAA,QAAA;IACA,KAAA,WAAA,GAAA,GAAA;EACD;;EAEDC,gBAAgB,CAAA,aAAA,EAAA,QAAA,EAAgF;IAC9F,MAAMC,MAAM,GAAGC,IAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CACbC,aAAa,CAAbA,KAAAA,CADaD,IAAAA,EAEbC,aAAa,CAAbA,KAAAA,CAFF,QAAeD,CAAf;;IAKAD,MAAM,CAANA,EAAAA,CAAAA,OAAAA,EAAoBG,KAAD,IAAW;MAC5BC,QAAQ,CAARA,KAAQ,CAARA;IADFJ,CAAAA;IAIAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAoB,MAAM;MACxB,MAAMK,YAAY,GAAG,IAAA,CAAA,OAAA,CAAA,OAAA,CAAY,EAC/B,GAAGH,aAAa,CADe,GAAA;QAE/BF;MAF+B,CAAZ,CAArB;;MAKAI,QAAQ,CAAA,IAAA,EAARA,YAAQ,CAARA;IANFJ,CAAAA;IASA,IAAIM,cAAc,GAAlB,EAAA;IAEAA,cAAc,IAAI,aAAaJ,aAAa,CAA1B,IAAA,GAAA,GAAA,GAAwCA,aAAa,CAArD,IAAA,GAAlBI,eAAAA;IACAA,cAAc,IAAI,WAAWJ,aAAa,CAAxB,IAAA,GAAA,GAAA,GAAsCA,aAAa,CAAnD,IAAA,GAAlBI,MAAAA;;IAEA,IAAIJ,aAAa,CAAbA,KAAAA,CAAJ,aAAA,EAAuC;MACrCI,cAAc,IAAI,gCAAgCC,MAAM,CAANA,IAAAA,CAAYL,aAAa,CAAbA,KAAAA,CAAZK,aAAAA,EAAAA,QAAAA,CAAhC,QAAgCA,CAAhC,GAAlBD,MAAAA;IACD;;IAEDA,cAAc,IAAdA,MAAAA;IAEAN,MAAM,CAANA,KAAAA,CAAAA,cAAAA;EACD;;AAxCiC;;eA2CrBQ,e","sourcesContent":["// @flow\n\nimport net from 'net';\nimport tls from 'tls';\nimport type {\n  ConnectionCallbackType,\n  ConnectionConfigurationType,\n} from '../types';\nimport Agent from './Agent';\n\nclass HttpsProxyAgent extends Agent {\n  // eslint-disable-next-line unicorn/prevent-abbreviations\n  constructor (...args: *) {\n    super(...args);\n\n    this.protocol = 'https:';\n    this.defaultPort = 443;\n  }\n\n  createConnection (configuration: ConnectionConfigurationType, callback: ConnectionCallbackType) {\n    const socket = net.connect(\n      configuration.proxy.port,\n      configuration.proxy.hostname,\n    );\n\n    socket.on('error', (error) => {\n      callback(error);\n    });\n\n    socket.once('data', () => {\n      const secureSocket = tls.connect({\n        ...configuration.tls,\n        socket,\n      });\n\n      callback(null, secureSocket);\n    });\n\n    let connectMessage = '';\n\n    connectMessage += 'CONNECT ' + configuration.host + ':' + configuration.port + ' HTTP/1.1\\r\\n';\n    connectMessage += 'Host: ' + configuration.host + ':' + configuration.port + '\\r\\n';\n\n    if (configuration.proxy.authorization) {\n      connectMessage += 'Proxy-Authorization: Basic ' + Buffer.from(configuration.proxy.authorization).toString('base64') + '\\r\\n';\n    }\n\n    connectMessage += '\\r\\n';\n\n    socket.write(connectMessage);\n  }\n}\n\nexport default HttpsProxyAgent;\n"]},"metadata":{},"sourceType":"script"}