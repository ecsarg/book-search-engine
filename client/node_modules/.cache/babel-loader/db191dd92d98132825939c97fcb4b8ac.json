{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseServiceSpecifier = exports.getGraphIdFromConfig = exports.getServiceFromKey = exports.isServiceKey = exports.isServiceConfig = exports.isLocalServiceConfig = exports.isClientConfig = void 0;\n\nfunction isClientConfig(config) {\n  return config.isClient;\n}\n\nexports.isClientConfig = isClientConfig;\n\nfunction isLocalServiceConfig(config) {\n  return !!config.localSchemaFile;\n}\n\nexports.isLocalServiceConfig = isLocalServiceConfig;\n\nfunction isServiceConfig(config) {\n  return config.isService;\n}\n\nexports.isServiceConfig = isServiceConfig;\n\nfunction isServiceKey(key) {\n  return key && /service:.*:.*/.test(key);\n}\n\nexports.isServiceKey = isServiceKey;\n\nfunction getServiceFromKey(key) {\n  if (key) {\n    const [type, service] = key.split(\":\");\n    if (type === \"service\") return service;\n  }\n\n  return;\n}\n\nexports.getServiceFromKey = getServiceFromKey;\n\nfunction getGraphIdFromConfig(config) {\n  if (config.service && config.service.name) return parseServiceSpecifier(config.service.name)[0];\n\n  if (config.client) {\n    if (typeof config.client.service === \"string\") {\n      return parseServiceSpecifier(config.client.service)[0];\n    }\n\n    return config.client.service && config.client.service.name;\n  } else {\n    return undefined;\n  }\n}\n\nexports.getGraphIdFromConfig = getGraphIdFromConfig;\n\nfunction parseServiceSpecifier(specifier) {\n  const [id, tag] = specifier.split(\"@\").map(x => x.trim());\n  return [id, tag];\n}\n\nexports.parseServiceSpecifier = parseServiceSpecifier;","map":{"version":3,"sources":["../../src/config/utils.ts"],"names":[],"mappings":";;;;;;;AAUA,SAAgB,cAAhB,CAA+B,MAA/B,EAAmD;EACjD,OAAO,MAAM,CAAC,QAAd;AACD;;AAFD,OAAA,CAAA,cAAA,GAAA,cAAA;;AAKA,SAAgB,oBAAhB,CACE,MADF,EAC6B;EAE3B,OAAO,CAAC,CAAE,MAA6B,CAAC,eAAxC;AACD;;AAJD,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAMA,SAAgB,eAAhB,CAAgC,MAAhC,EAAoD;EAClD,OAAO,MAAM,CAAC,SAAd;AACD;;AAFD,OAAA,CAAA,eAAA,GAAA,eAAA;;AAIA,SAAgB,YAAhB,CAA6B,GAA7B,EAAyC;EACvC,OAAO,GAAG,IAAI,gBAAgB,IAAhB,CAAqB,GAArB,CAAd;AACD;;AAFD,OAAA,CAAA,YAAA,GAAA,YAAA;;AAIA,SAAgB,iBAAhB,CAAkC,GAAlC,EAA8C;EAC5C,IAAI,GAAJ,EAAS;IACP,MAAM,CAAC,IAAD,EAAO,OAAP,IAAkB,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAxB;IACA,IAAI,IAAI,KAAK,SAAb,EAAwB,OAAO,OAAP;EACzB;;EACD;AACD;;AAND,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAQA,SAAgB,oBAAhB,CAAqC,MAArC,EAA+D;EAC7D,IAAI,MAAM,CAAC,OAAP,IAAkB,MAAM,CAAC,OAAP,CAAe,IAArC,EACE,OAAO,qBAAqB,CAAC,MAAM,CAAC,OAAP,CAAe,IAAhB,CAArB,CAA2C,CAA3C,CAAP;;EACF,IAAI,MAAM,CAAC,MAAX,EAAmB;IACjB,IAAI,OAAO,MAAM,CAAC,MAAP,CAAc,OAArB,KAAiC,QAArC,EAA+C;MAC7C,OAAO,qBAAqB,CAC1B,MAAM,CAAC,MAAP,CAAc,OADY,CAArB,CAEL,CAFK,CAAP;IAGD;;IACD,OAAO,MAAM,CAAC,MAAP,CAAc,OAAd,IAAyB,MAAM,CAAC,MAAP,CAAc,OAAd,CAAsB,IAAtD;EACD,CAPD,MAOO;IACL,OAAO,SAAP;EACD;AACF;;AAbD,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAeA,SAAgB,qBAAhB,CAAsC,SAAtC,EAAiE;EAC/D,MAAM,CAAC,EAAD,EAAK,GAAL,IAAY,SAAS,CAAC,KAAV,CAAgB,GAAhB,EAAqB,GAArB,CAA0B,CAAD,IAAO,CAAC,CAAC,IAAF,EAAhC,CAAlB;EACA,OAAO,CAAC,EAAD,EAAK,GAAL,CAAP;AACD;;AAHD,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseServiceSpecifier = exports.getGraphIdFromConfig = exports.getServiceFromKey = exports.isServiceKey = exports.isServiceConfig = exports.isLocalServiceConfig = exports.isClientConfig = void 0;\nfunction isClientConfig(config) {\n    return config.isClient;\n}\nexports.isClientConfig = isClientConfig;\nfunction isLocalServiceConfig(config) {\n    return !!config.localSchemaFile;\n}\nexports.isLocalServiceConfig = isLocalServiceConfig;\nfunction isServiceConfig(config) {\n    return config.isService;\n}\nexports.isServiceConfig = isServiceConfig;\nfunction isServiceKey(key) {\n    return key && /service:.*:.*/.test(key);\n}\nexports.isServiceKey = isServiceKey;\nfunction getServiceFromKey(key) {\n    if (key) {\n        const [type, service] = key.split(\":\");\n        if (type === \"service\")\n            return service;\n    }\n    return;\n}\nexports.getServiceFromKey = getServiceFromKey;\nfunction getGraphIdFromConfig(config) {\n    if (config.service && config.service.name)\n        return parseServiceSpecifier(config.service.name)[0];\n    if (config.client) {\n        if (typeof config.client.service === \"string\") {\n            return parseServiceSpecifier(config.client.service)[0];\n        }\n        return config.client.service && config.client.service.name;\n    }\n    else {\n        return undefined;\n    }\n}\nexports.getGraphIdFromConfig = getGraphIdFromConfig;\nfunction parseServiceSpecifier(specifier) {\n    const [id, tag] = specifier.split(\"@\").map((x) => x.trim());\n    return [id, tag];\n}\nexports.parseServiceSpecifier = parseServiceSpecifier;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}