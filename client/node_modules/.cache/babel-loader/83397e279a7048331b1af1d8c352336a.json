{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logErrorMessage = exports.logError = exports.ToolError = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst path_1 = __importDefault(require(\"path\"));\n\nclass ToolError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ToolError\";\n    this.message = message;\n  }\n\n}\n\nexports.ToolError = ToolError;\nconst isRunningFromXcodeScript = process.env.XCODE_VERSION_ACTUAL;\n\nfunction logError(error) {\n  if (error instanceof ToolError) {\n    logErrorMessage(error.message);\n  } else if (error instanceof graphql_1.GraphQLError) {\n    const fileName = error.source && error.source.name;\n\n    if (error.locations) {\n      for (const location of error.locations) {\n        logErrorMessage(error.message, fileName, location.line);\n      }\n    } else {\n      logErrorMessage(error.message, fileName);\n    }\n  } else {\n    console.error(error.stack);\n  }\n}\n\nexports.logError = logError;\n\nfunction logErrorMessage(message, fileName, lineNumber) {\n  if (isRunningFromXcodeScript) {\n    if (fileName && lineNumber) {\n      console.error(`${fileName}:${lineNumber}: error: ${message}`);\n    } else {\n      console.error(`error: ${message}`);\n    }\n  } else {\n    if (fileName) {\n      const truncatedFileName = \"/\" + fileName.split(path_1.default.sep).slice(-4).join(path_1.default.sep);\n      console.error(`...${truncatedFileName}: ${message}`);\n    } else {\n      console.error(`error: ${message}`);\n    }\n  }\n}\n\nexports.logErrorMessage = logErrorMessage;","map":{"version":3,"sources":["../../src/errors/logger.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAKA,MAAa,SAAb,SAA+B,KAA/B,CAAoC;EAGlC,WAAA,CAAY,OAAZ,EAA2B;IACzB,MAAM,OAAN;IAHF,KAAA,IAAA,GAAe,WAAf;IAIE,KAAK,OAAL,GAAe,OAAf;EACD;;AANiC;;AAApC,OAAA,CAAA,SAAA,GAAA,SAAA;AASA,MAAM,wBAAwB,GAAG,OAAO,CAAC,GAAR,CAAY,oBAA7C;;AAEA,SAAgB,QAAhB,CAAyB,KAAzB,EAAqC;EACnC,IAAI,KAAK,YAAY,SAArB,EAAgC;IAC9B,eAAe,CAAC,KAAK,CAAC,OAAP,CAAf;EACD,CAFD,MAEO,IAAI,KAAK,YAAY,SAAA,CAAA,YAArB,EAAmC;IACxC,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAN,IAAgB,KAAK,CAAC,MAAN,CAAa,IAA9C;;IACA,IAAI,KAAK,CAAC,SAAV,EAAqB;MACnB,KAAK,MAAM,QAAX,IAAuB,KAAK,CAAC,SAA7B,EAAwC;QACtC,eAAe,CAAC,KAAK,CAAC,OAAP,EAAgB,QAAhB,EAA0B,QAAQ,CAAC,IAAnC,CAAf;MACD;IACF,CAJD,MAIO;MACL,eAAe,CAAC,KAAK,CAAC,OAAP,EAAgB,QAAhB,CAAf;IACD;EACF,CATM,MASA;IACL,OAAO,CAAC,KAAR,CAAc,KAAK,CAAC,KAApB;EACD;AACF;;AAfD,OAAA,CAAA,QAAA,GAAA,QAAA;;AAiBA,SAAgB,eAAhB,CACE,OADF,EAEE,QAFF,EAGE,UAHF,EAGqB;EAEnB,IAAI,wBAAJ,EAA8B;IAC5B,IAAI,QAAQ,IAAI,UAAhB,EAA4B;MAG1B,OAAO,CAAC,KAAR,CAAc,GAAG,QAAQ,IAAI,UAAU,YAAY,OAAO,EAA1D;IACD,CAJD,MAIO;MAEL,OAAO,CAAC,KAAR,CAAc,UAAU,OAAO,EAA/B;IACD;EACF,CATD,MASO;IACL,IAAI,QAAJ,EAAc;MACZ,MAAM,iBAAiB,GACrB,MAAM,QAAQ,CAAC,KAAT,CAAe,MAAA,CAAA,OAAA,CAAK,GAApB,EAAyB,KAAzB,CAA+B,CAAC,CAAhC,EAAmC,IAAnC,CAAwC,MAAA,CAAA,OAAA,CAAK,GAA7C,CADR;MAEA,OAAO,CAAC,KAAR,CAAc,MAAM,iBAAiB,KAAK,OAAO,EAAjD;IACD,CAJD,MAIO;MACL,OAAO,CAAC,KAAR,CAAc,UAAU,OAAO,EAA/B;IACD;EACF;AACF;;AAvBD,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logErrorMessage = exports.logError = exports.ToolError = void 0;\nconst graphql_1 = require(\"graphql\");\nconst path_1 = __importDefault(require(\"path\"));\nclass ToolError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"ToolError\";\n        this.message = message;\n    }\n}\nexports.ToolError = ToolError;\nconst isRunningFromXcodeScript = process.env.XCODE_VERSION_ACTUAL;\nfunction logError(error) {\n    if (error instanceof ToolError) {\n        logErrorMessage(error.message);\n    }\n    else if (error instanceof graphql_1.GraphQLError) {\n        const fileName = error.source && error.source.name;\n        if (error.locations) {\n            for (const location of error.locations) {\n                logErrorMessage(error.message, fileName, location.line);\n            }\n        }\n        else {\n            logErrorMessage(error.message, fileName);\n        }\n    }\n    else {\n        console.error(error.stack);\n    }\n}\nexports.logError = logError;\nfunction logErrorMessage(message, fileName, lineNumber) {\n    if (isRunningFromXcodeScript) {\n        if (fileName && lineNumber) {\n            console.error(`${fileName}:${lineNumber}: error: ${message}`);\n        }\n        else {\n            console.error(`error: ${message}`);\n        }\n    }\n    else {\n        if (fileName) {\n            const truncatedFileName = \"/\" + fileName.split(path_1.default.sep).slice(-4).join(path_1.default.sep);\n            console.error(`...${truncatedFileName}: ${message}`);\n        }\n        else {\n            console.error(`error: ${message}`);\n        }\n    }\n}\nexports.logErrorMessage = logErrorMessage;\n//# sourceMappingURL=logger.js.map"]},"metadata":{},"sourceType":"script"}