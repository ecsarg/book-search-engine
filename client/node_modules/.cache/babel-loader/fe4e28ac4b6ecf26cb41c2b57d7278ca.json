{"ast":null,"code":"var common = require('./common');\n\nvar _tempDir = require('./tempdir').tempDir;\n\nvar _pwd = require('./pwd');\n\nvar path = require('path');\n\nvar fs = require('fs');\n\nvar child = require('child_process');\n\nvar DEFAULT_MAXBUFFER_SIZE = 20 * 1024 * 1024;\nvar DEFAULT_ERROR_CODE = 1;\ncommon.register('exec', _exec, {\n  unix: false,\n  canReceivePipe: true,\n  wrapOutput: false\n}); // We use this function to run `exec` synchronously while also providing realtime\n// output.\n\nfunction execSync(cmd, opts, pipe) {\n  if (!common.config.execPath) {\n    common.error('Unable to find a path to the node binary. Please manually set config.execPath');\n  }\n\n  var tempDir = _tempDir();\n\n  var paramsFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stderrFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stdoutFile = path.resolve(tempDir + '/' + common.randomFileName());\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n    encoding: 'utf8'\n  }, opts);\n  if (fs.existsSync(paramsFile)) common.unlinkSync(paramsFile);\n  if (fs.existsSync(stderrFile)) common.unlinkSync(stderrFile);\n  if (fs.existsSync(stdoutFile)) common.unlinkSync(stdoutFile);\n  opts.cwd = path.resolve(opts.cwd);\n  var paramsToSerialize = {\n    command: cmd,\n    execOptions: opts,\n    pipe: pipe,\n    stdoutFile: stdoutFile,\n    stderrFile: stderrFile\n  }; // Create the files and ensure these are locked down (for read and write) to\n  // the current user. The main concerns here are:\n  //\n  // * If we execute a command which prints sensitive output, then\n  //   stdoutFile/stderrFile must not be readable by other users.\n  // * paramsFile must not be readable by other users, or else they can read it\n  //   to figure out the path for stdoutFile/stderrFile and create these first\n  //   (locked down to their own access), which will crash exec() when it tries\n  //   to write to the files.\n\n  function writeFileLockedDown(filePath, data) {\n    fs.writeFileSync(filePath, data, {\n      encoding: 'utf8',\n      mode: parseInt('600', 8)\n    });\n  }\n\n  writeFileLockedDown(stdoutFile, '');\n  writeFileLockedDown(stderrFile, '');\n  writeFileLockedDown(paramsFile, JSON.stringify(paramsToSerialize));\n  var execArgs = [path.join(__dirname, 'exec-child.js'), paramsFile];\n  /* istanbul ignore else */\n\n  if (opts.silent) {\n    opts.stdio = 'ignore';\n  } else {\n    opts.stdio = [0, 1, 2];\n  }\n\n  var code = 0; // Welcome to the future\n\n  try {\n    // Bad things if we pass in a `shell` option to child_process.execFileSync,\n    // so we need to explicitly remove it here.\n    delete opts.shell;\n    child.execFileSync(common.config.execPath, execArgs, opts);\n  } catch (e) {\n    // Commands with non-zero exit code raise an exception.\n    code = e.status || DEFAULT_ERROR_CODE;\n  } // fs.readFileSync uses buffer encoding by default, so call\n  // it without the encoding option if the encoding is 'buffer'.\n  // Also, if the exec timeout is too short for node to start up,\n  // the files will not be created, so these calls will throw.\n\n\n  var stdout = '';\n  var stderr = '';\n\n  if (opts.encoding === 'buffer') {\n    stdout = fs.readFileSync(stdoutFile);\n    stderr = fs.readFileSync(stderrFile);\n  } else {\n    stdout = fs.readFileSync(stdoutFile, opts.encoding);\n    stderr = fs.readFileSync(stderrFile, opts.encoding);\n  } // No biggie if we can't erase the files now -- they're in a temp dir anyway\n  // and we locked down permissions (see the note above).\n\n\n  try {\n    common.unlinkSync(paramsFile);\n  } catch (e) {}\n\n  try {\n    common.unlinkSync(stderrFile);\n  } catch (e) {}\n\n  try {\n    common.unlinkSync(stdoutFile);\n  } catch (e) {}\n\n  if (code !== 0) {\n    // Note: `silent` should be unconditionally true to avoid double-printing\n    // the command's stderr, and to avoid printing any stderr when the user has\n    // set `shell.config.silent`.\n    common.error(stderr, code, {\n      continue: true,\n      silent: true\n    });\n  }\n\n  var obj = common.ShellString(stdout, stderr, code);\n  return obj;\n} // execSync()\n// Wrapper around exec() to enable echoing output to console in real time\n\n\nfunction execAsync(cmd, opts, pipe, callback) {\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n    encoding: 'utf8'\n  }, opts);\n  var c = child.exec(cmd, opts, function (err, stdout, stderr) {\n    if (callback) {\n      if (!err) {\n        callback(0, stdout, stderr);\n      } else if (err.code === undefined) {\n        // See issue #536\n\n        /* istanbul ignore next */\n        callback(1, stdout, stderr);\n      } else {\n        callback(err.code, stdout, stderr);\n      }\n    }\n  });\n  if (pipe) c.stdin.end(pipe);\n\n  if (!opts.silent) {\n    c.stdout.pipe(process.stdout);\n    c.stderr.pipe(process.stderr);\n  }\n\n  return c;\n} //@\n//@ ### exec(command [, options] [, callback])\n//@\n//@ Available options:\n//@\n//@ + `async`: Asynchronous execution. If a callback is provided, it will be set to\n//@   `true`, regardless of the passed value (default: `false`).\n//@ + `silent`: Do not echo program output to console (default: `false`).\n//@ + `encoding`: Character encoding to use. Affects the values returned to stdout and stderr, and\n//@   what is written to stdout and stderr when not in silent mode (default: `'utf8'`).\n//@ + and any option available to Node.js's\n//@   [`child_process.exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var version = exec('node --version', {silent:true}).stdout;\n//@\n//@ var child = exec('some_long_running_process', {async:true});\n//@ child.stdout.on('data', function(data) {\n//@   /* ... do something with data ... */\n//@ });\n//@\n//@ exec('some_long_running_process', function(code, stdout, stderr) {\n//@   console.log('Exit code:', code);\n//@   console.log('Program output:', stdout);\n//@   console.log('Program stderr:', stderr);\n//@ });\n//@ ```\n//@\n//@ Executes the given `command` _synchronously_, unless otherwise specified.  When in synchronous\n//@ mode, this returns a `ShellString` (compatible with ShellJS v0.6.x, which returns an object\n//@ of the form `{ code:..., stdout:... , stderr:... }`). Otherwise, this returns the child process\n//@ object, and the `callback` receives the arguments `(code, stdout, stderr)`.\n//@\n//@ Not seeing the behavior you want? `exec()` runs everything through `sh`\n//@ by default (or `cmd.exe` on Windows), which differs from `bash`. If you\n//@ need bash-specific behavior, try out the `{shell: 'path/to/bash'}` option.\n\n\nfunction _exec(command, options, callback) {\n  options = options || {};\n  if (!command) common.error('must specify command');\n  var pipe = common.readFromPipe(); // Callback is defined instead of options.\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {\n      async: true\n    };\n  } // Callback is defined with options.\n\n\n  if (typeof options === 'object' && typeof callback === 'function') {\n    options.async = true;\n  }\n\n  options = common.extend({\n    silent: common.config.silent,\n    async: false\n  }, options);\n\n  if (options.async) {\n    return execAsync(command, options, pipe, callback);\n  } else {\n    return execSync(command, options, pipe);\n  }\n}\n\nmodule.exports = _exec;","map":{"version":3,"names":["common","require","_tempDir","tempDir","_pwd","path","fs","child","DEFAULT_MAXBUFFER_SIZE","DEFAULT_ERROR_CODE","register","_exec","unix","canReceivePipe","wrapOutput","execSync","cmd","opts","pipe","config","execPath","error","paramsFile","resolve","randomFileName","stderrFile","stdoutFile","extend","silent","cwd","toString","env","process","maxBuffer","encoding","existsSync","unlinkSync","paramsToSerialize","command","execOptions","writeFileLockedDown","filePath","data","writeFileSync","mode","parseInt","JSON","stringify","execArgs","join","__dirname","stdio","code","shell","execFileSync","e","status","stdout","stderr","readFileSync","continue","obj","ShellString","execAsync","callback","c","exec","err","undefined","stdin","end","options","readFromPipe","async","module","exports"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/shelljs/src/exec.js"],"sourcesContent":["var common = require('./common');\nvar _tempDir = require('./tempdir').tempDir;\nvar _pwd = require('./pwd');\nvar path = require('path');\nvar fs = require('fs');\nvar child = require('child_process');\n\nvar DEFAULT_MAXBUFFER_SIZE = 20 * 1024 * 1024;\nvar DEFAULT_ERROR_CODE = 1;\n\ncommon.register('exec', _exec, {\n  unix: false,\n  canReceivePipe: true,\n  wrapOutput: false,\n});\n\n// We use this function to run `exec` synchronously while also providing realtime\n// output.\nfunction execSync(cmd, opts, pipe) {\n  if (!common.config.execPath) {\n    common.error('Unable to find a path to the node binary. Please manually set config.execPath');\n  }\n\n  var tempDir = _tempDir();\n  var paramsFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stderrFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stdoutFile = path.resolve(tempDir + '/' + common.randomFileName());\n\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n    encoding: 'utf8',\n  }, opts);\n\n  if (fs.existsSync(paramsFile)) common.unlinkSync(paramsFile);\n  if (fs.existsSync(stderrFile)) common.unlinkSync(stderrFile);\n  if (fs.existsSync(stdoutFile)) common.unlinkSync(stdoutFile);\n\n  opts.cwd = path.resolve(opts.cwd);\n\n  var paramsToSerialize = {\n    command: cmd,\n    execOptions: opts,\n    pipe: pipe,\n    stdoutFile: stdoutFile,\n    stderrFile: stderrFile,\n  };\n\n  // Create the files and ensure these are locked down (for read and write) to\n  // the current user. The main concerns here are:\n  //\n  // * If we execute a command which prints sensitive output, then\n  //   stdoutFile/stderrFile must not be readable by other users.\n  // * paramsFile must not be readable by other users, or else they can read it\n  //   to figure out the path for stdoutFile/stderrFile and create these first\n  //   (locked down to their own access), which will crash exec() when it tries\n  //   to write to the files.\n  function writeFileLockedDown(filePath, data) {\n    fs.writeFileSync(filePath, data, {\n      encoding: 'utf8',\n      mode: parseInt('600', 8),\n    });\n  }\n  writeFileLockedDown(stdoutFile, '');\n  writeFileLockedDown(stderrFile, '');\n  writeFileLockedDown(paramsFile, JSON.stringify(paramsToSerialize));\n\n  var execArgs = [\n    path.join(__dirname, 'exec-child.js'),\n    paramsFile,\n  ];\n\n  /* istanbul ignore else */\n  if (opts.silent) {\n    opts.stdio = 'ignore';\n  } else {\n    opts.stdio = [0, 1, 2];\n  }\n\n  var code = 0;\n\n  // Welcome to the future\n  try {\n    // Bad things if we pass in a `shell` option to child_process.execFileSync,\n    // so we need to explicitly remove it here.\n    delete opts.shell;\n\n    child.execFileSync(common.config.execPath, execArgs, opts);\n  } catch (e) {\n    // Commands with non-zero exit code raise an exception.\n    code = e.status || DEFAULT_ERROR_CODE;\n  }\n\n  // fs.readFileSync uses buffer encoding by default, so call\n  // it without the encoding option if the encoding is 'buffer'.\n  // Also, if the exec timeout is too short for node to start up,\n  // the files will not be created, so these calls will throw.\n  var stdout = '';\n  var stderr = '';\n  if (opts.encoding === 'buffer') {\n    stdout = fs.readFileSync(stdoutFile);\n    stderr = fs.readFileSync(stderrFile);\n  } else {\n    stdout = fs.readFileSync(stdoutFile, opts.encoding);\n    stderr = fs.readFileSync(stderrFile, opts.encoding);\n  }\n\n  // No biggie if we can't erase the files now -- they're in a temp dir anyway\n  // and we locked down permissions (see the note above).\n  try { common.unlinkSync(paramsFile); } catch (e) {}\n  try { common.unlinkSync(stderrFile); } catch (e) {}\n  try { common.unlinkSync(stdoutFile); } catch (e) {}\n\n  if (code !== 0) {\n    // Note: `silent` should be unconditionally true to avoid double-printing\n    // the command's stderr, and to avoid printing any stderr when the user has\n    // set `shell.config.silent`.\n    common.error(stderr, code, { continue: true, silent: true });\n  }\n  var obj = common.ShellString(stdout, stderr, code);\n  return obj;\n} // execSync()\n\n// Wrapper around exec() to enable echoing output to console in real time\nfunction execAsync(cmd, opts, pipe, callback) {\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n    encoding: 'utf8',\n  }, opts);\n\n  var c = child.exec(cmd, opts, function (err, stdout, stderr) {\n    if (callback) {\n      if (!err) {\n        callback(0, stdout, stderr);\n      } else if (err.code === undefined) {\n        // See issue #536\n        /* istanbul ignore next */\n        callback(1, stdout, stderr);\n      } else {\n        callback(err.code, stdout, stderr);\n      }\n    }\n  });\n\n  if (pipe) c.stdin.end(pipe);\n\n  if (!opts.silent) {\n    c.stdout.pipe(process.stdout);\n    c.stderr.pipe(process.stderr);\n  }\n\n  return c;\n}\n\n//@\n//@ ### exec(command [, options] [, callback])\n//@\n//@ Available options:\n//@\n//@ + `async`: Asynchronous execution. If a callback is provided, it will be set to\n//@   `true`, regardless of the passed value (default: `false`).\n//@ + `silent`: Do not echo program output to console (default: `false`).\n//@ + `encoding`: Character encoding to use. Affects the values returned to stdout and stderr, and\n//@   what is written to stdout and stderr when not in silent mode (default: `'utf8'`).\n//@ + and any option available to Node.js's\n//@   [`child_process.exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var version = exec('node --version', {silent:true}).stdout;\n//@\n//@ var child = exec('some_long_running_process', {async:true});\n//@ child.stdout.on('data', function(data) {\n//@   /* ... do something with data ... */\n//@ });\n//@\n//@ exec('some_long_running_process', function(code, stdout, stderr) {\n//@   console.log('Exit code:', code);\n//@   console.log('Program output:', stdout);\n//@   console.log('Program stderr:', stderr);\n//@ });\n//@ ```\n//@\n//@ Executes the given `command` _synchronously_, unless otherwise specified.  When in synchronous\n//@ mode, this returns a `ShellString` (compatible with ShellJS v0.6.x, which returns an object\n//@ of the form `{ code:..., stdout:... , stderr:... }`). Otherwise, this returns the child process\n//@ object, and the `callback` receives the arguments `(code, stdout, stderr)`.\n//@\n//@ Not seeing the behavior you want? `exec()` runs everything through `sh`\n//@ by default (or `cmd.exe` on Windows), which differs from `bash`. If you\n//@ need bash-specific behavior, try out the `{shell: 'path/to/bash'}` option.\nfunction _exec(command, options, callback) {\n  options = options || {};\n  if (!command) common.error('must specify command');\n\n  var pipe = common.readFromPipe();\n\n  // Callback is defined instead of options.\n  if (typeof options === 'function') {\n    callback = options;\n    options = { async: true };\n  }\n\n  // Callback is defined with options.\n  if (typeof options === 'object' && typeof callback === 'function') {\n    options.async = true;\n  }\n\n  options = common.extend({\n    silent: common.config.silent,\n    async: false,\n  }, options);\n\n  if (options.async) {\n    return execAsync(command, options, pipe, callback);\n  } else {\n    return execSync(command, options, pipe);\n  }\n}\nmodule.exports = _exec;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}