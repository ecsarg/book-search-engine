{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.externalMissingOnBase = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst externalMissingOnBase = ({\n  schema\n}) => {\n  const errors = [];\n  const types = schema.getTypeMap();\n\n  for (const [typeName, namedType] of Object.entries(types)) {\n    if (!graphql_1.isObjectType(namedType)) continue;\n    const typeFederationMetadata = utils_1.getFederationMetadata(namedType);\n\n    if (typeFederationMetadata === null || typeFederationMetadata === void 0 ? void 0 : typeFederationMetadata.externals) {\n      for (const [serviceName, externalFieldsForService] of Object.entries(typeFederationMetadata.externals)) {\n        for (const {\n          field: externalField\n        } of externalFieldsForService) {\n          const externalFieldName = externalField.name.value;\n          const allFields = namedType.getFields();\n          const matchingBaseField = allFields[externalFieldName];\n\n          if (!matchingBaseField) {\n            errors.push(utils_1.errorWithCode('EXTERNAL_MISSING_ON_BASE', utils_1.logServiceAndType(serviceName, typeName, externalFieldName) + `marked @external but ${externalFieldName} is not defined on the base service of ${typeName} (${typeFederationMetadata.serviceName})`, utils_1.findDirectivesOnNode(externalField, 'external')));\n            continue;\n          }\n\n          const fieldFederationMetadata = utils_1.getFederationMetadata(matchingBaseField);\n\n          if (fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.serviceName) {\n            errors.push(utils_1.errorWithCode('EXTERNAL_MISSING_ON_BASE', utils_1.logServiceAndType(serviceName, typeName, externalFieldName) + `marked @external but ${externalFieldName} was defined in ${fieldFederationMetadata.serviceName}, not in the service that owns ${typeName} (${typeFederationMetadata.serviceName})`, utils_1.findDirectivesOnNode(externalField, 'external')));\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};\n\nexports.externalMissingOnBase = externalMissingOnBase;","map":{"version":3,"sources":["../../../../src/composition/validate/postComposition/externalMissingOnBase.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAMO,MAAM,qBAAqB,GAA6B,CAAC;EAAE;AAAF,CAAD,KAAe;EAC5E,MAAM,MAAM,GAAmB,EAA/B;EAEA,MAAM,KAAK,GAAG,MAAM,CAAC,UAAP,EAAd;;EACA,KAAK,MAAM,CAAC,QAAD,EAAW,SAAX,CAAX,IAAoC,MAAM,CAAC,OAAP,CAAe,KAAf,CAApC,EAA2D;IAEzD,IAAI,CAAC,SAAA,CAAA,YAAA,CAAa,SAAb,CAAL,EAA8B;IAE9B,MAAM,sBAAsB,GAAG,OAAA,CAAA,qBAAA,CAAsB,SAAtB,CAA/B;;IAIA,IAAI,sBAAsB,KAAA,IAAtB,IAAA,sBAAsB,KAAA,KAAA,CAAtB,GAAsB,KAAA,CAAtB,GAAA,sBAAsB,CAAE,SAA5B,EAAuC;MAErC,KAAK,MAAM,CAAC,WAAD,EAAc,wBAAd,CAAX,IAAsD,MAAM,CAAC,OAAP,CACpD,sBAAsB,CAAC,SAD6B,CAAtD,EAEG;QAED,KAAK,MAAM;UAAE,KAAK,EAAE;QAAT,CAAX,IAAuC,wBAAvC,EAAiE;UAC/D,MAAM,iBAAiB,GAAG,aAAa,CAAC,IAAd,CAAmB,KAA7C;UACA,MAAM,SAAS,GAAG,SAAS,CAAC,SAAV,EAAlB;UACA,MAAM,iBAAiB,GAAG,SAAS,CAAC,iBAAD,CAAnC;;UAGA,IAAI,CAAC,iBAAL,EAAwB;YACtB,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,0BADF,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,QAA/B,EAAyC,iBAAzC,IACE,wBAAwB,iBAAiB,0CAA0C,QAAQ,KAAK,sBAAsB,CAAC,WAAW,GAHtI,EAIE,OAAA,CAAA,oBAAA,CAAqB,aAArB,EAAoC,UAApC,CAJF,CADF;YAQA;UACD;;UAID,MAAM,uBAAuB,GAAG,OAAA,CAAA,qBAAA,CAAsB,iBAAtB,CAAhC;;UAEA,IAAI,uBAAuB,KAAA,IAAvB,IAAA,uBAAuB,KAAA,KAAA,CAAvB,GAAuB,KAAA,CAAvB,GAAA,uBAAuB,CAAE,WAA7B,EAA0C;YACxC,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,0BADF,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,QAA/B,EAAyC,iBAAzC,IACE,wBAAwB,iBAAiB,mBAAmB,uBAAuB,CAAC,WAAW,kCAAkC,QAAQ,KAAK,sBAAsB,CAAC,WAAW,GAHpL,EAIE,OAAA,CAAA,oBAAA,CAAqB,aAArB,EAAoC,UAApC,CAJF,CADF;UAQD;QACF;MACF;IACF;EACF;;EACD,OAAO,MAAP;AACD,CAvDM;;AAAM,OAAA,CAAA,qBAAA,GAAqB,qBAArB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.externalMissingOnBase = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nconst externalMissingOnBase = ({ schema }) => {\n    const errors = [];\n    const types = schema.getTypeMap();\n    for (const [typeName, namedType] of Object.entries(types)) {\n        if (!graphql_1.isObjectType(namedType))\n            continue;\n        const typeFederationMetadata = utils_1.getFederationMetadata(namedType);\n        if (typeFederationMetadata === null || typeFederationMetadata === void 0 ? void 0 : typeFederationMetadata.externals) {\n            for (const [serviceName, externalFieldsForService] of Object.entries(typeFederationMetadata.externals)) {\n                for (const { field: externalField } of externalFieldsForService) {\n                    const externalFieldName = externalField.name.value;\n                    const allFields = namedType.getFields();\n                    const matchingBaseField = allFields[externalFieldName];\n                    if (!matchingBaseField) {\n                        errors.push(utils_1.errorWithCode('EXTERNAL_MISSING_ON_BASE', utils_1.logServiceAndType(serviceName, typeName, externalFieldName) +\n                            `marked @external but ${externalFieldName} is not defined on the base service of ${typeName} (${typeFederationMetadata.serviceName})`, utils_1.findDirectivesOnNode(externalField, 'external')));\n                        continue;\n                    }\n                    const fieldFederationMetadata = utils_1.getFederationMetadata(matchingBaseField);\n                    if (fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.serviceName) {\n                        errors.push(utils_1.errorWithCode('EXTERNAL_MISSING_ON_BASE', utils_1.logServiceAndType(serviceName, typeName, externalFieldName) +\n                            `marked @external but ${externalFieldName} was defined in ${fieldFederationMetadata.serviceName}, not in the service that owns ${typeName} (${typeFederationMetadata.serviceName})`, utils_1.findDirectivesOnNode(externalField, 'external')));\n                    }\n                }\n            }\n        }\n    }\n    return errors;\n};\nexports.externalMissingOnBase = externalMissingOnBase;\n//# sourceMappingURL=externalMissingOnBase.js.map"]},"metadata":{},"sourceType":"script"}