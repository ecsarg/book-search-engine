{"ast":null,"code":"// Copyright (C) 2011-2015 John Hewson\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\nvar stream = require('stream'),\n    util = require('util'),\n    timers = require('timers'); // convinience API\n\n\nmodule.exports = function (readStream, options) {\n  return module.exports.createStream(readStream, options);\n}; // basic API\n\n\nmodule.exports.createStream = function (readStream, options) {\n  if (readStream) {\n    return createLineStream(readStream, options);\n  } else {\n    return new LineStream(options);\n  }\n}; // deprecated API\n\n\nmodule.exports.createLineStream = function (readStream) {\n  console.log('WARNING: byline#createLineStream is deprecated and will be removed soon');\n  return createLineStream(readStream);\n};\n\nfunction createLineStream(readStream, options) {\n  if (!readStream) {\n    throw new Error('expected readStream');\n  }\n\n  if (!readStream.readable) {\n    throw new Error('readStream must be readable');\n  }\n\n  var ls = new LineStream(options);\n  readStream.pipe(ls);\n  return ls;\n} //\n// using the new node v0.10 \"streams2\" API\n//\n\n\nmodule.exports.LineStream = LineStream;\n\nfunction LineStream(options) {\n  stream.Transform.call(this, options);\n  options = options || {}; // use objectMode to stop the output from being buffered\n  // which re-concatanates the lines, just without newlines.\n\n  this._readableState.objectMode = true;\n  this._lineBuffer = [];\n  this._keepEmptyLines = options.keepEmptyLines || false;\n  this._lastChunkEndedWithCR = false; // take the source's encoding if we don't have one\n\n  var self = this;\n  this.on('pipe', function (src) {\n    if (!self.encoding) {\n      // but we can't do this for old-style streams\n      if (src instanceof stream.Readable) {\n        self.encoding = src._readableState.encoding;\n      }\n    }\n  });\n}\n\nutil.inherits(LineStream, stream.Transform);\n\nLineStream.prototype._transform = function (chunk, encoding, done) {\n  // decode binary chunks as UTF-8\n  encoding = encoding || 'utf8';\n\n  if (Buffer.isBuffer(chunk)) {\n    if (encoding == 'buffer') {\n      chunk = chunk.toString(); // utf8\n\n      encoding = 'utf8';\n    } else {\n      chunk = chunk.toString(encoding);\n    }\n  }\n\n  this._chunkEncoding = encoding; // see: http://www.unicode.org/reports/tr18/#Line_Boundaries\n\n  var lines = chunk.split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g); // don't split CRLF which spans chunks\n\n  if (this._lastChunkEndedWithCR && chunk[0] == '\\n') {\n    lines.shift();\n  }\n\n  if (this._lineBuffer.length > 0) {\n    this._lineBuffer[this._lineBuffer.length - 1] += lines[0];\n    lines.shift();\n  }\n\n  this._lastChunkEndedWithCR = chunk[chunk.length - 1] == '\\r';\n  this._lineBuffer = this._lineBuffer.concat(lines);\n\n  this._pushBuffer(encoding, 1, done);\n};\n\nLineStream.prototype._pushBuffer = function (encoding, keep, done) {\n  // always buffer the last (possibly partial) line\n  while (this._lineBuffer.length > keep) {\n    var line = this._lineBuffer.shift(); // skip empty lines\n\n\n    if (this._keepEmptyLines || line.length > 0) {\n      if (!this.push(this._reencode(line, encoding))) {\n        // when the high-water mark is reached, defer pushes until the next tick\n        var self = this;\n        timers.setImmediate(function () {\n          self._pushBuffer(encoding, keep, done);\n        });\n        return;\n      }\n    }\n  }\n\n  done();\n};\n\nLineStream.prototype._flush = function (done) {\n  this._pushBuffer(this._chunkEncoding, 0, done);\n}; // see Readable::push\n\n\nLineStream.prototype._reencode = function (line, chunkEncoding) {\n  if (this.encoding && this.encoding != chunkEncoding) {\n    return new Buffer(line, chunkEncoding).toString(this.encoding);\n  } else if (this.encoding) {\n    // this should be the most common case, i.e. we're using an encoded source stream\n    return line;\n  } else {\n    return new Buffer(line, chunkEncoding);\n  }\n};","map":{"version":3,"names":["stream","require","util","timers","module","exports","readStream","options","createStream","createLineStream","LineStream","console","log","Error","readable","ls","pipe","Transform","call","_readableState","objectMode","_lineBuffer","_keepEmptyLines","keepEmptyLines","_lastChunkEndedWithCR","self","on","src","encoding","Readable","inherits","prototype","_transform","chunk","done","Buffer","isBuffer","toString","_chunkEncoding","lines","split","shift","length","concat","_pushBuffer","keep","line","push","_reencode","setImmediate","_flush","chunkEncoding"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/byline/lib/byline.js"],"sourcesContent":["// Copyright (C) 2011-2015 John Hewson\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\nvar stream = require('stream'),\n    util = require('util'),\n    timers = require('timers');\n\n// convinience API\nmodule.exports = function(readStream, options) {\n  return module.exports.createStream(readStream, options);\n};\n\n// basic API\nmodule.exports.createStream = function(readStream, options) {\n  if (readStream) {\n    return createLineStream(readStream, options);\n  } else {\n    return new LineStream(options);\n  }\n};\n\n// deprecated API\nmodule.exports.createLineStream = function(readStream) {\n  console.log('WARNING: byline#createLineStream is deprecated and will be removed soon');\n  return createLineStream(readStream);\n};\n\nfunction createLineStream(readStream, options) {\n  if (!readStream) {\n    throw new Error('expected readStream');\n  }\n  if (!readStream.readable) {\n    throw new Error('readStream must be readable');\n  }\n  var ls = new LineStream(options);\n  readStream.pipe(ls);\n  return ls;\n}\n\n//\n// using the new node v0.10 \"streams2\" API\n//\n\nmodule.exports.LineStream = LineStream;\n\nfunction LineStream(options) {\n  stream.Transform.call(this, options);\n  options = options || {};\n\n  // use objectMode to stop the output from being buffered\n  // which re-concatanates the lines, just without newlines.\n  this._readableState.objectMode = true;\n  this._lineBuffer = [];\n  this._keepEmptyLines = options.keepEmptyLines || false;\n  this._lastChunkEndedWithCR = false;\n\n  // take the source's encoding if we don't have one\n  var self = this;\n  this.on('pipe', function(src) {\n    if (!self.encoding) {\n      // but we can't do this for old-style streams\n      if (src instanceof stream.Readable) {\n        self.encoding = src._readableState.encoding;\n      }\n    }\n  });\n}\nutil.inherits(LineStream, stream.Transform);\n\nLineStream.prototype._transform = function(chunk, encoding, done) {\n  // decode binary chunks as UTF-8\n  encoding = encoding || 'utf8';\n  \n  if (Buffer.isBuffer(chunk)) {\n    if (encoding == 'buffer') {\n      chunk = chunk.toString(); // utf8\n      encoding = 'utf8';\n    }\n    else {\n     chunk = chunk.toString(encoding);\n    }\n  }\n  this._chunkEncoding = encoding;\n  \n  // see: http://www.unicode.org/reports/tr18/#Line_Boundaries\n  var lines = chunk.split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g);\n  \n  // don't split CRLF which spans chunks\n  if (this._lastChunkEndedWithCR && chunk[0] == '\\n') {\n    lines.shift();\n  }\n  \n  if (this._lineBuffer.length > 0) {\n    this._lineBuffer[this._lineBuffer.length - 1] += lines[0];\n    lines.shift();\n  }\n\n  this._lastChunkEndedWithCR = chunk[chunk.length - 1] == '\\r';\n  this._lineBuffer = this._lineBuffer.concat(lines);\n  this._pushBuffer(encoding, 1, done);\n};\n\nLineStream.prototype._pushBuffer = function(encoding, keep, done) {\n  // always buffer the last (possibly partial) line\n  while (this._lineBuffer.length > keep) {\n    var line = this._lineBuffer.shift();\n    // skip empty lines\n    if (this._keepEmptyLines || line.length > 0 ) {\n      if (!this.push(this._reencode(line, encoding))) {\n        // when the high-water mark is reached, defer pushes until the next tick\n        var self = this;\n        timers.setImmediate(function() {\n          self._pushBuffer(encoding, keep, done);\n        });\n        return;\n      }\n    }\n  }\n  done();\n};\n\nLineStream.prototype._flush = function(done) {\n  this._pushBuffer(this._chunkEncoding, 0, done);\n};\n\n// see Readable::push\nLineStream.prototype._reencode = function(line, chunkEncoding) {\n  if (this.encoding && this.encoding != chunkEncoding) {\n    return new Buffer(line, chunkEncoding).toString(this.encoding);\n  }\n  else if (this.encoding) {\n    // this should be the most common case, i.e. we're using an encoded source stream\n    return line;\n  }\n  else {\n    return new Buffer(line, chunkEncoding);\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;AAAA,IACIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CADlB;AAAA,IAEIE,MAAM,GAAGF,OAAO,CAAC,QAAD,CAFpB,C,CAIA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,UAASC,UAAT,EAAqBC,OAArB,EAA8B;EAC7C,OAAOH,MAAM,CAACC,OAAP,CAAeG,YAAf,CAA4BF,UAA5B,EAAwCC,OAAxC,CAAP;AACD,CAFD,C,CAIA;;;AACAH,MAAM,CAACC,OAAP,CAAeG,YAAf,GAA8B,UAASF,UAAT,EAAqBC,OAArB,EAA8B;EAC1D,IAAID,UAAJ,EAAgB;IACd,OAAOG,gBAAgB,CAACH,UAAD,EAAaC,OAAb,CAAvB;EACD,CAFD,MAEO;IACL,OAAO,IAAIG,UAAJ,CAAeH,OAAf,CAAP;EACD;AACF,CAND,C,CAQA;;;AACAH,MAAM,CAACC,OAAP,CAAeI,gBAAf,GAAkC,UAASH,UAAT,EAAqB;EACrDK,OAAO,CAACC,GAAR,CAAY,yEAAZ;EACA,OAAOH,gBAAgB,CAACH,UAAD,CAAvB;AACD,CAHD;;AAKA,SAASG,gBAAT,CAA0BH,UAA1B,EAAsCC,OAAtC,EAA+C;EAC7C,IAAI,CAACD,UAAL,EAAiB;IACf,MAAM,IAAIO,KAAJ,CAAU,qBAAV,CAAN;EACD;;EACD,IAAI,CAACP,UAAU,CAACQ,QAAhB,EAA0B;IACxB,MAAM,IAAID,KAAJ,CAAU,6BAAV,CAAN;EACD;;EACD,IAAIE,EAAE,GAAG,IAAIL,UAAJ,CAAeH,OAAf,CAAT;EACAD,UAAU,CAACU,IAAX,CAAgBD,EAAhB;EACA,OAAOA,EAAP;AACD,C,CAED;AACA;AACA;;;AAEAX,MAAM,CAACC,OAAP,CAAeK,UAAf,GAA4BA,UAA5B;;AAEA,SAASA,UAAT,CAAoBH,OAApB,EAA6B;EAC3BP,MAAM,CAACiB,SAAP,CAAiBC,IAAjB,CAAsB,IAAtB,EAA4BX,OAA5B;EACAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAF2B,CAI3B;EACA;;EACA,KAAKY,cAAL,CAAoBC,UAApB,GAAiC,IAAjC;EACA,KAAKC,WAAL,GAAmB,EAAnB;EACA,KAAKC,eAAL,GAAuBf,OAAO,CAACgB,cAAR,IAA0B,KAAjD;EACA,KAAKC,qBAAL,GAA6B,KAA7B,CAT2B,CAW3B;;EACA,IAAIC,IAAI,GAAG,IAAX;EACA,KAAKC,EAAL,CAAQ,MAAR,EAAgB,UAASC,GAAT,EAAc;IAC5B,IAAI,CAACF,IAAI,CAACG,QAAV,EAAoB;MAClB;MACA,IAAID,GAAG,YAAY3B,MAAM,CAAC6B,QAA1B,EAAoC;QAClCJ,IAAI,CAACG,QAAL,GAAgBD,GAAG,CAACR,cAAJ,CAAmBS,QAAnC;MACD;IACF;EACF,CAPD;AAQD;;AACD1B,IAAI,CAAC4B,QAAL,CAAcpB,UAAd,EAA0BV,MAAM,CAACiB,SAAjC;;AAEAP,UAAU,CAACqB,SAAX,CAAqBC,UAArB,GAAkC,UAASC,KAAT,EAAgBL,QAAhB,EAA0BM,IAA1B,EAAgC;EAChE;EACAN,QAAQ,GAAGA,QAAQ,IAAI,MAAvB;;EAEA,IAAIO,MAAM,CAACC,QAAP,CAAgBH,KAAhB,CAAJ,EAA4B;IAC1B,IAAIL,QAAQ,IAAI,QAAhB,EAA0B;MACxBK,KAAK,GAAGA,KAAK,CAACI,QAAN,EAAR,CADwB,CACE;;MAC1BT,QAAQ,GAAG,MAAX;IACD,CAHD,MAIK;MACJK,KAAK,GAAGA,KAAK,CAACI,QAAN,CAAeT,QAAf,CAAR;IACA;EACF;;EACD,KAAKU,cAAL,GAAsBV,QAAtB,CAbgE,CAehE;;EACA,IAAIW,KAAK,GAAGN,KAAK,CAACO,KAAN,CAAY,kCAAZ,CAAZ,CAhBgE,CAkBhE;;EACA,IAAI,KAAKhB,qBAAL,IAA8BS,KAAK,CAAC,CAAD,CAAL,IAAY,IAA9C,EAAoD;IAClDM,KAAK,CAACE,KAAN;EACD;;EAED,IAAI,KAAKpB,WAAL,CAAiBqB,MAAjB,GAA0B,CAA9B,EAAiC;IAC/B,KAAKrB,WAAL,CAAiB,KAAKA,WAAL,CAAiBqB,MAAjB,GAA0B,CAA3C,KAAiDH,KAAK,CAAC,CAAD,CAAtD;IACAA,KAAK,CAACE,KAAN;EACD;;EAED,KAAKjB,qBAAL,GAA6BS,KAAK,CAACA,KAAK,CAACS,MAAN,GAAe,CAAhB,CAAL,IAA2B,IAAxD;EACA,KAAKrB,WAAL,GAAmB,KAAKA,WAAL,CAAiBsB,MAAjB,CAAwBJ,KAAxB,CAAnB;;EACA,KAAKK,WAAL,CAAiBhB,QAAjB,EAA2B,CAA3B,EAA8BM,IAA9B;AACD,CA/BD;;AAiCAxB,UAAU,CAACqB,SAAX,CAAqBa,WAArB,GAAmC,UAAShB,QAAT,EAAmBiB,IAAnB,EAAyBX,IAAzB,EAA+B;EAChE;EACA,OAAO,KAAKb,WAAL,CAAiBqB,MAAjB,GAA0BG,IAAjC,EAAuC;IACrC,IAAIC,IAAI,GAAG,KAAKzB,WAAL,CAAiBoB,KAAjB,EAAX,CADqC,CAErC;;;IACA,IAAI,KAAKnB,eAAL,IAAwBwB,IAAI,CAACJ,MAAL,GAAc,CAA1C,EAA8C;MAC5C,IAAI,CAAC,KAAKK,IAAL,CAAU,KAAKC,SAAL,CAAeF,IAAf,EAAqBlB,QAArB,CAAV,CAAL,EAAgD;QAC9C;QACA,IAAIH,IAAI,GAAG,IAAX;QACAtB,MAAM,CAAC8C,YAAP,CAAoB,YAAW;UAC7BxB,IAAI,CAACmB,WAAL,CAAiBhB,QAAjB,EAA2BiB,IAA3B,EAAiCX,IAAjC;QACD,CAFD;QAGA;MACD;IACF;EACF;;EACDA,IAAI;AACL,CAjBD;;AAmBAxB,UAAU,CAACqB,SAAX,CAAqBmB,MAArB,GAA8B,UAAShB,IAAT,EAAe;EAC3C,KAAKU,WAAL,CAAiB,KAAKN,cAAtB,EAAsC,CAAtC,EAAyCJ,IAAzC;AACD,CAFD,C,CAIA;;;AACAxB,UAAU,CAACqB,SAAX,CAAqBiB,SAArB,GAAiC,UAASF,IAAT,EAAeK,aAAf,EAA8B;EAC7D,IAAI,KAAKvB,QAAL,IAAiB,KAAKA,QAAL,IAAiBuB,aAAtC,EAAqD;IACnD,OAAO,IAAIhB,MAAJ,CAAWW,IAAX,EAAiBK,aAAjB,EAAgCd,QAAhC,CAAyC,KAAKT,QAA9C,CAAP;EACD,CAFD,MAGK,IAAI,KAAKA,QAAT,EAAmB;IACtB;IACA,OAAOkB,IAAP;EACD,CAHI,MAIA;IACH,OAAO,IAAIX,MAAJ,CAAWW,IAAX,EAAiBK,aAAjB,CAAP;EACD;AACF,CAXD"},"metadata":{},"sourceType":"script"}