{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst indent = require(\"indent-string\");\n\nconst stripAnsi = require(\"strip-ansi\");\n\nconst width = require('string-width');\n\nconst wrap = require('wrap-ansi');\n\nconst widestLine = require('widest-line');\n\nfunction renderList(input, opts) {\n  if (input.length === 0) {\n    return '';\n  }\n\n  const renderMultiline = () => {\n    let output = '';\n\n    for (let [left, right] of input) {\n      if (!left && !right) continue;\n\n      if (left) {\n        if (opts.stripAnsi) left = stripAnsi(left);\n        output += wrap(left.trim(), opts.maxWidth, {\n          hard: true,\n          trim: true\n        });\n      }\n\n      if (right) {\n        if (opts.stripAnsi) right = stripAnsi(right);\n        output += '\\n';\n        output += indent(wrap(right.trim(), opts.maxWidth - 2, {\n          hard: true,\n          trim: true\n        }), 4);\n      }\n\n      output += '\\n\\n';\n    }\n\n    return output.trim();\n  };\n\n  if (opts.multiline) return renderMultiline();\n  const maxLength = widestLine(input.map(i => i[0]).join('\\n'));\n  let output = '';\n  let spacer = opts.spacer || '\\n';\n  let cur = '';\n\n  for (const [left, r] of input) {\n    let right = r;\n\n    if (cur) {\n      output += spacer;\n      output += cur;\n    }\n\n    cur = left || '';\n    if (opts.stripAnsi) cur = stripAnsi(cur);\n\n    if (!right) {\n      cur = cur.trim();\n      continue;\n    }\n\n    if (opts.stripAnsi) right = stripAnsi(right);\n    right = wrap(right.trim(), opts.maxWidth - (maxLength + 2), {\n      hard: true,\n      trim: true\n    }); // right = wrap(right.trim(), screen.stdtermwidth - (maxLength + 4), {hard: true, trim: false})\n\n    const [first, ...lines] = right.split('\\n').map(s => s.trim());\n    cur += ' '.repeat(maxLength - width(cur) + 2);\n    cur += first;\n\n    if (lines.length === 0) {\n      continue;\n    } // if we start putting too many lines down, render in multiline format\n\n\n    if (lines.length > 4) return renderMultiline(); // if spacer is not defined, separate all rows with extra newline\n\n    if (!opts.spacer) spacer = '\\n\\n';\n    cur += '\\n';\n    cur += indent(lines.join('\\n'), maxLength + 2);\n  }\n\n  if (cur) {\n    output += spacer;\n    output += cur;\n  }\n\n  return output.trim();\n}\n\nexports.renderList = renderList;","map":{"version":3,"names":["Object","defineProperty","exports","value","indent","require","stripAnsi","width","wrap","widestLine","renderList","input","opts","length","renderMultiline","output","left","right","trim","maxWidth","hard","multiline","maxLength","map","i","join","spacer","cur","r","first","lines","split","s","repeat"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/@oclif/help/lib/list.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indent = require(\"indent-string\");\nconst stripAnsi = require(\"strip-ansi\");\nconst width = require('string-width');\nconst wrap = require('wrap-ansi');\nconst widestLine = require('widest-line');\nfunction renderList(input, opts) {\n    if (input.length === 0) {\n        return '';\n    }\n    const renderMultiline = () => {\n        let output = '';\n        for (let [left, right] of input) {\n            if (!left && !right)\n                continue;\n            if (left) {\n                if (opts.stripAnsi)\n                    left = stripAnsi(left);\n                output += wrap(left.trim(), opts.maxWidth, { hard: true, trim: true });\n            }\n            if (right) {\n                if (opts.stripAnsi)\n                    right = stripAnsi(right);\n                output += '\\n';\n                output += indent(wrap(right.trim(), opts.maxWidth - 2, { hard: true, trim: true }), 4);\n            }\n            output += '\\n\\n';\n        }\n        return output.trim();\n    };\n    if (opts.multiline)\n        return renderMultiline();\n    const maxLength = widestLine(input.map(i => i[0]).join('\\n'));\n    let output = '';\n    let spacer = opts.spacer || '\\n';\n    let cur = '';\n    for (const [left, r] of input) {\n        let right = r;\n        if (cur) {\n            output += spacer;\n            output += cur;\n        }\n        cur = left || '';\n        if (opts.stripAnsi)\n            cur = stripAnsi(cur);\n        if (!right) {\n            cur = cur.trim();\n            continue;\n        }\n        if (opts.stripAnsi)\n            right = stripAnsi(right);\n        right = wrap(right.trim(), opts.maxWidth - (maxLength + 2), { hard: true, trim: true });\n        // right = wrap(right.trim(), screen.stdtermwidth - (maxLength + 4), {hard: true, trim: false})\n        const [first, ...lines] = right.split('\\n').map(s => s.trim());\n        cur += ' '.repeat(maxLength - width(cur) + 2);\n        cur += first;\n        if (lines.length === 0) {\n            continue;\n        }\n        // if we start putting too many lines down, render in multiline format\n        if (lines.length > 4)\n            return renderMultiline();\n        // if spacer is not defined, separate all rows with extra newline\n        if (!opts.spacer)\n            spacer = '\\n\\n';\n        cur += '\\n';\n        cur += indent(lines.join('\\n'), maxLength + 2);\n    }\n    if (cur) {\n        output += spacer;\n        output += cur;\n    }\n    return output.trim();\n}\nexports.renderList = renderList;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}