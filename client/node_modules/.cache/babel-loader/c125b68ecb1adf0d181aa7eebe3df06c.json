{"ast":null,"code":"// https://confluence.jetbrains.com/display/TCD10/Predefined+Build+Parameters\nconst javaProperties = require('java-properties');\n\nconst fromEntries = require('fromentries');\n\nconst {\n  branch\n} = require('../lib/git.js');\n\nconst PROPERTIES_MAPPING = {\n  root: 'teamcity.build.workingDir',\n  branch: 'teamcity.build.branch'\n};\n\nconst safeReadProperties = filePath => {\n  try {\n    return javaProperties.of(filePath);\n  } catch {\n    return undefined;\n  }\n};\n\nconst getProperties = ({\n  env,\n  cwd\n}) => {\n  const buildProperties = env.TEAMCITY_BUILD_PROPERTIES_FILE ? safeReadProperties(env.TEAMCITY_BUILD_PROPERTIES_FILE) : undefined;\n  const configFile = buildProperties ? buildProperties.get('teamcity.configuration.properties.file') : undefined;\n  const configProperties = configFile ? safeReadProperties(configFile) : configFile;\n  return fromEntries(Object.keys(PROPERTIES_MAPPING).map(key => [key, (buildProperties ? buildProperties.get(PROPERTIES_MAPPING[key]) : undefined) || (configProperties ? configProperties.get(PROPERTIES_MAPPING[key]) : undefined) || (key === 'branch' ? branch({\n    env,\n    cwd\n  }) : undefined)]));\n};\n\nmodule.exports = {\n  detect({\n    env\n  }) {\n    return Boolean(env.TEAMCITY_VERSION);\n  },\n\n  configuration({\n    env,\n    cwd\n  }) {\n    return {\n      name: 'TeamCity',\n      service: 'teamcity',\n      commit: env.BUILD_VCS_NUMBER,\n      build: env.BUILD_NUMBER,\n      slug: env.TEAMCITY_BUILDCONF_NAME,\n      ...getProperties({\n        env,\n        cwd\n      })\n    };\n  }\n\n};","map":{"version":3,"names":["javaProperties","require","fromEntries","branch","PROPERTIES_MAPPING","root","safeReadProperties","filePath","of","undefined","getProperties","env","cwd","buildProperties","TEAMCITY_BUILD_PROPERTIES_FILE","configFile","get","configProperties","Object","keys","map","key","module","exports","detect","Boolean","TEAMCITY_VERSION","configuration","name","service","commit","BUILD_VCS_NUMBER","build","BUILD_NUMBER","slug","TEAMCITY_BUILDCONF_NAME"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/env-ci/services/teamcity.js"],"sourcesContent":["// https://confluence.jetbrains.com/display/TCD10/Predefined+Build+Parameters\n\nconst javaProperties = require('java-properties');\nconst fromEntries = require('fromentries');\n\nconst {branch} = require('../lib/git.js');\n\nconst PROPERTIES_MAPPING = {root: 'teamcity.build.workingDir', branch: 'teamcity.build.branch'};\n\nconst safeReadProperties = (filePath) => {\n  try {\n    return javaProperties.of(filePath);\n  } catch {\n    return undefined;\n  }\n};\n\nconst getProperties = ({env, cwd}) => {\n  const buildProperties = env.TEAMCITY_BUILD_PROPERTIES_FILE\n    ? safeReadProperties(env.TEAMCITY_BUILD_PROPERTIES_FILE)\n    : undefined;\n  const configFile = buildProperties ? buildProperties.get('teamcity.configuration.properties.file') : undefined;\n  const configProperties = configFile ? safeReadProperties(configFile) : configFile;\n\n  return fromEntries(\n    Object.keys(PROPERTIES_MAPPING).map((key) => [\n      key,\n      (buildProperties ? buildProperties.get(PROPERTIES_MAPPING[key]) : undefined) ||\n        (configProperties ? configProperties.get(PROPERTIES_MAPPING[key]) : undefined) ||\n        (key === 'branch' ? branch({env, cwd}) : undefined),\n    ])\n  );\n};\n\nmodule.exports = {\n  detect({env}) {\n    return Boolean(env.TEAMCITY_VERSION);\n  },\n  configuration({env, cwd}) {\n    return {\n      name: 'TeamCity',\n      service: 'teamcity',\n      commit: env.BUILD_VCS_NUMBER,\n      build: env.BUILD_NUMBER,\n      slug: env.TEAMCITY_BUILDCONF_NAME,\n      ...getProperties({env, cwd}),\n    };\n  },\n};\n"],"mappings":"AAAA;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;;AAEA,MAAM;EAACE;AAAD,IAAWF,OAAO,CAAC,eAAD,CAAxB;;AAEA,MAAMG,kBAAkB,GAAG;EAACC,IAAI,EAAE,2BAAP;EAAoCF,MAAM,EAAE;AAA5C,CAA3B;;AAEA,MAAMG,kBAAkB,GAAIC,QAAD,IAAc;EACvC,IAAI;IACF,OAAOP,cAAc,CAACQ,EAAf,CAAkBD,QAAlB,CAAP;EACD,CAFD,CAEE,MAAM;IACN,OAAOE,SAAP;EACD;AACF,CAND;;AAQA,MAAMC,aAAa,GAAG,CAAC;EAACC,GAAD;EAAMC;AAAN,CAAD,KAAgB;EACpC,MAAMC,eAAe,GAAGF,GAAG,CAACG,8BAAJ,GACpBR,kBAAkB,CAACK,GAAG,CAACG,8BAAL,CADE,GAEpBL,SAFJ;EAGA,MAAMM,UAAU,GAAGF,eAAe,GAAGA,eAAe,CAACG,GAAhB,CAAoB,wCAApB,CAAH,GAAmEP,SAArG;EACA,MAAMQ,gBAAgB,GAAGF,UAAU,GAAGT,kBAAkB,CAACS,UAAD,CAArB,GAAoCA,UAAvE;EAEA,OAAOb,WAAW,CAChBgB,MAAM,CAACC,IAAP,CAAYf,kBAAZ,EAAgCgB,GAAhC,CAAqCC,GAAD,IAAS,CAC3CA,GAD2C,EAE3C,CAACR,eAAe,GAAGA,eAAe,CAACG,GAAhB,CAAoBZ,kBAAkB,CAACiB,GAAD,CAAtC,CAAH,GAAkDZ,SAAlE,MACGQ,gBAAgB,GAAGA,gBAAgB,CAACD,GAAjB,CAAqBZ,kBAAkB,CAACiB,GAAD,CAAvC,CAAH,GAAmDZ,SADtE,MAEGY,GAAG,KAAK,QAAR,GAAmBlB,MAAM,CAAC;IAACQ,GAAD;IAAMC;EAAN,CAAD,CAAzB,GAAwCH,SAF3C,CAF2C,CAA7C,CADgB,CAAlB;AAQD,CAfD;;AAiBAa,MAAM,CAACC,OAAP,GAAiB;EACfC,MAAM,CAAC;IAACb;EAAD,CAAD,EAAQ;IACZ,OAAOc,OAAO,CAACd,GAAG,CAACe,gBAAL,CAAd;EACD,CAHc;;EAIfC,aAAa,CAAC;IAAChB,GAAD;IAAMC;EAAN,CAAD,EAAa;IACxB,OAAO;MACLgB,IAAI,EAAE,UADD;MAELC,OAAO,EAAE,UAFJ;MAGLC,MAAM,EAAEnB,GAAG,CAACoB,gBAHP;MAILC,KAAK,EAAErB,GAAG,CAACsB,YAJN;MAKLC,IAAI,EAAEvB,GAAG,CAACwB,uBALL;MAML,GAAGzB,aAAa,CAAC;QAACC,GAAD;QAAMC;MAAN,CAAD;IANX,CAAP;EAQD;;AAbc,CAAjB"},"metadata":{},"sourceType":"script"}