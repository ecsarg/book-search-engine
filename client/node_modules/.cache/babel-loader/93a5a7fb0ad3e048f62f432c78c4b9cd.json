{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requiresFieldsMissingExternal = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst requiresFieldsMissingExternal = ({\n  schema,\n  serviceList\n}) => {\n  var _a, _b;\n\n  const errors = [];\n  const types = schema.getTypeMap();\n\n  for (const [typeName, namedType] of Object.entries(types)) {\n    if (!graphql_1.isObjectType(namedType)) continue;\n\n    for (const [fieldName, field] of Object.entries(namedType.getFields())) {\n      const fieldFederationMetadata = utils_1.getFederationMetadata(field);\n      const serviceName = fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.serviceName;\n      if (!serviceName) continue;\n\n      if (fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.requires) {\n        const typeFederationMetadata = utils_1.getFederationMetadata(namedType);\n        const externalFieldsOnTypeForService = (_a = typeFederationMetadata === null || typeFederationMetadata === void 0 ? void 0 : typeFederationMetadata.externals) === null || _a === void 0 ? void 0 : _a[serviceName];\n        const selections = fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.requires;\n\n        for (const selection of selections) {\n          const foundMatchingExternal = externalFieldsOnTypeForService ? externalFieldsOnTypeForService.some(ext => ext.field.name.value === selection.name.value) : undefined;\n\n          if (!foundMatchingExternal) {\n            const typeNode = utils_1.findTypeNodeInServiceList(typeName, serviceName, serviceList);\n            const fieldNode = typeNode && 'fields' in typeNode ? (_b = typeNode.fields) === null || _b === void 0 ? void 0 : _b.find(field => field.name.value === fieldName) : undefined;\n            const selectionSetNode = utils_1.findSelectionSetOnNode(fieldNode, 'requires', utils_1.printFieldSet(selections));\n            errors.push(utils_1.errorWithCode('REQUIRES_FIELDS_MISSING_EXTERNAL', utils_1.logServiceAndType(serviceName, typeName, fieldName) + `requires the field \\`${selection.name.value}\\` to be marked as @external.`, selectionSetNode));\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};\n\nexports.requiresFieldsMissingExternal = requiresFieldsMissingExternal;","map":{"version":3,"sources":["../../../../src/composition/validate/postComposition/requiresFieldsMissingExternal.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.requiresFieldsMissingExternal = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nconst requiresFieldsMissingExternal = ({ schema, serviceList, }) => {\n    var _a, _b;\n    const errors = [];\n    const types = schema.getTypeMap();\n    for (const [typeName, namedType] of Object.entries(types)) {\n        if (!graphql_1.isObjectType(namedType))\n            continue;\n        for (const [fieldName, field] of Object.entries(namedType.getFields())) {\n            const fieldFederationMetadata = utils_1.getFederationMetadata(field);\n            const serviceName = fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.serviceName;\n            if (!serviceName)\n                continue;\n            if (fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.requires) {\n                const typeFederationMetadata = utils_1.getFederationMetadata(namedType);\n                const externalFieldsOnTypeForService = (_a = typeFederationMetadata === null || typeFederationMetadata === void 0 ? void 0 : typeFederationMetadata.externals) === null || _a === void 0 ? void 0 : _a[serviceName];\n                const selections = fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.requires;\n                for (const selection of selections) {\n                    const foundMatchingExternal = externalFieldsOnTypeForService\n                        ? externalFieldsOnTypeForService.some(ext => ext.field.name.value === selection.name.value)\n                        : undefined;\n                    if (!foundMatchingExternal) {\n                        const typeNode = utils_1.findTypeNodeInServiceList(typeName, serviceName, serviceList);\n                        const fieldNode = typeNode &&\n                            'fields' in typeNode ?\n                            (_b = typeNode.fields) === null || _b === void 0 ? void 0 : _b.find(field => field.name.value === fieldName) : undefined;\n                        const selectionSetNode = utils_1.findSelectionSetOnNode(fieldNode, 'requires', utils_1.printFieldSet(selections));\n                        errors.push(utils_1.errorWithCode('REQUIRES_FIELDS_MISSING_EXTERNAL', utils_1.logServiceAndType(serviceName, typeName, fieldName) +\n                            `requires the field \\`${selection.name.value}\\` to be marked as @external.`, selectionSetNode));\n                    }\n                }\n            }\n        }\n    }\n    return errors;\n};\nexports.requiresFieldsMissingExternal = requiresFieldsMissingExternal;\n//# sourceMappingURL=requiresFieldsMissingExternal.js.map"]},"metadata":{},"sourceType":"script"}