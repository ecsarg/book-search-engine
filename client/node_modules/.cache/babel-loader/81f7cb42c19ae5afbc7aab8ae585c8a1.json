{"ast":null,"code":"const _ETA = require('./eta');\n\nconst _Terminal = require('./terminal');\n\nconst _formatter = require('./formatter');\n\nconst _EventEmitter = require('events'); // Progress-Bar constructor\n\n\nmodule.exports = class GenericBar extends _EventEmitter {\n  constructor(options) {\n    super(); // store options\n\n    this.options = options; // store terminal instance\n\n    this.terminal = this.options.terminal ? this.options.terminal : new _Terminal(this.options.stream); // the current bar value\n\n    this.value = 0; // bar start value (used for progress calculation)\n\n    this.startValue = 0; // the end value of the bar\n\n    this.total = 100; // last drawn string - only render on change!\n\n    this.lastDrawnString = null; // start time (used for eta calculation)\n\n    this.startTime = null; // stop time (used for duration calculation)\n\n    this.stopTime = null; // last update time\n\n    this.lastRedraw = Date.now(); // default eta calculator (will be re-create on start)\n\n    this.eta = new _ETA(this.options.etaBufferLength, 0, 0); // payload data\n\n    this.payload = {}; // progress bar active ?\n\n    this.isActive = false; // use default formatter or custom one ?\n\n    this.formatter = typeof this.options.format === 'function' ? this.options.format : _formatter;\n  } // internal render function\n\n\n  render(forceRendering = false) {\n    // formatter params\n    const params = {\n      progress: this.getProgress(),\n      eta: this.eta.getTime(),\n      startTime: this.startTime,\n      stopTime: this.stopTime,\n      total: this.total,\n      value: this.value,\n      maxWidth: this.terminal.getWidth()\n    }; // automatic eta update ? (long running processes)\n\n    if (this.options.etaAsynchronousUpdate) {\n      this.updateETA();\n    } // format string\n\n\n    const s = this.formatter(this.options, params, this.payload);\n    const forceRedraw = forceRendering || this.options.forceRedraw // force redraw in notty-mode!\n    || this.options.noTTYOutput && !this.terminal.isTTY(); // string changed ? only trigger redraw on change!\n\n    if (forceRedraw || this.lastDrawnString != s) {\n      // trigger event\n      this.emit('redraw-pre'); // set cursor to start of line\n\n      this.terminal.cursorTo(0, null); // write output\n\n      this.terminal.write(s); // clear to the right from cursor\n\n      this.terminal.clearRight(); // store string\n\n      this.lastDrawnString = s; // set last redraw time\n\n      this.lastRedraw = Date.now(); // trigger event\n\n      this.emit('redraw-post');\n    }\n  } // start the progress bar\n\n\n  start(total, startValue, payload) {\n    // set initial values\n    this.value = startValue || 0;\n    this.total = typeof total !== 'undefined' && total >= 0 ? total : 100; // set start value for progress calculation\n\n    this.startValue = startValue || 0; // store payload (optional)\n\n    this.payload = payload || {}; // store start time for duration+eta calculation\n\n    this.startTime = Date.now(); // reset stop time for 're-start' scenario (used for duration calculation)\n\n    this.stopTime = null; // reset string line buffer (redraw detection)\n\n    this.lastDrawnString = ''; // initialize eta buffer\n\n    this.eta = new _ETA(this.options.etaBufferLength, this.startTime, this.value); // set flag\n\n    this.isActive = true; // start event\n\n    this.emit('start', total, startValue);\n  } // stop the bar\n\n\n  stop() {\n    // set flag\n    this.isActive = false; // store stop timestamp to get total duration\n\n    this.stopTime = Date.now(); // stop event\n\n    this.emit('stop', this.total, this.value);\n  } // update the bar value\n  // update(value, payload)\n  // update(payload)\n\n\n  update(arg0, arg1 = {}) {\n    // value set ?\n    // update(value, [payload]);\n    if (typeof arg0 === 'number') {\n      // update value\n      this.value = arg0; // add new value; recalculate eta\n\n      this.eta.update(Date.now(), arg0, this.total);\n    } // extract payload\n    // update(value, payload)\n    // update(payload)\n\n\n    const payloadData = (typeof arg0 === 'object' ? arg0 : arg1) || {}; // update event (before stop() is called)\n\n    this.emit('update', this.total, this.value); // merge payload\n\n    for (const key in payloadData) {\n      this.payload[key] = payloadData[key];\n    } // limit reached ? autostop set ?\n\n\n    if (this.value >= this.getTotal() && this.options.stopOnComplete) {\n      this.stop();\n    }\n  } // calculate the actual progress value\n\n\n  getProgress() {\n    // calculate the normalized current progress\n    let progress = this.value / this.total; // use relative progress calculation ? range between startValue and total is then used as 100%\n    // startValue (offset) is ignored for calculations\n\n    if (this.options.progressCalculationRelative) {\n      progress = (this.value - this.startValue) / (this.total - this.startValue);\n    } // handle NaN Errors caused by total=0. Set to complete in this case\n\n\n    if (isNaN(progress)) {\n      progress = this.options && this.options.emptyOnZero ? 0.0 : 1.0;\n    } // limiter\n\n\n    progress = Math.min(Math.max(progress, 0.0), 1.0);\n    return progress;\n  } // update the bar value\n  // increment(delta, payload)\n  // increment(payload)\n\n\n  increment(arg0 = 1, arg1 = {}) {\n    // increment([payload]) => step=1\n    // handle the use case when `step` is omitted but payload is passed\n    if (typeof arg0 === 'object') {\n      this.update(this.value + 1, arg0); // increment([step=1], [payload={}])\n    } else {\n      this.update(this.value + arg0, arg1);\n    }\n  } // get the total (limit) value\n\n\n  getTotal() {\n    return this.total;\n  } // set the total (limit) value\n\n\n  setTotal(total) {\n    if (typeof total !== 'undefined' && total >= 0) {\n      this.total = total;\n    }\n  } // force eta calculation update (long running processes)\n\n\n  updateETA() {\n    // add new value; recalculate eta\n    this.eta.update(Date.now(), this.value, this.total);\n  }\n\n};","map":{"version":3,"names":["_ETA","require","_Terminal","_formatter","_EventEmitter","module","exports","GenericBar","constructor","options","terminal","stream","value","startValue","total","lastDrawnString","startTime","stopTime","lastRedraw","Date","now","eta","etaBufferLength","payload","isActive","formatter","format","render","forceRendering","params","progress","getProgress","getTime","maxWidth","getWidth","etaAsynchronousUpdate","updateETA","s","forceRedraw","noTTYOutput","isTTY","emit","cursorTo","write","clearRight","start","stop","update","arg0","arg1","payloadData","key","getTotal","stopOnComplete","progressCalculationRelative","isNaN","emptyOnZero","Math","min","max","increment","setTotal"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/cli-progress/lib/generic-bar.js"],"sourcesContent":["const _ETA = require('./eta');\nconst _Terminal = require('./terminal');\nconst _formatter = require('./formatter');\nconst _EventEmitter = require('events');\n\n// Progress-Bar constructor\nmodule.exports = class GenericBar extends _EventEmitter{\n\n    constructor(options){\n        super();\n\n        // store options\n        this.options = options;\n\n        // store terminal instance\n        this.terminal = (this.options.terminal) ? this.options.terminal : new _Terminal(this.options.stream);\n\n        // the current bar value\n        this.value = 0;\n\n        // bar start value (used for progress calculation)\n        this.startValue = 0;\n\n        // the end value of the bar\n        this.total = 100;\n\n        // last drawn string - only render on change!\n        this.lastDrawnString = null;\n\n        // start time (used for eta calculation)\n        this.startTime = null;\n\n        // stop time (used for duration calculation)\n        this.stopTime = null;\n\n        // last update time\n        this.lastRedraw = Date.now();\n\n        // default eta calculator (will be re-create on start)\n        this.eta = new _ETA(this.options.etaBufferLength, 0, 0);\n\n        // payload data\n        this.payload = {};\n\n        // progress bar active ?\n        this.isActive = false;\n\n        // use default formatter or custom one ?\n        this.formatter = (typeof this.options.format === 'function') ? this.options.format : _formatter;\n    }\n\n    // internal render function\n    render(forceRendering=false){\n\n        // formatter params\n        const params = {\n            progress: this.getProgress(),\n            eta: this.eta.getTime(),\n            startTime: this.startTime,\n            stopTime: this.stopTime,\n            total: this.total,\n            value: this.value,\n            maxWidth: this.terminal.getWidth()\n        };\n\n        // automatic eta update ? (long running processes)\n        if (this.options.etaAsynchronousUpdate){\n            this.updateETA();\n        }\n\n        // format string\n        const s = this.formatter(this.options, params, this.payload);\n\n        const forceRedraw = forceRendering || this.options.forceRedraw\n            // force redraw in notty-mode!\n            || (this.options.noTTYOutput && !this.terminal.isTTY());\n\n        // string changed ? only trigger redraw on change!\n        if (forceRedraw || this.lastDrawnString != s){\n            // trigger event\n            this.emit('redraw-pre');\n\n            // set cursor to start of line\n            this.terminal.cursorTo(0, null);\n\n            // write output\n            this.terminal.write(s);\n\n            // clear to the right from cursor\n            this.terminal.clearRight();\n\n            // store string\n            this.lastDrawnString = s;\n\n            // set last redraw time\n            this.lastRedraw = Date.now();\n\n            // trigger event\n            this.emit('redraw-post');\n        }\n    }\n\n    // start the progress bar\n    start(total, startValue, payload){\n        // set initial values\n        this.value = startValue || 0;\n        this.total = (typeof total !== 'undefined' && total >= 0) ? total : 100;\n\n        // set start value for progress calculation\n        this.startValue = (startValue || 0);\n\n        // store payload (optional)\n        this.payload = payload || {};\n\n        // store start time for duration+eta calculation\n        this.startTime = Date.now();\n\n        // reset stop time for 're-start' scenario (used for duration calculation)\n        this.stopTime = null;\n\n        // reset string line buffer (redraw detection)\n        this.lastDrawnString = '';\n\n        // initialize eta buffer\n        this.eta = new _ETA(this.options.etaBufferLength, this.startTime, this.value);\n\n        // set flag\n        this.isActive = true;\n\n        // start event\n        this.emit('start', total, startValue);\n    }\n\n    // stop the bar\n    stop(){\n        // set flag\n        this.isActive = false;\n        \n        // store stop timestamp to get total duration\n        this.stopTime = Date.now();\n\n        // stop event\n        this.emit('stop', this.total, this.value);\n    }\n\n    // update the bar value\n    // update(value, payload)\n    // update(payload)\n    update(arg0, arg1 = {}){\n        // value set ?\n        // update(value, [payload]);\n        if (typeof arg0 === 'number') {\n            // update value\n            this.value = arg0;\n\n            // add new value; recalculate eta\n            this.eta.update(Date.now(), arg0, this.total);\n        }\n\n        // extract payload\n        // update(value, payload)\n        // update(payload)\n        const payloadData = ((typeof arg0 === 'object') ? arg0 : arg1) || {};\n\n        // update event (before stop() is called)\n        this.emit('update', this.total, this.value);\n\n        // merge payload\n        for (const key in payloadData){\n            this.payload[key] = payloadData[key];\n        }\n\n        // limit reached ? autostop set ?\n        if (this.value >= this.getTotal() && this.options.stopOnComplete) {\n            this.stop();\n        }\n    }\n\n    // calculate the actual progress value\n    getProgress(){\n        // calculate the normalized current progress\n        let progress = (this.value/this.total);\n\n        // use relative progress calculation ? range between startValue and total is then used as 100%\n        // startValue (offset) is ignored for calculations\n        if (this.options.progressCalculationRelative){\n            progress = (this.value-this.startValue)/(this.total-this.startValue);\n        }\n\n        // handle NaN Errors caused by total=0. Set to complete in this case\n        if (isNaN(progress)){\n            progress = (this.options && this.options.emptyOnZero) ? 0.0 : 1.0;\n        }\n\n        // limiter\n        progress = Math.min(Math.max(progress, 0.0), 1.0);\n\n        return progress;\n    }\n\n    // update the bar value\n    // increment(delta, payload)\n    // increment(payload)\n    increment(arg0 = 1, arg1 = {}){\n        // increment([payload]) => step=1\n        // handle the use case when `step` is omitted but payload is passed\n        if (typeof arg0 === 'object') {\n            this.update(this.value + 1, arg0);\n        \n        // increment([step=1], [payload={}])\n        }else{\n            this.update(this.value + arg0, arg1);\n        }\n    }\n\n    // get the total (limit) value\n    getTotal(){\n        return this.total;\n    }\n\n    // set the total (limit) value\n    setTotal(total){\n        if (typeof total !== 'undefined' && total >= 0){\n            this.total = total;\n        }\n    }\n\n    // force eta calculation update (long running processes)\n    updateETA(){\n        // add new value; recalculate eta\n        this.eta.update(Date.now(), this.value, this.total);\n    }\n}\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,OAAD,CAApB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,QAAD,CAA7B,C,CAEA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,MAAMC,UAAN,SAAyBH,aAAzB,CAAsC;EAEnDI,WAAW,CAACC,OAAD,EAAS;IAChB,QADgB,CAGhB;;IACA,KAAKA,OAAL,GAAeA,OAAf,CAJgB,CAMhB;;IACA,KAAKC,QAAL,GAAiB,KAAKD,OAAL,CAAaC,QAAd,GAA0B,KAAKD,OAAL,CAAaC,QAAvC,GAAkD,IAAIR,SAAJ,CAAc,KAAKO,OAAL,CAAaE,MAA3B,CAAlE,CAPgB,CAShB;;IACA,KAAKC,KAAL,GAAa,CAAb,CAVgB,CAYhB;;IACA,KAAKC,UAAL,GAAkB,CAAlB,CAbgB,CAehB;;IACA,KAAKC,KAAL,GAAa,GAAb,CAhBgB,CAkBhB;;IACA,KAAKC,eAAL,GAAuB,IAAvB,CAnBgB,CAqBhB;;IACA,KAAKC,SAAL,GAAiB,IAAjB,CAtBgB,CAwBhB;;IACA,KAAKC,QAAL,GAAgB,IAAhB,CAzBgB,CA2BhB;;IACA,KAAKC,UAAL,GAAkBC,IAAI,CAACC,GAAL,EAAlB,CA5BgB,CA8BhB;;IACA,KAAKC,GAAL,GAAW,IAAIrB,IAAJ,CAAS,KAAKS,OAAL,CAAaa,eAAtB,EAAuC,CAAvC,EAA0C,CAA1C,CAAX,CA/BgB,CAiChB;;IACA,KAAKC,OAAL,GAAe,EAAf,CAlCgB,CAoChB;;IACA,KAAKC,QAAL,GAAgB,KAAhB,CArCgB,CAuChB;;IACA,KAAKC,SAAL,GAAkB,OAAO,KAAKhB,OAAL,CAAaiB,MAApB,KAA+B,UAAhC,GAA8C,KAAKjB,OAAL,CAAaiB,MAA3D,GAAoEvB,UAArF;EACH,CA3CkD,CA6CnD;;;EACAwB,MAAM,CAACC,cAAc,GAAC,KAAhB,EAAsB;IAExB;IACA,MAAMC,MAAM,GAAG;MACXC,QAAQ,EAAE,KAAKC,WAAL,EADC;MAEXV,GAAG,EAAE,KAAKA,GAAL,CAASW,OAAT,EAFM;MAGXhB,SAAS,EAAE,KAAKA,SAHL;MAIXC,QAAQ,EAAE,KAAKA,QAJJ;MAKXH,KAAK,EAAE,KAAKA,KALD;MAMXF,KAAK,EAAE,KAAKA,KAND;MAOXqB,QAAQ,EAAE,KAAKvB,QAAL,CAAcwB,QAAd;IAPC,CAAf,CAHwB,CAaxB;;IACA,IAAI,KAAKzB,OAAL,CAAa0B,qBAAjB,EAAuC;MACnC,KAAKC,SAAL;IACH,CAhBuB,CAkBxB;;;IACA,MAAMC,CAAC,GAAG,KAAKZ,SAAL,CAAe,KAAKhB,OAApB,EAA6BoB,MAA7B,EAAqC,KAAKN,OAA1C,CAAV;IAEA,MAAMe,WAAW,GAAGV,cAAc,IAAI,KAAKnB,OAAL,CAAa6B,WAA/B,CAChB;IADgB,GAEZ,KAAK7B,OAAL,CAAa8B,WAAb,IAA4B,CAAC,KAAK7B,QAAL,CAAc8B,KAAd,EAFrC,CArBwB,CAyBxB;;IACA,IAAIF,WAAW,IAAI,KAAKvB,eAAL,IAAwBsB,CAA3C,EAA6C;MACzC;MACA,KAAKI,IAAL,CAAU,YAAV,EAFyC,CAIzC;;MACA,KAAK/B,QAAL,CAAcgC,QAAd,CAAuB,CAAvB,EAA0B,IAA1B,EALyC,CAOzC;;MACA,KAAKhC,QAAL,CAAciC,KAAd,CAAoBN,CAApB,EARyC,CAUzC;;MACA,KAAK3B,QAAL,CAAckC,UAAd,GAXyC,CAazC;;MACA,KAAK7B,eAAL,GAAuBsB,CAAvB,CAdyC,CAgBzC;;MACA,KAAKnB,UAAL,GAAkBC,IAAI,CAACC,GAAL,EAAlB,CAjByC,CAmBzC;;MACA,KAAKqB,IAAL,CAAU,aAAV;IACH;EACJ,CA9FkD,CAgGnD;;;EACAI,KAAK,CAAC/B,KAAD,EAAQD,UAAR,EAAoBU,OAApB,EAA4B;IAC7B;IACA,KAAKX,KAAL,GAAaC,UAAU,IAAI,CAA3B;IACA,KAAKC,KAAL,GAAc,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,IAAI,CAA1C,GAA+CA,KAA/C,GAAuD,GAApE,CAH6B,CAK7B;;IACA,KAAKD,UAAL,GAAmBA,UAAU,IAAI,CAAjC,CAN6B,CAQ7B;;IACA,KAAKU,OAAL,GAAeA,OAAO,IAAI,EAA1B,CAT6B,CAW7B;;IACA,KAAKP,SAAL,GAAiBG,IAAI,CAACC,GAAL,EAAjB,CAZ6B,CAc7B;;IACA,KAAKH,QAAL,GAAgB,IAAhB,CAf6B,CAiB7B;;IACA,KAAKF,eAAL,GAAuB,EAAvB,CAlB6B,CAoB7B;;IACA,KAAKM,GAAL,GAAW,IAAIrB,IAAJ,CAAS,KAAKS,OAAL,CAAaa,eAAtB,EAAuC,KAAKN,SAA5C,EAAuD,KAAKJ,KAA5D,CAAX,CArB6B,CAuB7B;;IACA,KAAKY,QAAL,GAAgB,IAAhB,CAxB6B,CA0B7B;;IACA,KAAKiB,IAAL,CAAU,OAAV,EAAmB3B,KAAnB,EAA0BD,UAA1B;EACH,CA7HkD,CA+HnD;;;EACAiC,IAAI,GAAE;IACF;IACA,KAAKtB,QAAL,GAAgB,KAAhB,CAFE,CAIF;;IACA,KAAKP,QAAL,GAAgBE,IAAI,CAACC,GAAL,EAAhB,CALE,CAOF;;IACA,KAAKqB,IAAL,CAAU,MAAV,EAAkB,KAAK3B,KAAvB,EAA8B,KAAKF,KAAnC;EACH,CAzIkD,CA2InD;EACA;EACA;;;EACAmC,MAAM,CAACC,IAAD,EAAOC,IAAI,GAAG,EAAd,EAAiB;IACnB;IACA;IACA,IAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;MAC1B;MACA,KAAKpC,KAAL,GAAaoC,IAAb,CAF0B,CAI1B;;MACA,KAAK3B,GAAL,CAAS0B,MAAT,CAAgB5B,IAAI,CAACC,GAAL,EAAhB,EAA4B4B,IAA5B,EAAkC,KAAKlC,KAAvC;IACH,CATkB,CAWnB;IACA;IACA;;;IACA,MAAMoC,WAAW,GAAG,CAAE,OAAOF,IAAP,KAAgB,QAAjB,GAA6BA,IAA7B,GAAoCC,IAArC,KAA8C,EAAlE,CAdmB,CAgBnB;;IACA,KAAKR,IAAL,CAAU,QAAV,EAAoB,KAAK3B,KAAzB,EAAgC,KAAKF,KAArC,EAjBmB,CAmBnB;;IACA,KAAK,MAAMuC,GAAX,IAAkBD,WAAlB,EAA8B;MAC1B,KAAK3B,OAAL,CAAa4B,GAAb,IAAoBD,WAAW,CAACC,GAAD,CAA/B;IACH,CAtBkB,CAwBnB;;;IACA,IAAI,KAAKvC,KAAL,IAAc,KAAKwC,QAAL,EAAd,IAAiC,KAAK3C,OAAL,CAAa4C,cAAlD,EAAkE;MAC9D,KAAKP,IAAL;IACH;EACJ,CA1KkD,CA4KnD;;;EACAf,WAAW,GAAE;IACT;IACA,IAAID,QAAQ,GAAI,KAAKlB,KAAL,GAAW,KAAKE,KAAhC,CAFS,CAIT;IACA;;IACA,IAAI,KAAKL,OAAL,CAAa6C,2BAAjB,EAA6C;MACzCxB,QAAQ,GAAG,CAAC,KAAKlB,KAAL,GAAW,KAAKC,UAAjB,KAA8B,KAAKC,KAAL,GAAW,KAAKD,UAA9C,CAAX;IACH,CARQ,CAUT;;;IACA,IAAI0C,KAAK,CAACzB,QAAD,CAAT,EAAoB;MAChBA,QAAQ,GAAI,KAAKrB,OAAL,IAAgB,KAAKA,OAAL,CAAa+C,WAA9B,GAA6C,GAA7C,GAAmD,GAA9D;IACH,CAbQ,CAeT;;;IACA1B,QAAQ,GAAG2B,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS7B,QAAT,EAAmB,GAAnB,CAAT,EAAkC,GAAlC,CAAX;IAEA,OAAOA,QAAP;EACH,CAhMkD,CAkMnD;EACA;EACA;;;EACA8B,SAAS,CAACZ,IAAI,GAAG,CAAR,EAAWC,IAAI,GAAG,EAAlB,EAAqB;IAC1B;IACA;IACA,IAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;MAC1B,KAAKD,MAAL,CAAY,KAAKnC,KAAL,GAAa,CAAzB,EAA4BoC,IAA5B,EAD0B,CAG9B;IACC,CAJD,MAIK;MACD,KAAKD,MAAL,CAAY,KAAKnC,KAAL,GAAaoC,IAAzB,EAA+BC,IAA/B;IACH;EACJ,CA/MkD,CAiNnD;;;EACAG,QAAQ,GAAE;IACN,OAAO,KAAKtC,KAAZ;EACH,CApNkD,CAsNnD;;;EACA+C,QAAQ,CAAC/C,KAAD,EAAO;IACX,IAAI,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,IAAI,CAA7C,EAA+C;MAC3C,KAAKA,KAAL,GAAaA,KAAb;IACH;EACJ,CA3NkD,CA6NnD;;;EACAsB,SAAS,GAAE;IACP;IACA,KAAKf,GAAL,CAAS0B,MAAT,CAAgB5B,IAAI,CAACC,GAAL,EAAhB,EAA4B,KAAKR,KAAjC,EAAwC,KAAKE,KAA7C;EACH;;AAjOkD,CAAvD"},"metadata":{},"sourceType":"script"}