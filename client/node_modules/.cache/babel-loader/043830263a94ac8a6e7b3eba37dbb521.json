{"ast":null,"code":"const _GenericBar = require('./generic-bar');\n\nconst _options = require('./options'); // Progress-Bar constructor\n\n\nmodule.exports = class SingleBar extends _GenericBar {\n  constructor(options, preset) {\n    super(_options.parse(options, preset)); // the update timer\n\n    this.timer = null; // disable synchronous updates in notty mode\n\n    if (this.options.noTTYOutput && this.terminal.isTTY() === false) {\n      this.options.synchronousUpdate = false;\n    } // update interval\n\n\n    this.schedulingRate = this.terminal.isTTY() ? this.options.throttleTime : this.options.notTTYSchedule; // callback used for gracefulExit\n\n    this.sigintCallback = null;\n  } // internal render function\n\n\n  render() {\n    // stop timer\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    } // run internal rendering\n\n\n    super.render(); // add new line in notty mode!\n\n    if (this.options.noTTYOutput && this.terminal.isTTY() === false) {\n      this.terminal.newline();\n    } // next update\n\n\n    this.timer = setTimeout(this.render.bind(this), this.schedulingRate);\n  }\n\n  update(current, payload) {\n    // timer inactive ?\n    if (!this.timer) {\n      return;\n    }\n\n    super.update(current, payload); // trigger synchronous update ?\n    // check for throttle time \n\n    if (this.options.synchronousUpdate && this.lastRedraw + this.options.throttleTime * 2 < Date.now()) {\n      // force update\n      this.render();\n    }\n  } // start the progress bar\n\n\n  start(total, startValue, payload) {\n    // progress updates are only visible in TTY mode!\n    if (this.options.noTTYOutput === false && this.terminal.isTTY() === false) {\n      return;\n    } // add handler to restore cursor settings (stop the bar) on SIGINT/SIGTERM ?\n\n\n    if (this.sigintCallback === null && this.options.gracefulExit) {\n      this.sigintCallback = this.stop.bind(this);\n      process.once('SIGINT', this.sigintCallback);\n      process.once('SIGTERM', this.sigintCallback);\n    } // save current cursor settings\n\n\n    this.terminal.cursorSave(); // hide the cursor ?\n\n    if (this.options.hideCursor === true) {\n      this.terminal.cursor(false);\n    } // disable line wrapping ?\n\n\n    if (this.options.linewrap === false) {\n      this.terminal.lineWrapping(false);\n    } // initialize bar\n\n\n    super.start(total, startValue, payload); // redraw on start!\n\n    this.render();\n  } // stop the bar\n\n\n  stop() {\n    // timer inactive ?\n    if (!this.timer) {\n      return;\n    } // remove sigint listener\n\n\n    if (this.sigintCallback) {\n      process.removeListener('SIGINT', this.sigintCallback);\n      process.removeListener('SIGTERM', this.sigintCallback);\n      this.sigintCallback = null;\n    } // trigger final rendering\n\n\n    this.render(); // restore state\n\n    super.stop(); // stop timer\n\n    clearTimeout(this.timer);\n    this.timer = null; // cursor hidden ?\n\n    if (this.options.hideCursor === true) {\n      this.terminal.cursor(true);\n    } // re-enable line wrapping ?\n\n\n    if (this.options.linewrap === false) {\n      this.terminal.lineWrapping(true);\n    } // restore cursor on complete (position + settings)\n\n\n    this.terminal.cursorRestore(); // clear line on complete ?\n\n    if (this.options.clearOnComplete) {\n      this.terminal.cursorTo(0, null);\n      this.terminal.clearLine();\n    } else {\n      // new line on complete\n      this.terminal.newline();\n    }\n  }\n\n};","map":{"version":3,"names":["_GenericBar","require","_options","module","exports","SingleBar","constructor","options","preset","parse","timer","noTTYOutput","terminal","isTTY","synchronousUpdate","schedulingRate","throttleTime","notTTYSchedule","sigintCallback","render","clearTimeout","newline","setTimeout","bind","update","current","payload","lastRedraw","Date","now","start","total","startValue","gracefulExit","stop","process","once","cursorSave","hideCursor","cursor","linewrap","lineWrapping","removeListener","cursorRestore","clearOnComplete","cursorTo","clearLine"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/cli-progress/lib/single-bar.js"],"sourcesContent":["const _GenericBar = require('./generic-bar');\nconst _options = require('./options');\n\n// Progress-Bar constructor\nmodule.exports = class SingleBar extends _GenericBar{\n\n    constructor(options, preset){\n        super(_options.parse(options, preset));\n\n        // the update timer\n        this.timer = null;\n\n        // disable synchronous updates in notty mode\n        if (this.options.noTTYOutput && this.terminal.isTTY() === false){\n            this.options.synchronousUpdate = false;\n        }\n\n        // update interval\n        this.schedulingRate = (this.terminal.isTTY() ? this.options.throttleTime : this.options.notTTYSchedule);\n\n        // callback used for gracefulExit\n        this.sigintCallback = null;\n    }\n\n    // internal render function\n    render(){\n        // stop timer\n        if (this.timer){\n            clearTimeout(this.timer);\n            this.timer = null;\n        }\n\n        // run internal rendering\n        super.render();\n\n        // add new line in notty mode!\n        if (this.options.noTTYOutput && this.terminal.isTTY() === false){\n            this.terminal.newline();\n        }\n\n        // next update\n        this.timer = setTimeout(this.render.bind(this), this.schedulingRate);\n    }\n\n    update(current, payload){\n        // timer inactive ?\n        if (!this.timer) {\n            return;\n        }\n\n        super.update(current, payload);\n\n        // trigger synchronous update ?\n        // check for throttle time \n        if (this.options.synchronousUpdate && (this.lastRedraw + this.options.throttleTime*2) < Date.now()){\n            // force update\n            this.render();\n        }\n    }\n\n    // start the progress bar\n    start(total, startValue, payload){\n        // progress updates are only visible in TTY mode!\n        if (this.options.noTTYOutput === false && this.terminal.isTTY() === false){\n            return;\n        }\n\n        // add handler to restore cursor settings (stop the bar) on SIGINT/SIGTERM ?\n        if (this.sigintCallback === null && this.options.gracefulExit){\n            this.sigintCallback = this.stop.bind(this);\n            process.once('SIGINT', this.sigintCallback);\n            process.once('SIGTERM', this.sigintCallback);\n        }\n\n        // save current cursor settings\n        this.terminal.cursorSave();\n\n        // hide the cursor ?\n        if (this.options.hideCursor === true){\n            this.terminal.cursor(false);\n        }\n\n        // disable line wrapping ?\n        if (this.options.linewrap === false){\n            this.terminal.lineWrapping(false);\n        }\n\n        // initialize bar\n        super.start(total, startValue, payload);\n\n        // redraw on start!\n        this.render();\n    }\n\n    // stop the bar\n    stop(){\n        // timer inactive ?\n        if (!this.timer) {\n            return;\n        }\n        \n        // remove sigint listener\n        if (this.sigintCallback){\n            process.removeListener('SIGINT', this.sigintCallback);\n            process.removeListener('SIGTERM', this.sigintCallback);\n            this.sigintCallback = null;\n        }\n\n        // trigger final rendering\n        this.render();\n\n        // restore state\n        super.stop();\n\n        // stop timer\n        clearTimeout(this.timer);\n        this.timer = null;\n\n        // cursor hidden ?\n        if (this.options.hideCursor === true){\n            this.terminal.cursor(true);\n        }\n\n        // re-enable line wrapping ?\n        if (this.options.linewrap === false){\n            this.terminal.lineWrapping(true);\n        }\n\n        // restore cursor on complete (position + settings)\n        this.terminal.cursorRestore();\n\n        // clear line on complete ?\n        if (this.options.clearOnComplete){\n            this.terminal.cursorTo(0, null);\n            this.terminal.clearLine();\n        }else{\n            // new line on complete\n            this.terminal.newline();\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}