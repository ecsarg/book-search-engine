{"ast":null,"code":"'use strict';\n\nmodule.exports = (str, count, opts) => {\n  // Support older versions: use the third parameter as options.indent\n  // TODO: Remove the workaround in the next major version\n  const options = typeof opts === 'object' ? Object.assign({\n    indent: ' '\n  }, opts) : {\n    indent: opts || ' '\n  };\n  count = count === undefined ? 1 : count;\n\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof str}\\``);\n  }\n\n  if (typeof count !== 'number') {\n    throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof count}\\``);\n  }\n\n  if (typeof options.indent !== 'string') {\n    throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof options.indent}\\``);\n  }\n\n  if (count === 0) {\n    return str;\n  }\n\n  const regex = options.includeEmptyLines ? /^/mg : /^(?!\\s*$)/mg;\n  return str.replace(regex, options.indent.repeat(count));\n};","map":{"version":3,"names":["module","exports","str","count","opts","options","Object","assign","indent","undefined","TypeError","regex","includeEmptyLines","replace","repeat"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/listr-update-renderer/node_modules/indent-string/index.js"],"sourcesContent":["'use strict';\nmodule.exports = (str, count, opts) => {\n\t// Support older versions: use the third parameter as options.indent\n\t// TODO: Remove the workaround in the next major version\n\tconst options = typeof opts === 'object' ? Object.assign({indent: ' '}, opts) : {indent: opts || ' '};\n\tcount = count === undefined ? 1 : count;\n\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof str}\\``);\n\t}\n\n\tif (typeof count !== 'number') {\n\t\tthrow new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof count}\\``);\n\t}\n\n\tif (typeof options.indent !== 'string') {\n\t\tthrow new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof options.indent}\\``);\n\t}\n\n\tif (count === 0) {\n\t\treturn str;\n\t}\n\n\tconst regex = options.includeEmptyLines ? /^/mg : /^(?!\\s*$)/mg;\n\treturn str.replace(regex, options.indent.repeat(count));\n}\n;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,KAAN,EAAaC,IAAb,KAAsB;EACtC;EACA;EACA,MAAMC,OAAO,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2BE,MAAM,CAACC,MAAP,CAAc;IAACC,MAAM,EAAE;EAAT,CAAd,EAA6BJ,IAA7B,CAA3B,GAAgE;IAACI,MAAM,EAAEJ,IAAI,IAAI;EAAjB,CAAhF;EACAD,KAAK,GAAGA,KAAK,KAAKM,SAAV,GAAsB,CAAtB,GAA0BN,KAAlC;;EAEA,IAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;IAC5B,MAAM,IAAIQ,SAAJ,CAAe,gDAA+C,OAAOR,GAAI,IAAzE,CAAN;EACA;;EAED,IAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;IAC9B,MAAM,IAAIO,SAAJ,CAAe,gDAA+C,OAAOP,KAAM,IAA3E,CAAN;EACA;;EAED,IAAI,OAAOE,OAAO,CAACG,MAAf,KAA0B,QAA9B,EAAwC;IACvC,MAAM,IAAIE,SAAJ,CAAe,yDAAwD,OAAOL,OAAO,CAACG,MAAO,IAA7F,CAAN;EACA;;EAED,IAAIL,KAAK,KAAK,CAAd,EAAiB;IAChB,OAAOD,GAAP;EACA;;EAED,MAAMS,KAAK,GAAGN,OAAO,CAACO,iBAAR,GAA4B,KAA5B,GAAoC,aAAlD;EACA,OAAOV,GAAG,CAACW,OAAJ,CAAYF,KAAZ,EAAmBN,OAAO,CAACG,MAAR,CAAeM,MAAf,CAAsBX,KAAtB,CAAnB,CAAP;AACA,CAxBD"},"metadata":{},"sourceType":"script"}