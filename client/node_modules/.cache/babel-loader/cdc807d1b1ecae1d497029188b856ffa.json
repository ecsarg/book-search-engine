{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeIncludesDirective = exports.gatherDirectives = exports.otherKnownDirectiveDefinitions = exports.federationDirectives = exports.TagDirective = exports.ProvidesDirective = exports.RequiresDirective = exports.ExternalDirective = exports.ExtendsDirective = exports.KeyDirective = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nexports.KeyDirective = new graphql_1.GraphQLDirective({\n  name: 'key',\n  locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE],\n  args: {\n    fields: {\n      type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    }\n  }\n});\nexports.ExtendsDirective = new graphql_1.GraphQLDirective({\n  name: 'extends',\n  locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE]\n});\nexports.ExternalDirective = new graphql_1.GraphQLDirective({\n  name: 'external',\n  locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.FIELD_DEFINITION]\n});\nexports.RequiresDirective = new graphql_1.GraphQLDirective({\n  name: 'requires',\n  locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n  args: {\n    fields: {\n      type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    }\n  }\n});\nexports.ProvidesDirective = new graphql_1.GraphQLDirective({\n  name: 'provides',\n  locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n  args: {\n    fields: {\n      type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    }\n  }\n});\nexports.TagDirective = new graphql_1.GraphQLDirective({\n  name: 'tag',\n  locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n  isRepeatable: true,\n  args: {\n    name: {\n      type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    }\n  }\n});\nexports.federationDirectives = [exports.KeyDirective, exports.ExtendsDirective, exports.ExternalDirective, exports.RequiresDirective, exports.ProvidesDirective];\nexports.otherKnownDirectiveDefinitions = [exports.TagDirective];\nconst apolloTypeSystemDirectives = [...exports.federationDirectives, ...exports.otherKnownDirectiveDefinitions];\nexports.default = apolloTypeSystemDirectives;\n\nfunction hasDirectives(node) {\n  return Boolean('directives' in node && node.directives);\n}\n\nfunction gatherDirectives(type) {\n  let directives = [];\n\n  if ('extensionASTNodes' in type && type.extensionASTNodes) {\n    for (const node of type.extensionASTNodes) {\n      if (hasDirectives(node)) {\n        directives = directives.concat(node.directives);\n      }\n    }\n  }\n\n  if (type.astNode && hasDirectives(type.astNode)) directives = directives.concat(type.astNode.directives);\n  return directives;\n}\n\nexports.gatherDirectives = gatherDirectives;\n\nfunction typeIncludesDirective(type, directiveName) {\n  if (graphql_1.isInputObjectType(type)) return false;\n  const directives = gatherDirectives(type);\n  return directives.some(directive => directive.name.value === directiveName);\n}\n\nexports.typeIncludesDirective = typeIncludesDirective;","map":{"version":3,"sources":["../src/directives.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.typeIncludesDirective = exports.gatherDirectives = exports.otherKnownDirectiveDefinitions = exports.federationDirectives = exports.TagDirective = exports.ProvidesDirective = exports.RequiresDirective = exports.ExternalDirective = exports.ExtendsDirective = exports.KeyDirective = void 0;\nconst graphql_1 = require(\"graphql\");\nexports.KeyDirective = new graphql_1.GraphQLDirective({\n    name: 'key',\n    locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE],\n    args: {\n        fields: {\n            type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString),\n        },\n    },\n});\nexports.ExtendsDirective = new graphql_1.GraphQLDirective({\n    name: 'extends',\n    locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE],\n});\nexports.ExternalDirective = new graphql_1.GraphQLDirective({\n    name: 'external',\n    locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.FIELD_DEFINITION],\n});\nexports.RequiresDirective = new graphql_1.GraphQLDirective({\n    name: 'requires',\n    locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n    args: {\n        fields: {\n            type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString),\n        },\n    },\n});\nexports.ProvidesDirective = new graphql_1.GraphQLDirective({\n    name: 'provides',\n    locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n    args: {\n        fields: {\n            type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString),\n        },\n    },\n});\nexports.TagDirective = new graphql_1.GraphQLDirective({\n    name: 'tag',\n    locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n    isRepeatable: true,\n    args: {\n        name: {\n            type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString),\n        },\n    },\n});\nexports.federationDirectives = [\n    exports.KeyDirective,\n    exports.ExtendsDirective,\n    exports.ExternalDirective,\n    exports.RequiresDirective,\n    exports.ProvidesDirective,\n];\nexports.otherKnownDirectiveDefinitions = [exports.TagDirective];\nconst apolloTypeSystemDirectives = [\n    ...exports.federationDirectives,\n    ...exports.otherKnownDirectiveDefinitions,\n];\nexports.default = apolloTypeSystemDirectives;\nfunction hasDirectives(node) {\n    return Boolean('directives' in node && node.directives);\n}\nfunction gatherDirectives(type) {\n    let directives = [];\n    if ('extensionASTNodes' in type && type.extensionASTNodes) {\n        for (const node of type.extensionASTNodes) {\n            if (hasDirectives(node)) {\n                directives = directives.concat(node.directives);\n            }\n        }\n    }\n    if (type.astNode && hasDirectives(type.astNode))\n        directives = directives.concat(type.astNode.directives);\n    return directives;\n}\nexports.gatherDirectives = gatherDirectives;\nfunction typeIncludesDirective(type, directiveName) {\n    if (graphql_1.isInputObjectType(type))\n        return false;\n    const directives = gatherDirectives(type);\n    return directives.some(directive => directive.name.value === directiveName);\n}\nexports.typeIncludesDirective = typeIncludesDirective;\n//# sourceMappingURL=directives.js.map"]},"metadata":{},"sourceType":"script"}