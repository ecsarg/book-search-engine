{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Debug = void 0;\n\nconst createAndTrimStackTrace = () => {\n  let stack = new Error().stack;\n  return stack && stack.split(\"\\n\").length > 2 ? stack.split(\"\\n\").slice(3, 7).join(\"\\n\") : stack;\n};\n\nclass Debug {\n  static SetConnection(conn) {\n    Debug.connection = conn;\n\n    Debug.infoLogger = message => Debug.connection.sendNotification(\"serverDebugMessage\", {\n      type: \"info\",\n      message: message\n    });\n\n    Debug.warningLogger = message => Debug.connection.sendNotification(\"serverDebugMessage\", {\n      type: \"warning\",\n      message: message\n    });\n\n    Debug.errorLogger = message => Debug.connection.sendNotification(\"serverDebugMessage\", {\n      type: \"error\",\n      message: message\n    });\n  }\n\n  static SetLoggers({\n    info,\n    warning,\n    error\n  }) {\n    if (info) Debug.infoLogger = info;\n    if (warning) Debug.warningLogger = warning;\n    if (error) Debug.errorLogger = error;\n  }\n\n  static info(message) {\n    Debug.infoLogger(message);\n  }\n\n  static error(message) {\n    const stack = createAndTrimStackTrace();\n    Debug.errorLogger(`${message}\\n${stack}`);\n  }\n\n  static warning(message) {\n    Debug.warningLogger(message);\n  }\n\n  static sendErrorTelemetry(message) {\n    Debug.connection && Debug.connection.sendNotification(\"serverDebugMessage\", {\n      type: \"errorTelemetry\",\n      message: message\n    });\n  }\n\n}\n\nexports.Debug = Debug;\n\nDebug.infoLogger = message => console.log(\"[INFO] \" + message);\n\nDebug.warningLogger = message => console.warn(\"[WARNING] \" + message);\n\nDebug.errorLogger = message => console.error(\"[ERROR] \" + message);","map":{"version":3,"sources":["../../src/utilities/debug.ts"],"names":[],"mappings":";;;;;;;AAQA,MAAM,uBAAuB,GAAG,MAAK;EACnC,IAAI,KAAK,GAAuB,IAAI,KAAJ,GAAY,KAA5C;EAEA,OAAO,KAAK,IAAI,KAAK,CAAC,KAAN,CAAY,IAAZ,EAAkB,MAAlB,GAA2B,CAApC,GACH,KAAK,CAAC,KAAN,CAAY,IAAZ,EAAkB,KAAlB,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B,IAA9B,CAAmC,IAAnC,CADG,GAEH,KAFJ;AAGD,CAND;;AAUA,MAAa,KAAb,CAAkB;EAaW,OAAb,aAAa,CAAC,IAAD,EAAiB;IAC1C,KAAK,CAAC,UAAN,GAAmB,IAAnB;;IACA,KAAK,CAAC,UAAN,GAAoB,OAAD,IACjB,KAAK,CAAC,UAAN,CAAkB,gBAAlB,CAAmC,oBAAnC,EAAyD;MACvD,IAAI,EAAE,MADiD;MAEvD,OAAO,EAAE;IAF8C,CAAzD,CADF;;IAKA,KAAK,CAAC,aAAN,GAAuB,OAAD,IACpB,KAAK,CAAC,UAAN,CAAkB,gBAAlB,CAAmC,oBAAnC,EAAyD;MACvD,IAAI,EAAE,SADiD;MAEvD,OAAO,EAAE;IAF8C,CAAzD,CADF;;IAKA,KAAK,CAAC,WAAN,GAAqB,OAAD,IAClB,KAAK,CAAC,UAAN,CAAkB,gBAAlB,CAAmC,oBAAnC,EAAyD;MACvD,IAAI,EAAE,OADiD;MAEvD,OAAO,EAAE;IAF8C,CAAzD,CADF;EAKD;;EAMuB,OAAV,UAAU,CAAC;IACvB,IADuB;IAEvB,OAFuB;IAGvB;EAHuB,CAAD,EAQvB;IACC,IAAI,IAAJ,EAAU,KAAK,CAAC,UAAN,GAAmB,IAAnB;IACV,IAAI,OAAJ,EAAa,KAAK,CAAC,aAAN,GAAsB,OAAtB;IACb,IAAI,KAAJ,EAAW,KAAK,CAAC,WAAN,GAAoB,KAApB;EACZ;;EAEiB,OAAJ,IAAI,CAAC,OAAD,EAAgB;IAChC,KAAK,CAAC,UAAN,CAAiB,OAAjB;EACD;;EAEkB,OAAL,KAAK,CAAC,OAAD,EAAgB;IACjC,MAAM,KAAK,GAAG,uBAAuB,EAArC;IACA,KAAK,CAAC,WAAN,CAAkB,GAAG,OAAO,KAAK,KAAK,EAAtC;EACD;;EAEoB,OAAP,OAAO,CAAC,OAAD,EAAgB;IACnC,KAAK,CAAC,aAAN,CAAoB,OAApB;EACD;;EAE+B,OAAlB,kBAAkB,CAAC,OAAD,EAAgB;IAC9C,KAAK,CAAC,UAAN,IACE,KAAK,CAAC,UAAN,CAAiB,gBAAjB,CAAkC,oBAAlC,EAAwD;MACtD,IAAI,EAAE,gBADgD;MAEtD,OAAO,EAAE;IAF6C,CAAxD,CADF;EAKD;;AArEe;;AAAlB,OAAA,CAAA,KAAA,GAAA,KAAA;;AAEiB,KAAA,CAAA,UAAA,GAAsB,OAAD,IAClC,OAAO,CAAC,GAAR,CAAY,YAAY,OAAxB,CADa;;AAEA,KAAA,CAAA,aAAA,GAAyB,OAAD,IACrC,OAAO,CAAC,IAAR,CAAa,eAAe,OAA5B,CADa;;AAEA,KAAA,CAAA,WAAA,GAAuB,OAAD,IACnC,OAAO,CAAC,KAAR,CAAc,aAAa,OAA3B,CADa","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Debug = void 0;\nconst createAndTrimStackTrace = () => {\n    let stack = new Error().stack;\n    return stack && stack.split(\"\\n\").length > 2\n        ? stack.split(\"\\n\").slice(3, 7).join(\"\\n\")\n        : stack;\n};\nclass Debug {\n    static SetConnection(conn) {\n        Debug.connection = conn;\n        Debug.infoLogger = (message) => Debug.connection.sendNotification(\"serverDebugMessage\", {\n            type: \"info\",\n            message: message,\n        });\n        Debug.warningLogger = (message) => Debug.connection.sendNotification(\"serverDebugMessage\", {\n            type: \"warning\",\n            message: message,\n        });\n        Debug.errorLogger = (message) => Debug.connection.sendNotification(\"serverDebugMessage\", {\n            type: \"error\",\n            message: message,\n        });\n    }\n    static SetLoggers({ info, warning, error, }) {\n        if (info)\n            Debug.infoLogger = info;\n        if (warning)\n            Debug.warningLogger = warning;\n        if (error)\n            Debug.errorLogger = error;\n    }\n    static info(message) {\n        Debug.infoLogger(message);\n    }\n    static error(message) {\n        const stack = createAndTrimStackTrace();\n        Debug.errorLogger(`${message}\\n${stack}`);\n    }\n    static warning(message) {\n        Debug.warningLogger(message);\n    }\n    static sendErrorTelemetry(message) {\n        Debug.connection &&\n            Debug.connection.sendNotification(\"serverDebugMessage\", {\n                type: \"errorTelemetry\",\n                message: message,\n            });\n    }\n}\nexports.Debug = Debug;\nDebug.infoLogger = (message) => console.log(\"[INFO] \" + message);\nDebug.warningLogger = (message) => console.warn(\"[WARNING] \" + message);\nDebug.errorLogger = (message) => console.error(\"[ERROR] \" + message);\n//# sourceMappingURL=debug.js.map"]},"metadata":{},"sourceType":"script"}