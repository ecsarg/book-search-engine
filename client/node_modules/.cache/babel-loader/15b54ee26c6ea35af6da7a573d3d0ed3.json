{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEvalAwarePartialHost = exports.EvalState = exports.createRepl = exports.EVAL_FILENAME = void 0;\n\nconst diff_1 = require(\"diff\");\n\nconst os_1 = require(\"os\");\n\nconst path_1 = require(\"path\");\n\nconst repl_1 = require(\"repl\");\n\nconst vm_1 = require(\"vm\");\n\nconst index_1 = require(\"./index\");\n\nconst fs_1 = require(\"fs\");\n\nconst console_1 = require(\"console\");\n/**\n * Eval filename for REPL/debug.\n * @internal\n */\n\n\nexports.EVAL_FILENAME = `[eval].ts`;\n\nfunction createRepl(options = {}) {\n  var _a, _b, _c, _d, _e;\n\n  let service = options.service;\n  const state = (_a = options.state) !== null && _a !== void 0 ? _a : new EvalState(path_1.join(process.cwd(), exports.EVAL_FILENAME));\n  const evalAwarePartialHost = createEvalAwarePartialHost(state);\n  const stdin = (_b = options.stdin) !== null && _b !== void 0 ? _b : process.stdin;\n  const stdout = (_c = options.stdout) !== null && _c !== void 0 ? _c : process.stdout;\n  const stderr = (_d = options.stderr) !== null && _d !== void 0 ? _d : process.stderr;\n\n  const _console = stdout === process.stdout && stderr === process.stderr ? console : new console_1.Console(stdout, stderr);\n\n  const replService = {\n    state: (_e = options.state) !== null && _e !== void 0 ? _e : new EvalState(path_1.join(process.cwd(), exports.EVAL_FILENAME)),\n    setService,\n    evalCode,\n    nodeEval,\n    evalAwarePartialHost,\n    start,\n    stdin,\n    stdout,\n    stderr,\n    console: _console\n  };\n  return replService;\n\n  function setService(_service) {\n    service = _service;\n  }\n\n  function evalCode(code) {\n    return _eval(service, state, code);\n  }\n\n  function nodeEval(code, _context, _filename, callback) {\n    let err = null;\n    let result; // TODO: Figure out how to handle completion here.\n\n    if (code === '.scope') {\n      callback(err);\n      return;\n    }\n\n    try {\n      result = evalCode(code);\n    } catch (error) {\n      if (error instanceof index_1.TSError) {\n        // Support recoverable compilations using >= node 6.\n        if (repl_1.Recoverable && isRecoverable(error)) {\n          err = new repl_1.Recoverable(error);\n        } else {\n          console.error(error);\n        }\n      } else {\n        err = error;\n      }\n    }\n\n    return callback(err, result);\n  }\n\n  function start(code) {\n    // TODO assert that service is set; remove all ! postfixes\n    return startRepl(replService, service, state, code);\n  }\n}\n\nexports.createRepl = createRepl;\n/**\n * Eval state management. Stores virtual `[eval].ts` file\n */\n\nclass EvalState {\n  constructor(path) {\n    this.path = path;\n    /** @internal */\n\n    this.input = '';\n    /** @internal */\n\n    this.output = '';\n    /** @internal */\n\n    this.version = 0;\n    /** @internal */\n\n    this.lines = 0;\n  }\n\n}\n\nexports.EvalState = EvalState;\n\nfunction createEvalAwarePartialHost(state) {\n  function readFile(path) {\n    if (path === state.path) return state.input;\n\n    try {\n      return fs_1.readFileSync(path, 'utf8');\n    } catch (err) {\n      /* Ignore. */\n    }\n  }\n\n  function fileExists(path) {\n    if (path === state.path) return true;\n\n    try {\n      const stats = fs_1.statSync(path);\n      return stats.isFile() || stats.isFIFO();\n    } catch (err) {\n      return false;\n    }\n  }\n\n  return {\n    readFile,\n    fileExists\n  };\n}\n\nexports.createEvalAwarePartialHost = createEvalAwarePartialHost;\n/**\n * Evaluate the code snippet.\n */\n\nfunction _eval(service, state, input) {\n  const lines = state.lines;\n  const isCompletion = !/\\n$/.test(input);\n  const undo = appendEval(state, input);\n  let output;\n\n  try {\n    output = service.compile(state.input, state.path, -lines);\n  } catch (err) {\n    undo();\n    throw err;\n  } // Use `diff` to check for new JavaScript to execute.\n\n\n  const changes = diff_1.diffLines(state.output, output);\n\n  if (isCompletion) {\n    undo();\n  } else {\n    state.output = output;\n  }\n\n  return changes.reduce((result, change) => {\n    return change.added ? exec(change.value, state.path) : result;\n  }, undefined);\n}\n/**\n * Execute some code.\n */\n\n\nfunction exec(code, filename) {\n  const script = new vm_1.Script(code, {\n    filename: filename\n  });\n  return script.runInThisContext();\n}\n/**\n * Start a CLI REPL.\n */\n\n\nfunction startRepl(replService, service, state, code) {\n  // Eval incoming code before the REPL starts.\n  if (code) {\n    try {\n      replService.evalCode(`${code}\\n`);\n    } catch (err) {\n      replService.console.error(err);\n      process.exit(1);\n    }\n  }\n\n  const repl = repl_1.start({\n    prompt: '> ',\n    input: replService.stdin,\n    output: replService.stdout,\n    // Mimicking node's REPL implementation: https://github.com/nodejs/node/blob/168b22ba073ee1cbf8d0bcb4ded7ff3099335d04/lib/internal/repl.js#L28-L30\n    terminal: replService.stdout.isTTY && !parseInt(process.env.NODE_NO_READLINE, 10),\n    eval: replService.nodeEval,\n    useGlobal: true\n  }); // Bookmark the point where we should reset the REPL state.\n\n  const resetEval = appendEval(state, '');\n\n  function reset() {\n    resetEval(); // Hard fix for TypeScript forcing `Object.defineProperty(exports, ...)`.\n\n    exec('exports = module.exports', state.path);\n  }\n\n  reset();\n  repl.on('reset', reset);\n  repl.defineCommand('type', {\n    help: 'Check the type of a TypeScript identifier',\n    action: function (identifier) {\n      if (!identifier) {\n        repl.displayPrompt();\n        return;\n      }\n\n      const undo = appendEval(state, identifier);\n      const {\n        name,\n        comment\n      } = service.getTypeInfo(state.input, state.path, state.input.length);\n      undo();\n      if (name) repl.outputStream.write(`${name}\\n`);\n      if (comment) repl.outputStream.write(`${comment}\\n`);\n      repl.displayPrompt();\n    }\n  }); // Set up REPL history when available natively via node.js >= 11.\n\n  if (repl.setupHistory) {\n    const historyPath = process.env.TS_NODE_HISTORY || path_1.join(os_1.homedir(), '.ts_node_repl_history');\n    repl.setupHistory(historyPath, err => {\n      if (!err) return;\n      replService.console.error(err);\n      process.exit(1);\n    });\n  }\n}\n/**\n * Append to the eval instance and return an undo function.\n */\n\n\nfunction appendEval(state, input) {\n  const undoInput = state.input;\n  const undoVersion = state.version;\n  const undoOutput = state.output;\n  const undoLines = state.lines; // Handle ASI issues with TypeScript re-evaluation.\n\n  if (undoInput.charAt(undoInput.length - 1) === '\\n' && /^\\s*[\\/\\[(`-]/.test(input) && !/;\\s*$/.test(undoInput)) {\n    state.input = `${state.input.slice(0, -1)};\\n`;\n  }\n\n  state.input += input;\n  state.lines += lineCount(input);\n  state.version++;\n  return function () {\n    state.input = undoInput;\n    state.output = undoOutput;\n    state.version = undoVersion;\n    state.lines = undoLines;\n  };\n}\n/**\n * Count the number of lines.\n */\n\n\nfunction lineCount(value) {\n  let count = 0;\n\n  for (const char of value) {\n    if (char === '\\n') {\n      count++;\n    }\n  }\n\n  return count;\n}\n\nconst RECOVERY_CODES = new Set([1003, 1005, 1109, 1126, 1160, 1161, 2355 // \"A function whose declared type is neither 'void' nor 'any' must return a value.\"\n]);\n/**\n * Check if a function can recover gracefully.\n */\n\nfunction isRecoverable(error) {\n  return error.diagnosticCodes.every(code => RECOVERY_CODES.has(code));\n}","map":{"version":3,"sources":["../src/repl.ts"],"names":[],"mappings":"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","sourcesContent":["import { diffLines } from 'diff'\nimport { homedir } from 'os'\nimport { join } from 'path'\nimport { Recoverable, start } from 'repl'\nimport { Script } from 'vm'\nimport { Service, CreateOptions, TSError } from './index'\nimport { readFileSync, statSync } from 'fs'\nimport { Console } from 'console'\nimport * as tty from 'tty'\n\n/**\n * Eval filename for REPL/debug.\n * @internal\n */\nexport const EVAL_FILENAME = `[eval].ts`\n\nexport interface ReplService {\n  readonly state: EvalState\n  /**\n   * Bind this REPL to a ts-node compiler service.  A compiler service must be bound before `eval`-ing code or starting the REPL\n   */\n  setService (service: Service): void\n  evalCode (code: string): void\n  /**\n   * `eval` implementation compatible with node's REPL API\n   */\n  nodeEval (code: string, _context: any, _filename: string, callback: (err: Error | null, result?: any) => any): void\n  evalAwarePartialHost: EvalAwarePartialHost\n  /** Start a node REPL */\n  start (code?: string): void\n  /** @internal */\n  readonly stdin: NodeJS.ReadableStream\n  /** @internal */\n  readonly stdout: NodeJS.WritableStream\n  /** @internal */\n  readonly stderr: NodeJS.WritableStream\n  /** @internal */\n  readonly console: Console\n}\n\nexport interface CreateReplOptions {\n  service?: Service\n  state?: EvalState\n  stdin?: NodeJS.ReadableStream\n  stdout?: NodeJS.WritableStream\n  stderr?: NodeJS.WritableStream\n}\n\nexport function createRepl (options: CreateReplOptions = {}) {\n  let service = options.service\n  const state = options.state ?? new EvalState(join(process.cwd(), EVAL_FILENAME))\n  const evalAwarePartialHost = createEvalAwarePartialHost(state)\n  const stdin = options.stdin ?? process.stdin\n  const stdout = options.stdout ?? process.stdout\n  const stderr = options.stderr ?? process.stderr\n  const _console = stdout === process.stdout && stderr === process.stderr ? console : new Console(stdout, stderr)\n\n  const replService: ReplService = {\n    state: options.state ?? new EvalState(join(process.cwd(), EVAL_FILENAME)),\n    setService,\n    evalCode,\n    nodeEval,\n    evalAwarePartialHost,\n    start,\n    stdin,\n    stdout,\n    stderr,\n    console: _console\n  }\n  return replService\n\n  function setService (_service: Service) {\n    service = _service\n  }\n\n  function evalCode (code: string) {\n    return _eval(service!, state, code)\n  }\n\n  function nodeEval (code: string, _context: any, _filename: string, callback: (err: Error | null, result?: any) => any) {\n    let err: Error | null = null\n    let result: any\n\n    // TODO: Figure out how to handle completion here.\n    if (code === '.scope') {\n      callback(err)\n      return\n    }\n\n    try {\n      result = evalCode(code)\n    } catch (error) {\n      if (error instanceof TSError) {\n        // Support recoverable compilations using >= node 6.\n        if (Recoverable && isRecoverable(error)) {\n          err = new Recoverable(error)\n        } else {\n          console.error(error)\n        }\n      } else {\n        err = error\n      }\n    }\n\n    return callback(err, result)\n  }\n\n  function start (code?: string) {\n    // TODO assert that service is set; remove all ! postfixes\n    return startRepl(replService, service!, state, code)\n  }\n}\n\n/**\n * Eval state management. Stores virtual `[eval].ts` file\n */\nexport class EvalState {\n  /** @internal */\n  input = ''\n  /** @internal */\n  output = ''\n  /** @internal */\n  version = 0\n  /** @internal */\n  lines = 0\n\n  // tslint:disable-next-line:variable-name\n  __tsNodeEvalStateBrand: unknown\n\n  constructor (public path: string) { }\n}\n\n/**\n * Filesystem host functions which are aware of the \"virtual\" [eval].ts file used to compile REPL inputs.\n * Must be passed to `create()` to create a ts-node compiler service which can compile REPL inputs.\n */\nexport type EvalAwarePartialHost = Pick<CreateOptions, 'readFile' | 'fileExists'>\n\nexport function createEvalAwarePartialHost (state: EvalState): EvalAwarePartialHost {\n  function readFile (path: string) {\n    if (path === state.path) return state.input\n\n    try {\n      return readFileSync(path, 'utf8')\n    } catch (err) {/* Ignore. */}\n  }\n  function fileExists (path: string) {\n    if (path === state.path) return true\n\n    try {\n      const stats = statSync(path)\n      return stats.isFile() || stats.isFIFO()\n    } catch (err) {\n      return false\n    }\n  }\n  return { readFile, fileExists }\n}\n\n/**\n * Evaluate the code snippet.\n */\nfunction _eval (service: Service, state: EvalState, input: string) {\n  const lines = state.lines\n  const isCompletion = !/\\n$/.test(input)\n  const undo = appendEval(state, input)\n  let output: string\n\n  try {\n    output = service.compile(state.input, state.path, -lines)\n  } catch (err) {\n    undo()\n    throw err\n  }\n\n  // Use `diff` to check for new JavaScript to execute.\n  const changes = diffLines(state.output, output)\n\n  if (isCompletion) {\n    undo()\n  } else {\n    state.output = output\n  }\n\n  return changes.reduce((result, change) => {\n    return change.added ? exec(change.value, state.path) : result\n  }, undefined)\n}\n\n/**\n * Execute some code.\n */\nfunction exec (code: string, filename: string) {\n  const script = new Script(code, { filename: filename })\n\n  return script.runInThisContext()\n}\n\n/**\n * Start a CLI REPL.\n */\nfunction startRepl (replService: ReplService, service: Service, state: EvalState, code?: string) {\n  // Eval incoming code before the REPL starts.\n  if (code) {\n    try {\n      replService.evalCode(`${code}\\n`)\n    } catch (err) {\n      replService.console.error(err)\n      process.exit(1)\n    }\n  }\n\n  const repl = start({\n    prompt: '> ',\n    input: replService.stdin,\n    output: replService.stdout,\n    // Mimicking node's REPL implementation: https://github.com/nodejs/node/blob/168b22ba073ee1cbf8d0bcb4ded7ff3099335d04/lib/internal/repl.js#L28-L30\n    terminal: (replService.stdout as tty.WriteStream).isTTY && !parseInt(process.env.NODE_NO_READLINE!, 10),\n    eval: replService.nodeEval,\n    useGlobal: true\n  })\n\n  // Bookmark the point where we should reset the REPL state.\n  const resetEval = appendEval(state, '')\n\n  function reset () {\n    resetEval()\n\n    // Hard fix for TypeScript forcing `Object.defineProperty(exports, ...)`.\n    exec('exports = module.exports', state.path)\n  }\n\n  reset()\n  repl.on('reset', reset)\n\n  repl.defineCommand('type', {\n    help: 'Check the type of a TypeScript identifier',\n    action: function (identifier: string) {\n      if (!identifier) {\n        repl.displayPrompt()\n        return\n      }\n\n      const undo = appendEval(state, identifier)\n      const { name, comment } = service.getTypeInfo(state.input, state.path, state.input.length)\n\n      undo()\n\n      if (name) repl.outputStream.write(`${name}\\n`)\n      if (comment) repl.outputStream.write(`${comment}\\n`)\n      repl.displayPrompt()\n    }\n  })\n\n  // Set up REPL history when available natively via node.js >= 11.\n  if (repl.setupHistory) {\n    const historyPath = process.env.TS_NODE_HISTORY || join(homedir(), '.ts_node_repl_history')\n\n    repl.setupHistory(historyPath, err => {\n      if (!err) return\n\n      replService.console.error(err)\n      process.exit(1)\n    })\n  }\n}\n\n/**\n * Append to the eval instance and return an undo function.\n */\nfunction appendEval (state: EvalState, input: string) {\n  const undoInput = state.input\n  const undoVersion = state.version\n  const undoOutput = state.output\n  const undoLines = state.lines\n\n  // Handle ASI issues with TypeScript re-evaluation.\n  if (undoInput.charAt(undoInput.length - 1) === '\\n' && /^\\s*[\\/\\[(`-]/.test(input) && !/;\\s*$/.test(undoInput)) {\n    state.input = `${state.input.slice(0, -1)};\\n`\n  }\n\n  state.input += input\n  state.lines += lineCount(input)\n  state.version++\n\n  return function () {\n    state.input = undoInput\n    state.output = undoOutput\n    state.version = undoVersion\n    state.lines = undoLines\n  }\n}\n\n/**\n * Count the number of lines.\n */\nfunction lineCount (value: string) {\n  let count = 0\n\n  for (const char of value) {\n    if (char === '\\n') {\n      count++\n    }\n  }\n\n  return count\n}\n\nconst RECOVERY_CODES: Set<number> = new Set([\n  1003, // \"Identifier expected.\"\n  1005, // \"')' expected.\"\n  1109, // \"Expression expected.\"\n  1126, // \"Unexpected end of text.\"\n  1160, // \"Unterminated template literal.\"\n  1161, // \"Unterminated regular expression literal.\"\n  2355 // \"A function whose declared type is neither 'void' nor 'any' must return a value.\"\n])\n\n/**\n * Check if a function can recover gracefully.\n */\nfunction isRecoverable (error: TSError) {\n  return error.diagnosticCodes.every(code => RECOVERY_CODES.has(code))\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}