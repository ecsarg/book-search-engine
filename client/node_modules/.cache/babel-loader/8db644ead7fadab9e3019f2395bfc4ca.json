{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileSchemaProvider = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst fs_1 = require(\"fs\");\n\nconst path_1 = require(\"path\");\n\nconst utilities_1 = require(\"../../utilities\");\n\nconst apollo_graphql_1 = require(\"apollo-graphql\");\n\nconst federation_1 = require(\"@apollo/federation\");\n\nconst vscode_uri_1 = __importDefault(require(\"vscode-uri\"));\n\nclass FileSchemaProvider {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async resolveSchema() {\n    if (this.schema) return this.schema;\n    const {\n      path,\n      paths\n    } = this.config;\n    const documents = path ? [this.loadFileAndGetDocument(path)] : paths ? paths.map(this.loadFileAndGetDocument, this) : undefined;\n    if (!documents) throw new Error(`Schema could not be loaded for [${path ? path : paths ? paths.join(\", \") : \"undefined\"}]`);\n    this.schema = (0, apollo_graphql_1.buildSchemaFromSDL)(documents);\n    if (!this.schema) throw new Error(`Schema could not be loaded for ${path}`);\n    return this.schema;\n  }\n\n  loadFileAndGetDocument(path) {\n    let result;\n\n    try {\n      result = (0, fs_1.readFileSync)(path, {\n        encoding: \"utf-8\"\n      });\n    } catch (err) {\n      throw new Error(`Unable to read file ${path}. ${err.message}`);\n    }\n\n    const ext = (0, path_1.extname)(path);\n\n    if (ext === \".json\") {\n      const parsed = JSON.parse(result);\n\n      const __schema = parsed.data ? parsed.data.__schema : parsed.__schema ? parsed.__schema : parsed;\n\n      const schema = (0, graphql_1.buildClientSchema)({\n        __schema\n      });\n      return (0, graphql_1.parse)((0, graphql_1.printSchema)(schema));\n    } else if (ext === \".graphql\" || ext === \".graphqls\" || ext === \".gql\") {\n      const uri = vscode_uri_1.default.file((0, path_1.resolve)(path)).toString();\n      return (0, graphql_1.parse)(new graphql_1.Source(result, uri));\n    }\n\n    throw new Error(\"File Type not supported for schema loading. Must be a .json, .graphql, .gql, or .graphqls file\");\n  }\n\n  onSchemaChange(_handler) {\n    throw new Error(\"File watching not implemented yet\");\n    return () => {};\n  }\n\n  async resolveFederatedServiceSDL() {\n    if (this.federatedServiceSDL) return this.federatedServiceSDL;\n    const {\n      path,\n      paths\n    } = this.config;\n    const SDLs = path ? [this.loadFileAndGetSDL(path)] : paths ? paths.map(this.loadFileAndGetSDL, this) : undefined;\n    if (!SDLs || SDLs.filter(s => !Boolean(s)).length > 0) return utilities_1.Debug.error(`SDL could not be loaded for one of more files: [${path ? path : paths ? paths.join(\", \") : \"undefined\"}]`);\n    const federatedSchema = (0, federation_1.buildFederatedSchema)(SDLs.map(sdl => ({\n      typeDefs: (0, graphql_1.parse)(sdl)\n    })));\n    const queryType = federatedSchema.getQueryType();\n    if (!queryType) return utilities_1.Debug.error(\"No query type found for federated schema\");\n    const serviceField = queryType.getFields()[\"_service\"];\n    const serviceResults = serviceField && serviceField.resolve && serviceField.resolve(null, {}, null, {});\n    if (!serviceResults || !serviceResults.sdl) return utilities_1.Debug.error(\"No SDL resolver or result from federated schema after building\");\n    this.federatedServiceSDL = serviceResults.sdl;\n    return this.federatedServiceSDL;\n  }\n\n  loadFileAndGetSDL(path) {\n    let result;\n\n    try {\n      result = (0, fs_1.readFileSync)(path, {\n        encoding: \"utf-8\"\n      });\n    } catch (err) {\n      return utilities_1.Debug.error(`Unable to read file ${path}. ${err.message}`);\n    }\n\n    const ext = (0, path_1.extname)(path);\n\n    if (ext === \".graphql\" || ext === \".graphqls\" || ext === \".gql\") {\n      return result;\n    } else {\n      return utilities_1.Debug.error(\"When using localSchemaFile to check or push a federated service, you can only use .graphql, .gql, and .graphqls files\");\n    }\n  }\n\n}\n\nexports.FileSchemaProvider = FileSchemaProvider;","map":{"version":3,"sources":["../../../src/providers/schema/file.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileSchemaProvider = void 0;\nconst graphql_1 = require(\"graphql\");\nconst fs_1 = require(\"fs\");\nconst path_1 = require(\"path\");\nconst utilities_1 = require(\"../../utilities\");\nconst apollo_graphql_1 = require(\"apollo-graphql\");\nconst federation_1 = require(\"@apollo/federation\");\nconst vscode_uri_1 = __importDefault(require(\"vscode-uri\"));\nclass FileSchemaProvider {\n    constructor(config) {\n        this.config = config;\n    }\n    async resolveSchema() {\n        if (this.schema)\n            return this.schema;\n        const { path, paths } = this.config;\n        const documents = path\n            ? [this.loadFileAndGetDocument(path)]\n            : paths\n                ? paths.map(this.loadFileAndGetDocument, this)\n                : undefined;\n        if (!documents)\n            throw new Error(`Schema could not be loaded for [${path ? path : paths ? paths.join(\", \") : \"undefined\"}]`);\n        this.schema = (0, apollo_graphql_1.buildSchemaFromSDL)(documents);\n        if (!this.schema)\n            throw new Error(`Schema could not be loaded for ${path}`);\n        return this.schema;\n    }\n    loadFileAndGetDocument(path) {\n        let result;\n        try {\n            result = (0, fs_1.readFileSync)(path, {\n                encoding: \"utf-8\",\n            });\n        }\n        catch (err) {\n            throw new Error(`Unable to read file ${path}. ${err.message}`);\n        }\n        const ext = (0, path_1.extname)(path);\n        if (ext === \".json\") {\n            const parsed = JSON.parse(result);\n            const __schema = parsed.data\n                ? parsed.data.__schema\n                : parsed.__schema\n                    ? parsed.__schema\n                    : parsed;\n            const schema = (0, graphql_1.buildClientSchema)({ __schema });\n            return (0, graphql_1.parse)((0, graphql_1.printSchema)(schema));\n        }\n        else if (ext === \".graphql\" || ext === \".graphqls\" || ext === \".gql\") {\n            const uri = vscode_uri_1.default.file((0, path_1.resolve)(path)).toString();\n            return (0, graphql_1.parse)(new graphql_1.Source(result, uri));\n        }\n        throw new Error(\"File Type not supported for schema loading. Must be a .json, .graphql, .gql, or .graphqls file\");\n    }\n    onSchemaChange(_handler) {\n        throw new Error(\"File watching not implemented yet\");\n        return () => { };\n    }\n    async resolveFederatedServiceSDL() {\n        if (this.federatedServiceSDL)\n            return this.federatedServiceSDL;\n        const { path, paths } = this.config;\n        const SDLs = path\n            ? [this.loadFileAndGetSDL(path)]\n            : paths\n                ? paths.map(this.loadFileAndGetSDL, this)\n                : undefined;\n        if (!SDLs || SDLs.filter((s) => !Boolean(s)).length > 0)\n            return utilities_1.Debug.error(`SDL could not be loaded for one of more files: [${path ? path : paths ? paths.join(\", \") : \"undefined\"}]`);\n        const federatedSchema = (0, federation_1.buildFederatedSchema)(SDLs.map((sdl) => ({ typeDefs: (0, graphql_1.parse)(sdl) })));\n        const queryType = federatedSchema.getQueryType();\n        if (!queryType)\n            return utilities_1.Debug.error(\"No query type found for federated schema\");\n        const serviceField = queryType.getFields()[\"_service\"];\n        const serviceResults = serviceField &&\n            serviceField.resolve &&\n            serviceField.resolve(null, {}, null, {});\n        if (!serviceResults || !serviceResults.sdl)\n            return utilities_1.Debug.error(\"No SDL resolver or result from federated schema after building\");\n        this.federatedServiceSDL = serviceResults.sdl;\n        return this.federatedServiceSDL;\n    }\n    loadFileAndGetSDL(path) {\n        let result;\n        try {\n            result = (0, fs_1.readFileSync)(path, {\n                encoding: \"utf-8\",\n            });\n        }\n        catch (err) {\n            return utilities_1.Debug.error(`Unable to read file ${path}. ${err.message}`);\n        }\n        const ext = (0, path_1.extname)(path);\n        if (ext === \".graphql\" || ext === \".graphqls\" || ext === \".gql\") {\n            return result;\n        }\n        else {\n            return utilities_1.Debug.error(\"When using localSchemaFile to check or push a federated service, you can only use .graphql, .gql, and .graphqls files\");\n        }\n    }\n}\nexports.FileSchemaProvider = FileSchemaProvider;\n//# sourceMappingURL=file.js.map"]},"metadata":{},"sourceType":"script"}