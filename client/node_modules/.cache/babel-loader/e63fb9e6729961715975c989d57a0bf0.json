{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDirectory = getDirectory;\nexports.getDirectorySync = getDirectorySync;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _pathType = require(\"path-type\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nasync function getDirectory(filepath) {\n  const filePathIsDirectory = await (0, _pathType.isDirectory)(filepath);\n\n  if (filePathIsDirectory === true) {\n    return filepath;\n  }\n\n  const directory = _path.default.dirname(filepath);\n\n  return directory;\n}\n\nfunction getDirectorySync(filepath) {\n  const filePathIsDirectory = (0, _pathType.isDirectorySync)(filepath);\n\n  if (filePathIsDirectory === true) {\n    return filepath;\n  }\n\n  const directory = _path.default.dirname(filepath);\n\n  return directory;\n}","map":{"version":3,"sources":["../src/getDirectory.ts"],"names":["filePathIsDirectory","directory","path"],"mappings":";;;;;;;;AAAA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;;;;;;;AAEA,eAAA,YAAA,CAAA,QAAA,EAA+D;EAC7D,MAAMA,mBAAmB,GAAG,MAAM,CAAA,GAAA,SAAA,CAAA,WAAA,EAAlC,QAAkC,CAAlC;;EAEA,IAAIA,mBAAmB,KAAvB,IAAA,EAAkC;IAChC,OAAA,QAAA;EACD;;EAED,MAAMC,SAAS,GAAGC,KAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAlB,QAAkBA,CAAlB;;EAEA,OAAA,SAAA;AACD;;AAED,SAAA,gBAAA,CAAA,QAAA,EAAoD;EAClD,MAAMF,mBAAmB,GAAG,CAAA,GAAA,SAAA,CAAA,eAAA,EAA5B,QAA4B,CAA5B;;EAEA,IAAIA,mBAAmB,KAAvB,IAAA,EAAkC;IAChC,OAAA,QAAA;EACD;;EAED,MAAMC,SAAS,GAAGC,KAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAlB,QAAkBA,CAAlB;;EAEA,OAAA,SAAA;AACD","sourcesContent":["import path from 'path';\nimport { isDirectory, isDirectorySync } from 'path-type';\n\nasync function getDirectory(filepath: string): Promise<string> {\n  const filePathIsDirectory = await isDirectory(filepath);\n\n  if (filePathIsDirectory === true) {\n    return filepath;\n  }\n\n  const directory = path.dirname(filepath);\n\n  return directory;\n}\n\nfunction getDirectorySync(filepath: string): string {\n  const filePathIsDirectory = isDirectorySync(filepath);\n\n  if (filePathIsDirectory === true) {\n    return filepath;\n  }\n\n  const directory = path.dirname(filepath);\n\n  return directory;\n}\n\nexport { getDirectory, getDirectorySync };\n"]},"metadata":{},"sourceType":"script"}