{"ast":null,"code":"var balanced = require('balanced-match');\n\nmodule.exports = expandTop;\nvar escSlash = '\\0SLASH' + Math.random() + '\\0';\nvar escOpen = '\\0OPEN' + Math.random() + '\\0';\nvar escClose = '\\0CLOSE' + Math.random() + '\\0';\nvar escComma = '\\0COMMA' + Math.random() + '\\0';\nvar escPeriod = '\\0PERIOD' + Math.random() + '\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash).split('\\\\{').join(escOpen).split('\\\\}').join(escClose).split('\\\\,').join(escComma).split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\').split(escOpen).join('{').split(escClose).join('}').split(escComma).join(',').split(escPeriod).join('.');\n} // Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\n\n\nfunction parseCommaParts(str) {\n  if (!str) return [''];\n  var parts = [];\n  var m = balanced('{', '}', str);\n  if (!m) return str.split(',');\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n  p[p.length - 1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n\n  if (post.length) {\n    p[p.length - 1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str) return []; // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\n\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\n\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n  var m = balanced('{', '}', str);\n  if (!m) return [str]; // no need to expand pre, since it is guaranteed to be free of brace-sets\n\n  var pre = m.pre;\n  var post = m.post.length ? expand(m.post, false) : [''];\n\n  if (/\\$$/.test(m.pre)) {\n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre + '{' + m.body + '}' + post[k];\n      expansions.push(expansion);\n    }\n  } else {\n    var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isSequence = isNumericSequence || isAlphaSequence;\n    var isOptions = m.body.indexOf(',') >= 0;\n\n    if (!isSequence && !isOptions) {\n      // {a},b}\n      if (m.post.match(/,.*\\}/)) {\n        str = m.pre + '{' + m.body + escClose + m.post;\n        return expand(str);\n      }\n\n      return [str];\n    }\n\n    var n;\n\n    if (isSequence) {\n      n = m.body.split(/\\.\\./);\n    } else {\n      n = parseCommaParts(m.body);\n\n      if (n.length === 1) {\n        // x{{a,b}}y ==> x{a}y x{b}y\n        n = expand(n[0], false).map(embrace);\n\n        if (n.length === 1) {\n          return post.map(function (p) {\n            return m.pre + n[0] + p;\n          });\n        }\n      }\n    } // at this point, n is the parts, and we know it's not a comma set\n    // with a single entry.\n\n\n    var N;\n\n    if (isSequence) {\n      var x = numeric(n[0]);\n      var y = numeric(n[1]);\n      var width = Math.max(n[0].length, n[1].length);\n      var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;\n      var test = lte;\n      var reverse = y < x;\n\n      if (reverse) {\n        incr *= -1;\n        test = gte;\n      }\n\n      var pad = n.some(isPadded);\n      N = [];\n\n      for (var i = x; test(i, y); i += incr) {\n        var c;\n\n        if (isAlphaSequence) {\n          c = String.fromCharCode(i);\n          if (c === '\\\\') c = '';\n        } else {\n          c = String(i);\n\n          if (pad) {\n            var need = width - c.length;\n\n            if (need > 0) {\n              var z = new Array(need + 1).join('0');\n              if (i < 0) c = '-' + z + c.slice(1);else c = z + c;\n            }\n          }\n        }\n\n        N.push(c);\n      }\n    } else {\n      N = [];\n\n      for (var j = 0; j < n.length; j++) {\n        N.push.apply(N, expand(n[j], false));\n      }\n    }\n\n    for (var j = 0; j < N.length; j++) {\n      for (var k = 0; k < post.length; k++) {\n        var expansion = pre + N[j] + post[k];\n        if (!isTop || isSequence || expansion) expansions.push(expansion);\n      }\n    }\n  }\n\n  return expansions;\n}","map":{"version":3,"names":["balanced","require","module","exports","expandTop","escSlash","Math","random","escOpen","escClose","escComma","escPeriod","numeric","str","parseInt","charCodeAt","escapeBraces","split","join","unescapeBraces","parseCommaParts","parts","m","pre","body","post","p","length","postParts","shift","push","apply","substr","expand","map","embrace","isPadded","el","test","lte","i","y","gte","isTop","expansions","k","expansion","isNumericSequence","isAlphaSequence","isSequence","isOptions","indexOf","match","n","N","x","width","max","incr","abs","reverse","pad","some","c","String","fromCharCode","need","z","Array","slice","j"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/apollo-language-server/node_modules/brace-expansion/index.js"],"sourcesContent":["var balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m) return [str];\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  if (/\\$$/.test(m.pre)) {    \n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre+ '{' + m.body + '}' + post[k];\n      expansions.push(expansion);\n    }\n  } else {\n    var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isSequence = isNumericSequence || isAlphaSequence;\n    var isOptions = m.body.indexOf(',') >= 0;\n    if (!isSequence && !isOptions) {\n      // {a},b}\n      if (m.post.match(/,.*\\}/)) {\n        str = m.pre + '{' + m.body + escClose + m.post;\n        return expand(str);\n      }\n      return [str];\n    }\n\n    var n;\n    if (isSequence) {\n      n = m.body.split(/\\.\\./);\n    } else {\n      n = parseCommaParts(m.body);\n      if (n.length === 1) {\n        // x{{a,b}}y ==> x{a}y x{b}y\n        n = expand(n[0], false).map(embrace);\n        if (n.length === 1) {\n          return post.map(function(p) {\n            return m.pre + n[0] + p;\n          });\n        }\n      }\n    }\n\n    // at this point, n is the parts, and we know it's not a comma set\n    // with a single entry.\n    var N;\n\n    if (isSequence) {\n      var x = numeric(n[0]);\n      var y = numeric(n[1]);\n      var width = Math.max(n[0].length, n[1].length)\n      var incr = n.length == 3\n        ? Math.abs(numeric(n[2]))\n        : 1;\n      var test = lte;\n      var reverse = y < x;\n      if (reverse) {\n        incr *= -1;\n        test = gte;\n      }\n      var pad = n.some(isPadded);\n\n      N = [];\n\n      for (var i = x; test(i, y); i += incr) {\n        var c;\n        if (isAlphaSequence) {\n          c = String.fromCharCode(i);\n          if (c === '\\\\')\n            c = '';\n        } else {\n          c = String(i);\n          if (pad) {\n            var need = width - c.length;\n            if (need > 0) {\n              var z = new Array(need + 1).join('0');\n              if (i < 0)\n                c = '-' + z + c.slice(1);\n              else\n                c = z + c;\n            }\n          }\n        }\n        N.push(c);\n      }\n    } else {\n      N = [];\n\n      for (var j = 0; j < n.length; j++) {\n        N.push.apply(N, expand(n[j], false));\n      }\n    }\n\n    for (var j = 0; j < N.length; j++) {\n      for (var k = 0; k < post.length; k++) {\n        var expansion = pre + N[j] + post[k];\n        if (!isTop || isSequence || expansion)\n          expansions.push(expansion);\n      }\n    }\n  }\n\n  return expansions;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}