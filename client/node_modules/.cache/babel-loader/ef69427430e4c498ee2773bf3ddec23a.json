{"ast":null,"code":"/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CallHierarchyFeature = void 0;\n\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\n\nconst CallHierarchyFeature = Base => {\n  return class extends Base {\n    get callHierarchy() {\n      return {\n        onPrepare: handler => {\n          this.connection.onRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, (params, cancel) => {\n            return handler(params, cancel, this.attachWorkDoneProgress(params), undefined);\n          });\n        },\n        onIncomingCalls: handler => {\n          const type = vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type;\n          this.connection.onRequest(type, (params, cancel) => {\n            return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));\n          });\n        },\n        onOutgoingCalls: handler => {\n          const type = vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type;\n          this.connection.onRequest(type, (params, cancel) => {\n            return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));\n          });\n        }\n      };\n    }\n\n  };\n};\n\nexports.CallHierarchyFeature = CallHierarchyFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","CallHierarchyFeature","vscode_languageserver_protocol_1","require","Base","callHierarchy","onPrepare","handler","connection","onRequest","CallHierarchyPrepareRequest","type","params","cancel","attachWorkDoneProgress","undefined","onIncomingCalls","CallHierarchyIncomingCallsRequest","attachPartialResultProgress","onOutgoingCalls","CallHierarchyOutgoingCallsRequest"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/vscode-languageserver/lib/common/callHierarchy.js"],"sourcesContent":["/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CallHierarchyFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst CallHierarchyFeature = (Base) => {\n    return class extends Base {\n        get callHierarchy() {\n            return {\n                onPrepare: (handler) => {\n                    this.connection.onRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), undefined);\n                    });\n                },\n                onIncomingCalls: (handler) => {\n                    const type = vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type;\n                    this.connection.onRequest(type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));\n                    });\n                },\n                onOutgoingCalls: (handler) => {\n                    const type = vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type;\n                    this.connection.onRequest(type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));\n                    });\n                }\n            };\n        }\n    };\n};\nexports.CallHierarchyFeature = CallHierarchyFeature;\n//# sourceMappingURL=callHierarchy.js.map"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oBAAR,GAA+B,KAAK,CAApC;;AACA,MAAMC,gCAAgC,GAAGC,OAAO,CAAC,gCAAD,CAAhD;;AACA,MAAMF,oBAAoB,GAAIG,IAAD,IAAU;EACnC,OAAO,cAAcA,IAAd,CAAmB;IACL,IAAbC,aAAa,GAAG;MAChB,OAAO;QACHC,SAAS,EAAGC,OAAD,IAAa;UACpB,KAAKC,UAAL,CAAgBC,SAAhB,CAA0BP,gCAAgC,CAACQ,2BAAjC,CAA6DC,IAAvF,EAA6F,CAACC,MAAD,EAASC,MAAT,KAAoB;YAC7G,OAAON,OAAO,CAACK,MAAD,EAASC,MAAT,EAAiB,KAAKC,sBAAL,CAA4BF,MAA5B,CAAjB,EAAsDG,SAAtD,CAAd;UACH,CAFD;QAGH,CALE;QAMHC,eAAe,EAAGT,OAAD,IAAa;UAC1B,MAAMI,IAAI,GAAGT,gCAAgC,CAACe,iCAAjC,CAAmEN,IAAhF;UACA,KAAKH,UAAL,CAAgBC,SAAhB,CAA0BE,IAA1B,EAAgC,CAACC,MAAD,EAASC,MAAT,KAAoB;YAChD,OAAON,OAAO,CAACK,MAAD,EAASC,MAAT,EAAiB,KAAKC,sBAAL,CAA4BF,MAA5B,CAAjB,EAAsD,KAAKM,2BAAL,CAAiCP,IAAjC,EAAuCC,MAAvC,CAAtD,CAAd;UACH,CAFD;QAGH,CAXE;QAYHO,eAAe,EAAGZ,OAAD,IAAa;UAC1B,MAAMI,IAAI,GAAGT,gCAAgC,CAACkB,iCAAjC,CAAmET,IAAhF;UACA,KAAKH,UAAL,CAAgBC,SAAhB,CAA0BE,IAA1B,EAAgC,CAACC,MAAD,EAASC,MAAT,KAAoB;YAChD,OAAON,OAAO,CAACK,MAAD,EAASC,MAAT,EAAiB,KAAKC,sBAAL,CAA4BF,MAA5B,CAAjB,EAAsD,KAAKM,2BAAL,CAAiCP,IAAjC,EAAuCC,MAAvC,CAAtD,CAAd;UACH,CAFD;QAGH;MAjBE,CAAP;IAmBH;;EArBqB,CAA1B;AAuBH,CAxBD;;AAyBAb,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B"},"metadata":{},"sourceType":"script"}