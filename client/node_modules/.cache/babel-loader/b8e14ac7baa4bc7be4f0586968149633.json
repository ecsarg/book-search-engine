{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NoMissingClientDirectives = exports.NoTypenameAlias = exports.NoAnonymousQueries = exports.validateQueryDocument = exports.getValidationErrors = exports.defaultValidationRules = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst vscode_languageserver_1 = require(\"vscode-languageserver\");\n\nconst logger_1 = require(\"./logger\");\n\nconst source_1 = require(\"../utilities/source\");\n\nconst execute_1 = require(\"graphql/execution/execute\");\n\nconst graphql_2 = require(\"../utilities/graphql\");\n\nconst utilities_1 = require(\"../utilities\");\n\nconst specifiedRulesToBeRemoved = [graphql_1.NoUnusedFragmentsRule];\nexports.defaultValidationRules = [NoAnonymousQueries, NoTypenameAlias, NoMissingClientDirectives, ...graphql_1.specifiedRules.filter(rule => !specifiedRulesToBeRemoved.includes(rule))];\n\nfunction getValidationErrors(schema, document, fragments, rules = exports.defaultValidationRules) {\n  const typeInfo = new graphql_1.TypeInfo(schema);\n  const errors = [];\n\n  const onError = err => errors.push(err);\n\n  const context = new graphql_1.ValidationContext(schema, document, typeInfo, onError);\n\n  if (fragments) {\n    context._fragments = fragments;\n  }\n\n  const visitors = rules.map(rule => rule(context));\n  (0, graphql_1.visit)(document, (0, graphql_1.visitWithTypeInfo)(typeInfo, (0, graphql_1.visitInParallel)(visitors)));\n  if (typeof context.getErrors === \"function\") return context.getErrors();\n  return errors;\n}\n\nexports.getValidationErrors = getValidationErrors;\n\nfunction validateQueryDocument(schema, document) {\n  try {\n    const validationErrors = getValidationErrors(schema, document);\n\n    if (validationErrors && validationErrors.length > 0) {\n      for (const error of validationErrors) {\n        (0, logger_1.logError)(error);\n      }\n\n      return utilities_1.Debug.error(\"Validation of GraphQL query document failed\");\n    }\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n}\n\nexports.validateQueryDocument = validateQueryDocument;\n\nfunction NoAnonymousQueries(context) {\n  return {\n    OperationDefinition(node) {\n      if (!node.name) {\n        context.reportError(new graphql_1.GraphQLError(\"Apollo does not support anonymous operations\", [node]));\n      }\n\n      return false;\n    }\n\n  };\n}\n\nexports.NoAnonymousQueries = NoAnonymousQueries;\n\nfunction NoTypenameAlias(context) {\n  return {\n    Field(node) {\n      const aliasName = node.alias && node.alias.value;\n\n      if (aliasName == \"__typename\") {\n        context.reportError(new graphql_1.GraphQLError(\"Apollo needs to be able to insert __typename when needed, please do not use it as an alias\", [node]));\n      }\n    }\n\n  };\n}\n\nexports.NoTypenameAlias = NoTypenameAlias;\n\nfunction hasClientSchema(schema) {\n  const query = schema.getQueryType();\n  const mutation = schema.getMutationType();\n  const subscription = schema.getSubscriptionType();\n  return Boolean(query && query.clientSchema || mutation && mutation.clientSchema || subscription && subscription.clientSchema);\n}\n\nfunction NoMissingClientDirectives(context) {\n  const root = context.getDocument();\n  const schema = context.getSchema();\n  if (!hasClientSchema(schema)) return {};\n  const executionContext = (0, execute_1.buildExecutionContext)(schema, root, Object.create(null), Object.create(null), undefined, undefined, undefined);\n\n  function visitor(node) {\n    const parentType = node.kind === graphql_1.Kind.FRAGMENT_DEFINITION ? schema.getType(node.typeCondition.name.value) : context.getParentType();\n    const fieldDef = context.getFieldDef();\n    if (!parentType) return;\n    const clientFields = parentType && (0, graphql_1.isObjectType)(parentType) && parentType.clientSchema && parentType.clientSchema.localFields;\n    let clientDirectivePresent = (0, graphql_2.hasClientDirective)(node);\n    let message = \"@client directive is missing on \";\n    let selectsClientFieldSet = false;\n\n    switch (node.kind) {\n      case graphql_1.Kind.FIELD:\n        selectsClientFieldSet = Boolean(clientFields && clientFields.includes(fieldDef.name));\n        message += `local field \"${node.name.value}\"`;\n        break;\n\n      case graphql_1.Kind.INLINE_FRAGMENT:\n      case graphql_1.Kind.FRAGMENT_DEFINITION:\n        if (Array.isArray(executionContext)) break;\n        const fields = (0, graphql_2.simpleCollectFields)(executionContext, node.selectionSet, Object.create(null), Object.create(null));\n        const fieldNames = Object.entries(fields).map(([name]) => name);\n        selectsClientFieldSet = fieldNames.every(field => clientFields && clientFields.includes(field));\n        message += `fragment ${\"name\" in node ? `\"${node.name.value}\" ` : \"\"}around local fields \"${fieldNames.join(\",\")}\"`;\n        break;\n    }\n\n    if (selectsClientFieldSet && !clientDirectivePresent) {\n      let extensions = null;\n      const name = \"name\" in node && node.name;\n\n      if (name && name.loc) {\n        let {\n          source,\n          end: locToInsertDirective\n        } = name.loc;\n\n        if (\"arguments\" in node && node.arguments && node.arguments.length !== 0) {\n          const endOfArgs = source.body.indexOf(\")\", locToInsertDirective);\n          locToInsertDirective = endOfArgs + 1;\n        }\n\n        const codeAction = {\n          message: `Add @client directive to \"${name.value}\"`,\n          edits: [vscode_languageserver_1.TextEdit.insert((0, source_1.positionFromSourceLocation)(source, (0, graphql_1.getLocation)(source, locToInsertDirective)), \" @client\")]\n        };\n        extensions = {\n          codeAction\n        };\n      }\n\n      context.reportError(new graphql_1.GraphQLError(message, [node], null, null, null, null, extensions));\n    }\n\n    if (selectsClientFieldSet) {\n      return false;\n    }\n\n    return;\n  }\n\n  return {\n    InlineFragment: visitor,\n    FragmentDefinition: visitor,\n    Field: visitor\n  };\n}\n\nexports.NoMissingClientDirectives = NoMissingClientDirectives;","map":{"version":3,"sources":["../../src/errors/validation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoMissingClientDirectives = exports.NoTypenameAlias = exports.NoAnonymousQueries = exports.validateQueryDocument = exports.getValidationErrors = exports.defaultValidationRules = void 0;\nconst graphql_1 = require(\"graphql\");\nconst vscode_languageserver_1 = require(\"vscode-languageserver\");\nconst logger_1 = require(\"./logger\");\nconst source_1 = require(\"../utilities/source\");\nconst execute_1 = require(\"graphql/execution/execute\");\nconst graphql_2 = require(\"../utilities/graphql\");\nconst utilities_1 = require(\"../utilities\");\nconst specifiedRulesToBeRemoved = [graphql_1.NoUnusedFragmentsRule];\nexports.defaultValidationRules = [\n    NoAnonymousQueries,\n    NoTypenameAlias,\n    NoMissingClientDirectives,\n    ...graphql_1.specifiedRules.filter((rule) => !specifiedRulesToBeRemoved.includes(rule)),\n];\nfunction getValidationErrors(schema, document, fragments, rules = exports.defaultValidationRules) {\n    const typeInfo = new graphql_1.TypeInfo(schema);\n    const errors = [];\n    const onError = (err) => errors.push(err);\n    const context = new graphql_1.ValidationContext(schema, document, typeInfo, onError);\n    if (fragments) {\n        context._fragments = fragments;\n    }\n    const visitors = rules.map((rule) => rule(context));\n    (0, graphql_1.visit)(document, (0, graphql_1.visitWithTypeInfo)(typeInfo, (0, graphql_1.visitInParallel)(visitors)));\n    if (typeof context.getErrors === \"function\")\n        return context.getErrors();\n    return errors;\n}\nexports.getValidationErrors = getValidationErrors;\nfunction validateQueryDocument(schema, document) {\n    try {\n        const validationErrors = getValidationErrors(schema, document);\n        if (validationErrors && validationErrors.length > 0) {\n            for (const error of validationErrors) {\n                (0, logger_1.logError)(error);\n            }\n            return utilities_1.Debug.error(\"Validation of GraphQL query document failed\");\n        }\n    }\n    catch (e) {\n        console.error(e);\n        throw e;\n    }\n}\nexports.validateQueryDocument = validateQueryDocument;\nfunction NoAnonymousQueries(context) {\n    return {\n        OperationDefinition(node) {\n            if (!node.name) {\n                context.reportError(new graphql_1.GraphQLError(\"Apollo does not support anonymous operations\", [\n                    node,\n                ]));\n            }\n            return false;\n        },\n    };\n}\nexports.NoAnonymousQueries = NoAnonymousQueries;\nfunction NoTypenameAlias(context) {\n    return {\n        Field(node) {\n            const aliasName = node.alias && node.alias.value;\n            if (aliasName == \"__typename\") {\n                context.reportError(new graphql_1.GraphQLError(\"Apollo needs to be able to insert __typename when needed, please do not use it as an alias\", [node]));\n            }\n        },\n    };\n}\nexports.NoTypenameAlias = NoTypenameAlias;\nfunction hasClientSchema(schema) {\n    const query = schema.getQueryType();\n    const mutation = schema.getMutationType();\n    const subscription = schema.getSubscriptionType();\n    return Boolean((query && query.clientSchema) ||\n        (mutation && mutation.clientSchema) ||\n        (subscription && subscription.clientSchema));\n}\nfunction NoMissingClientDirectives(context) {\n    const root = context.getDocument();\n    const schema = context.getSchema();\n    if (!hasClientSchema(schema))\n        return {};\n    const executionContext = (0, execute_1.buildExecutionContext)(schema, root, Object.create(null), Object.create(null), undefined, undefined, undefined);\n    function visitor(node) {\n        const parentType = node.kind === graphql_1.Kind.FRAGMENT_DEFINITION\n            ? schema.getType(node.typeCondition.name.value)\n            : context.getParentType();\n        const fieldDef = context.getFieldDef();\n        if (!parentType)\n            return;\n        const clientFields = parentType &&\n            (0, graphql_1.isObjectType)(parentType) &&\n            parentType.clientSchema &&\n            parentType.clientSchema.localFields;\n        let clientDirectivePresent = (0, graphql_2.hasClientDirective)(node);\n        let message = \"@client directive is missing on \";\n        let selectsClientFieldSet = false;\n        switch (node.kind) {\n            case graphql_1.Kind.FIELD:\n                selectsClientFieldSet = Boolean(clientFields && clientFields.includes(fieldDef.name));\n                message += `local field \"${node.name.value}\"`;\n                break;\n            case graphql_1.Kind.INLINE_FRAGMENT:\n            case graphql_1.Kind.FRAGMENT_DEFINITION:\n                if (Array.isArray(executionContext))\n                    break;\n                const fields = (0, graphql_2.simpleCollectFields)(executionContext, node.selectionSet, Object.create(null), Object.create(null));\n                const fieldNames = Object.entries(fields).map(([name]) => name);\n                selectsClientFieldSet = fieldNames.every((field) => clientFields && clientFields.includes(field));\n                message += `fragment ${\"name\" in node ? `\"${node.name.value}\" ` : \"\"}around local fields \"${fieldNames.join(\",\")}\"`;\n                break;\n        }\n        if (selectsClientFieldSet && !clientDirectivePresent) {\n            let extensions = null;\n            const name = \"name\" in node && node.name;\n            if (name && name.loc) {\n                let { source, end: locToInsertDirective } = name.loc;\n                if (\"arguments\" in node &&\n                    node.arguments &&\n                    node.arguments.length !== 0) {\n                    const endOfArgs = source.body.indexOf(\")\", locToInsertDirective);\n                    locToInsertDirective = endOfArgs + 1;\n                }\n                const codeAction = {\n                    message: `Add @client directive to \"${name.value}\"`,\n                    edits: [\n                        vscode_languageserver_1.TextEdit.insert((0, source_1.positionFromSourceLocation)(source, (0, graphql_1.getLocation)(source, locToInsertDirective)), \" @client\"),\n                    ],\n                };\n                extensions = { codeAction };\n            }\n            context.reportError(new graphql_1.GraphQLError(message, [node], null, null, null, null, extensions));\n        }\n        if (selectsClientFieldSet) {\n            return false;\n        }\n        return;\n    }\n    return {\n        InlineFragment: visitor,\n        FragmentDefinition: visitor,\n        Field: visitor,\n    };\n}\nexports.NoMissingClientDirectives = NoMissingClientDirectives;\n//# sourceMappingURL=validation.js.map"]},"metadata":{},"sourceType":"script"}