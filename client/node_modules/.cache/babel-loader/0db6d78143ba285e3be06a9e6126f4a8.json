{"ast":null,"code":"const _Terminal = require('./terminal');\n\nconst _BarElement = require('./generic-bar');\n\nconst _options = require('./options');\n\nconst _EventEmitter = require('events'); // Progress-Bar constructor\n\n\nmodule.exports = class MultiBar extends _EventEmitter {\n  constructor(options, preset) {\n    super(); // list of bars\n\n    this.bars = []; // parse+store options\n\n    this.options = _options.parse(options, preset); // disable synchronous updates\n\n    this.options.synchronousUpdate = false; // store terminal instance\n\n    this.terminal = this.options.terminal ? this.options.terminal : new _Terminal(this.options.stream); // the update timer\n\n    this.timer = null; // progress bar active ?\n\n    this.isActive = false; // update interval\n\n    this.schedulingRate = this.terminal.isTTY() ? this.options.throttleTime : this.options.notTTYSchedule; // logging output buffer\n\n    this.loggingBuffer = []; // callback used for gracefulExit\n\n    this.sigintCallback = null;\n  } // add a new bar to the stack\n\n\n  create(total, startValue, payload, barOptions = {}) {\n    // create new bar element\n    const bar = new _BarElement(Object.assign({}, this.options, barOptions)); // store bar\n\n    this.bars.push(bar); // progress updates are only visible in TTY mode!\n\n    if (this.options.noTTYOutput === false && this.terminal.isTTY() === false) {\n      return bar;\n    } // add handler to restore cursor settings (stop the bar) on SIGINT/SIGTERM ?\n\n\n    if (this.sigintCallback === null && this.options.gracefulExit) {\n      this.sigintCallback = this.stop.bind(this);\n      process.once('SIGINT', this.sigintCallback);\n      process.once('SIGTERM', this.sigintCallback);\n    } // multiprogress already active ?\n\n\n    if (!this.isActive) {\n      // hide the cursor ?\n      if (this.options.hideCursor === true) {\n        this.terminal.cursor(false);\n      } // disable line wrapping ?\n\n\n      if (this.options.linewrap === false) {\n        this.terminal.lineWrapping(false);\n      } // initialize update timer\n\n\n      this.timer = setTimeout(this.update.bind(this), this.schedulingRate);\n    } // set flag\n\n\n    this.isActive = true; // start progress bar\n\n    bar.start(total, startValue, payload); // trigger event\n\n    this.emit('start'); // return new instance\n\n    return bar;\n  } // remove a bar from the stack\n\n\n  remove(bar) {\n    // find element\n    const index = this.bars.indexOf(bar); // element found ?\n\n    if (index < 0) {\n      return false;\n    } // remove element\n\n\n    this.bars.splice(index, 1); // force update\n\n    this.update(); // clear bottom\n\n    this.terminal.newline();\n    this.terminal.clearBottom();\n    return true;\n  } // internal update routine\n\n\n  update() {\n    // stop timer\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    } // trigger event\n\n\n    this.emit('update-pre'); // reset cursor\n\n    this.terminal.cursorRelativeReset(); // trigger event\n\n    this.emit('redraw-pre'); // content within logging buffer ?\n\n    if (this.loggingBuffer.length > 0) {\n      this.terminal.clearLine(); // flush logging buffer and write content to terminal\n\n      while (this.loggingBuffer.length > 0) {\n        this.terminal.write(this.loggingBuffer.shift(), true);\n      }\n    } // update each bar\n\n\n    for (let i = 0; i < this.bars.length; i++) {\n      // add new line ?\n      if (i > 0) {\n        this.terminal.newline();\n      } // render\n\n\n      this.bars[i].render();\n    } // trigger event\n\n\n    this.emit('redraw-post'); // add new line in notty mode!\n\n    if (this.options.noTTYOutput && this.terminal.isTTY() === false) {\n      this.terminal.newline();\n      this.terminal.newline();\n    } // next update\n\n\n    this.timer = setTimeout(this.update.bind(this), this.schedulingRate); // trigger event\n\n    this.emit('update-post'); // stop if stopOnComplete and all bars stopped\n\n    if (this.options.stopOnComplete && !this.bars.find(bar => bar.isActive)) {\n      this.stop();\n    }\n  }\n\n  stop() {\n    // stop timer\n    clearTimeout(this.timer);\n    this.timer = null; // remove sigint listener\n\n    if (this.sigintCallback) {\n      process.removeListener('SIGINT', this.sigintCallback);\n      process.removeListener('SIGTERM', this.sigintCallback);\n      this.sigintCallback = null;\n    } // set flag\n\n\n    this.isActive = false; // cursor hidden ?\n\n    if (this.options.hideCursor === true) {\n      this.terminal.cursor(true);\n    } // re-enable line wrpaping ?\n\n\n    if (this.options.linewrap === false) {\n      this.terminal.lineWrapping(true);\n    } // reset cursor\n\n\n    this.terminal.cursorRelativeReset(); // trigger event\n\n    this.emit('stop-pre-clear'); // clear line on complete ?\n\n    if (this.options.clearOnComplete) {\n      // clear all bars\n      this.terminal.clearBottom(); // or show final progress ?\n    } else {\n      // update each bar\n      for (let i = 0; i < this.bars.length; i++) {\n        // add new line ?\n        if (i > 0) {\n          this.terminal.newline();\n        } // trigger final rendering\n\n\n        this.bars[i].render(); // stop\n\n        this.bars[i].stop();\n      } // new line on complete\n\n\n      this.terminal.newline();\n    } // trigger event\n\n\n    this.emit('stop');\n  }\n\n  log(s) {\n    // push content into logging buffer\n    this.loggingBuffer.push(s);\n  }\n\n};","map":{"version":3,"names":["_Terminal","require","_BarElement","_options","_EventEmitter","module","exports","MultiBar","constructor","options","preset","bars","parse","synchronousUpdate","terminal","stream","timer","isActive","schedulingRate","isTTY","throttleTime","notTTYSchedule","loggingBuffer","sigintCallback","create","total","startValue","payload","barOptions","bar","Object","assign","push","noTTYOutput","gracefulExit","stop","bind","process","once","hideCursor","cursor","linewrap","lineWrapping","setTimeout","update","start","emit","remove","index","indexOf","splice","newline","clearBottom","clearTimeout","cursorRelativeReset","length","clearLine","write","shift","i","render","stopOnComplete","find","removeListener","clearOnComplete","log","s"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/cli-progress/lib/multi-bar.js"],"sourcesContent":["const _Terminal = require('./terminal');\nconst _BarElement = require('./generic-bar');\nconst _options = require('./options');\nconst _EventEmitter = require('events');\n\n// Progress-Bar constructor\nmodule.exports = class MultiBar extends _EventEmitter{\n\n    constructor(options, preset){\n        super();\n\n        // list of bars\n        this.bars = [];\n\n        // parse+store options\n        this.options = _options.parse(options, preset);\n\n        // disable synchronous updates\n        this.options.synchronousUpdate = false;\n\n        // store terminal instance\n        this.terminal = (this.options.terminal) ? this.options.terminal : new _Terminal(this.options.stream);\n\n        // the update timer\n        this.timer = null;\n\n        // progress bar active ?\n        this.isActive = false;\n\n        // update interval\n        this.schedulingRate = (this.terminal.isTTY() ? this.options.throttleTime : this.options.notTTYSchedule);\n\n        // logging output buffer\n        this.loggingBuffer = [];\n\n        // callback used for gracefulExit\n        this.sigintCallback = null;\n    }\n\n    // add a new bar to the stack\n    create(total, startValue, payload, barOptions={}){\n        // create new bar element\n        const bar = new _BarElement(Object.assign({}, this.options, barOptions));\n\n        // store bar\n        this.bars.push(bar);\n\n        // progress updates are only visible in TTY mode!\n        if (this.options.noTTYOutput === false && this.terminal.isTTY() === false){\n            return bar;\n        }\n\n        // add handler to restore cursor settings (stop the bar) on SIGINT/SIGTERM ?\n        if (this.sigintCallback === null && this.options.gracefulExit){\n            this.sigintCallback = this.stop.bind(this);\n            process.once('SIGINT', this.sigintCallback);\n            process.once('SIGTERM', this.sigintCallback);\n        }\n        \n        // multiprogress already active ?\n        if (!this.isActive){\n            // hide the cursor ?\n            if (this.options.hideCursor === true){\n                this.terminal.cursor(false);\n            }\n\n            // disable line wrapping ?\n            if (this.options.linewrap === false){\n                this.terminal.lineWrapping(false);\n            }\n    \n            // initialize update timer\n            this.timer = setTimeout(this.update.bind(this), this.schedulingRate);\n        }\n\n        // set flag\n        this.isActive = true;\n\n        // start progress bar\n        bar.start(total, startValue, payload);\n\n        // trigger event\n        this.emit('start');\n\n        // return new instance\n        return bar;\n    }\n\n    // remove a bar from the stack\n    remove(bar){\n        // find element\n        const index = this.bars.indexOf(bar);\n\n        // element found ?\n        if (index < 0){\n            return false;\n        }\n\n        // remove element\n        this.bars.splice(index, 1);\n\n        // force update\n        this.update();\n\n        // clear bottom\n        this.terminal.newline();\n        this.terminal.clearBottom();\n\n        return true;\n    }\n\n    // internal update routine\n    update(){\n        // stop timer\n        if (this.timer){\n            clearTimeout(this.timer);\n            this.timer = null;\n        }\n\n        // trigger event\n        this.emit('update-pre');\n        \n        // reset cursor\n        this.terminal.cursorRelativeReset();\n\n        // trigger event\n        this.emit('redraw-pre');\n\n        // content within logging buffer ?\n        if (this.loggingBuffer.length > 0){\n            this.terminal.clearLine();\n\n            // flush logging buffer and write content to terminal\n            while (this.loggingBuffer.length > 0){\n                this.terminal.write(this.loggingBuffer.shift(), true);\n            }\n        }\n\n        // update each bar\n        for (let i=0; i< this.bars.length; i++){\n            // add new line ?\n            if (i > 0){\n                this.terminal.newline();\n            }\n\n            // render\n            this.bars[i].render();\n        }\n\n        // trigger event\n        this.emit('redraw-post');\n\n        // add new line in notty mode!\n        if (this.options.noTTYOutput && this.terminal.isTTY() === false){\n            this.terminal.newline();\n            this.terminal.newline();\n        }\n\n        // next update\n        this.timer = setTimeout(this.update.bind(this), this.schedulingRate);\n\n        // trigger event\n        this.emit('update-post');\n\n        // stop if stopOnComplete and all bars stopped\n        if (this.options.stopOnComplete && !this.bars.find(bar => bar.isActive)) {\n            this.stop();\n        }\n    }\n\n    stop(){\n\n        // stop timer\n        clearTimeout(this.timer);\n        this.timer = null;\n\n        // remove sigint listener\n        if (this.sigintCallback){\n            process.removeListener('SIGINT', this.sigintCallback);\n            process.removeListener('SIGTERM', this.sigintCallback);\n            this.sigintCallback = null;\n        }\n\n        // set flag\n        this.isActive = false;\n\n        // cursor hidden ?\n        if (this.options.hideCursor === true){\n            this.terminal.cursor(true);\n        }\n\n        // re-enable line wrpaping ?\n        if (this.options.linewrap === false){\n            this.terminal.lineWrapping(true);\n        }\n\n        // reset cursor\n        this.terminal.cursorRelativeReset();\n\n        // trigger event\n        this.emit('stop-pre-clear');\n\n        // clear line on complete ?\n        if (this.options.clearOnComplete){\n            // clear all bars\n            this.terminal.clearBottom();\n            \n        // or show final progress ?\n        }else{\n            // update each bar\n            for (let i=0; i< this.bars.length; i++){\n                // add new line ?\n                if (i > 0){\n                    this.terminal.newline();\n                }\n\n                // trigger final rendering\n                this.bars[i].render();\n\n                // stop\n                this.bars[i].stop();\n            }\n\n            // new line on complete\n            this.terminal.newline();\n        }\n\n        // trigger event\n        this.emit('stop');\n    }\n\n    log(s){\n        // push content into logging buffer\n        this.loggingBuffer.push(s);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}