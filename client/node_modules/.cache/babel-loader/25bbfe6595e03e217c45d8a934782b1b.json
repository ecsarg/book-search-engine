{"ast":null,"code":"import { __extends } from 'tslib';\nimport { ApolloLink, Observable } from 'apollo-link';\n\nfunction onError(errorHandler) {\n  return new ApolloLink(function (operation, forward) {\n    return new Observable(function (observer) {\n      var sub;\n      var retriedSub;\n      var retriedResult;\n\n      try {\n        sub = forward(operation).subscribe({\n          next: function next(result) {\n            if (result.errors) {\n              retriedResult = errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation: operation,\n                forward: forward\n              });\n\n              if (retriedResult) {\n                retriedSub = retriedResult.subscribe({\n                  next: observer.next.bind(observer),\n                  error: observer.error.bind(observer),\n                  complete: observer.complete.bind(observer)\n                });\n                return;\n              }\n            }\n\n            observer.next(result);\n          },\n          error: function error(networkError) {\n            retriedResult = errorHandler({\n              operation: operation,\n              networkError: networkError,\n              graphQLErrors: networkError && networkError.result && networkError.result.errors,\n              forward: forward\n            });\n\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer)\n              });\n              return;\n            }\n\n            observer.error(networkError);\n          },\n          complete: function complete() {\n            if (!retriedResult) {\n              observer.complete.bind(observer)();\n            }\n          }\n        });\n      } catch (e) {\n        errorHandler({\n          networkError: e,\n          operation: operation,\n          forward: forward\n        });\n        observer.error(e);\n      }\n\n      return function () {\n        if (sub) sub.unsubscribe();\n        if (retriedSub) sub.unsubscribe();\n      };\n    });\n  });\n}\n\nvar ErrorLink = function (_super) {\n  __extends(ErrorLink, _super);\n\n  function ErrorLink(errorHandler) {\n    var _this = _super.call(this) || this;\n\n    _this.link = onError(errorHandler);\n    return _this;\n  }\n\n  ErrorLink.prototype.request = function (operation, forward) {\n    return this.link.request(operation, forward);\n  };\n\n  return ErrorLink;\n}(ApolloLink);\n\nexport { ErrorLink, onError };","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable */\n\nimport {\n  ApolloLink,\n  Observable,\n  Operation,\n  NextLink,\n  FetchResult,\n  ExecutionResult,\n} from 'apollo-link';\nimport { GraphQLError } from 'graphql';\nimport { ServerError, ServerParseError } from 'apollo-link-http-common';\n\nexport interface ErrorResponse {\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  networkError?: Error | ServerError | ServerParseError;\n  response?: ExecutionResult;\n  operation: Operation;\n  forward: NextLink;\n}\n\nexport namespace ErrorLink {\n  /**\n   * Callback to be triggered when an error occurs within the link stack.\n   */\n  export interface ErrorHandler {\n    (error: ErrorResponse): Observable<FetchResult> | void;\n  }\n}\n\n// For backwards compatibility.\nexport import ErrorHandler = ErrorLink.ErrorHandler;\n\nexport function onError(errorHandler: ErrorHandler): ApolloLink {\n  return new ApolloLink((operation, forward) => {\n    return new Observable(observer => {\n      let sub;\n      let retriedSub;\n      let retriedResult;\n\n      try {\n        sub = forward(operation).subscribe({\n          next: result => {\n            if (result.errors) {\n              retriedResult = errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation,\n                forward,\n              });\n\n              if (retriedResult) {\n                retriedSub = retriedResult.subscribe({\n                  next: observer.next.bind(observer),\n                  error: observer.error.bind(observer),\n                  complete: observer.complete.bind(observer),\n                });\n                return;\n              }\n            }\n            observer.next(result);\n          },\n          error: networkError => {\n            retriedResult = errorHandler({\n              operation,\n              networkError,\n              //Network errors can return GraphQL errors on for example a 403\n              graphQLErrors:\n                networkError &&\n                networkError.result &&\n                networkError.result.errors,\n              forward,\n            });\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer),\n              });\n              return;\n            }\n            observer.error(networkError);\n          },\n          complete: () => {\n            // disable the previous sub from calling complete on observable\n            // if retry is in flight.\n            if (!retriedResult) {\n              observer.complete.bind(observer)();\n            }\n          },\n        });\n      } catch (e) {\n        errorHandler({ networkError: e, operation, forward });\n        observer.error(e);\n      }\n\n      return () => {\n        if (sub) sub.unsubscribe();\n        if (retriedSub) sub.unsubscribe();\n      };\n    });\n  });\n}\n\nexport class ErrorLink extends ApolloLink {\n  private link: ApolloLink;\n  constructor(errorHandler: ErrorLink.ErrorHandler) {\n    super();\n    this.link = onError(errorHandler);\n  }\n\n  public request(\n    operation: Operation,\n    forward: NextLink,\n  ): Observable<FetchResult> | null {\n    return this.link.request(operation, forward);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}