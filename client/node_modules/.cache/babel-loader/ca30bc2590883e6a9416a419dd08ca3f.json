{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFederationMetadata = exports.assertCompositionFailure = exports.assertCompositionSuccess = exports.compositionHasErrors = exports.defaultRootOperationNameLookup = exports.reservedRootFields = exports.isFederationDirective = exports.isApolloTypeSystemDirective = exports.executableDirectiveLocations = exports.defKindToExtKind = exports.findTypeNodeInServiceList = exports.typeNodesAreEquivalent = exports.diffTypeNodes = exports.isTypeNodeAnEntity = exports.selectionIncludesField = exports.findFieldsThatReturnType = exports.findTypesContainingFieldWithReturnType = exports.errorWithCode = exports.logDirective = exports.logServiceAndType = exports.hasMatchingFieldInDirectives = exports.parseSelections = exports.stripTypeSystemDirectivesFromTypeDefs = exports.stripDescriptions = exports.stripExternalFieldsFromTypeDefs = exports.findSelectionSetOnNode = exports.printFieldSet = exports.findDirectivesOnNode = exports.mapFieldNamesToServiceName = exports.isDirectiveDefinitionNode = exports.isStringValueNode = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst directives_1 = __importStar(require(\"../directives\"));\n\nconst utilities_1 = require(\"../utilities\");\n\nfunction isStringValueNode(node) {\n  return node.kind === graphql_1.Kind.STRING;\n}\n\nexports.isStringValueNode = isStringValueNode;\n\nfunction isDirectiveDefinitionNode(node) {\n  return node.kind === graphql_1.Kind.DIRECTIVE_DEFINITION;\n}\n\nexports.isDirectiveDefinitionNode = isDirectiveDefinitionNode;\n\nfunction mapFieldNamesToServiceName(fields, serviceName) {\n  return fields.reduce((prev, next) => {\n    prev[next.name.value] = serviceName;\n    return prev;\n  }, Object.create(null));\n}\n\nexports.mapFieldNamesToServiceName = mapFieldNamesToServiceName;\n\nfunction findDirectivesOnNode(node, directiveName) {\n  var _a, _b;\n\n  return (_b = (_a = node === null || node === void 0 ? void 0 : node.directives) === null || _a === void 0 ? void 0 : _a.filter(directive => directive.name.value === directiveName)) !== null && _b !== void 0 ? _b : [];\n}\n\nexports.findDirectivesOnNode = findDirectivesOnNode;\n\nfunction printFieldSet(selections) {\n  return selections.map(selection => graphql_1.stripIgnoredCharacters(graphql_1.print(selection))).join(' ');\n}\n\nexports.printFieldSet = printFieldSet;\n\nfunction findSelectionSetOnNode(node, directiveName, printedSelectionSet) {\n  var _a, _b, _c, _d;\n\n  return (_d = (_c = (_b = (_a = node === null || node === void 0 ? void 0 : node.directives) === null || _a === void 0 ? void 0 : _a.find(directive => {\n    var _a;\n\n    return directive.name.value === directiveName && ((_a = directive.arguments) === null || _a === void 0 ? void 0 : _a.some(argument => isStringValueNode(argument.value) && argument.value.value === printedSelectionSet));\n  })) === null || _b === void 0 ? void 0 : _b.arguments) === null || _c === void 0 ? void 0 : _c.find(argument => argument.name.value === 'fields')) === null || _d === void 0 ? void 0 : _d.value;\n}\n\nexports.findSelectionSetOnNode = findSelectionSetOnNode;\n\nfunction stripExternalFieldsFromTypeDefs(typeDefs, serviceName) {\n  const strippedFields = [];\n  const typeDefsWithoutExternalFields = graphql_1.visit(typeDefs, {\n    ObjectTypeExtension: removeExternalFieldsFromExtensionVisitor(strippedFields, serviceName),\n    InterfaceTypeExtension: removeExternalFieldsFromExtensionVisitor(strippedFields, serviceName)\n  });\n  return {\n    typeDefsWithoutExternalFields,\n    strippedFields\n  };\n}\n\nexports.stripExternalFieldsFromTypeDefs = stripExternalFieldsFromTypeDefs;\n\nfunction stripDescriptions(astNode) {\n  return graphql_1.visit(astNode, {\n    enter(node) {\n      return 'description' in node ? { ...node,\n        description: undefined\n      } : node;\n    }\n\n  });\n}\n\nexports.stripDescriptions = stripDescriptions;\n\nfunction stripTypeSystemDirectivesFromTypeDefs(typeDefs) {\n  const typeDefsWithoutTypeSystemDirectives = graphql_1.visit(typeDefs, {\n    Directive(node) {\n      if (node.name.value === 'deprecated' || node.name.value === 'specifiedBy') return;\n      const isApolloTypeSystemDirective = directives_1.default.some(({\n        name\n      }) => name === node.name.value);\n      return isApolloTypeSystemDirective ? undefined : null;\n    }\n\n  });\n  return typeDefsWithoutTypeSystemDirectives;\n}\n\nexports.stripTypeSystemDirectivesFromTypeDefs = stripTypeSystemDirectivesFromTypeDefs;\n\nfunction removeExternalFieldsFromExtensionVisitor(collector, serviceName) {\n  return node => {\n    let fields = node.fields;\n\n    if (fields) {\n      fields = fields.filter(field => {\n        const externalDirectives = findDirectivesOnNode(field, 'external');\n\n        if (externalDirectives.length > 0) {\n          collector.push({\n            field,\n            parentTypeName: node.name.value,\n            serviceName\n          });\n          return false;\n        }\n\n        return true;\n      });\n    }\n\n    return { ...node,\n      fields\n    };\n  };\n}\n\nfunction parseSelections(source) {\n  const parsed = graphql_1.parse(`{${source}}`);\n  utilities_1.assert(parsed.definitions.length === 1, `Unexpected } found in FieldSet`);\n  return parsed.definitions[0].selectionSet.selections;\n}\n\nexports.parseSelections = parseSelections;\n\nfunction hasMatchingFieldInDirectives({\n  directives,\n  fieldNameToMatch,\n  namedType\n}) {\n  return Boolean(namedType.astNode && directives.map(keyDirective => keyDirective.arguments && isStringValueNode(keyDirective.arguments[0].value) ? {\n    typeName: namedType.astNode.name.value,\n    keyArgument: keyDirective.arguments[0].value.value\n  } : null).filter(utilities_1.isNotNullOrUndefined).flatMap(selection => parseSelections(selection.keyArgument)).some(field => field.kind === graphql_1.Kind.FIELD && field.name.value === fieldNameToMatch));\n}\n\nexports.hasMatchingFieldInDirectives = hasMatchingFieldInDirectives;\n\nconst logServiceAndType = (serviceName, typeName, fieldName) => `[${serviceName}] ${typeName}${fieldName ? `.${fieldName} -> ` : ' -> '}`;\n\nexports.logServiceAndType = logServiceAndType;\n\nfunction logDirective(directiveName) {\n  return `[@${directiveName}] -> `;\n}\n\nexports.logDirective = logDirective;\n\nfunction errorWithCode(code, message, nodes) {\n  return new graphql_1.GraphQLError(message, nodes, undefined, undefined, undefined, undefined, {\n    code\n  });\n}\n\nexports.errorWithCode = errorWithCode;\n\nfunction findTypesContainingFieldWithReturnType(schema, node) {\n  const returnType = graphql_1.getNamedType(node.type);\n  if (!graphql_1.isObjectType(returnType)) return [];\n  const containingTypes = [];\n  const types = schema.getTypeMap();\n\n  for (const selectionSetType of Object.values(types)) {\n    if (!graphql_1.isObjectType(selectionSetType)) continue;\n    const allFields = selectionSetType.getFields();\n    Object.values(allFields).forEach(field => {\n      const fieldReturnType = graphql_1.getNamedType(field.type);\n\n      if (fieldReturnType === returnType) {\n        containingTypes.push(fieldReturnType);\n      }\n    });\n  }\n\n  return containingTypes;\n}\n\nexports.findTypesContainingFieldWithReturnType = findTypesContainingFieldWithReturnType;\n\nfunction findFieldsThatReturnType({\n  schema,\n  typeToFind\n}) {\n  if (!graphql_1.isObjectType(typeToFind)) return [];\n  const fieldsThatReturnType = [];\n  const types = schema.getTypeMap();\n\n  for (const selectionSetType of Object.values(types)) {\n    if (!graphql_1.isObjectType(selectionSetType)) continue;\n    const fieldsOnNamedType = selectionSetType.getFields();\n    Object.values(fieldsOnNamedType).forEach(field => {\n      const fieldReturnType = graphql_1.getNamedType(field.type);\n\n      if (fieldReturnType === typeToFind) {\n        fieldsThatReturnType.push(field);\n      }\n    });\n  }\n\n  return fieldsThatReturnType;\n}\n\nexports.findFieldsThatReturnType = findFieldsThatReturnType;\n\nfunction selectionIncludesField({\n  selections,\n  selectionSetType,\n  typeToFind,\n  fieldToFind\n}) {\n  for (const selection of selections) {\n    const selectionName = selection.name.value;\n    if (selectionName === fieldToFind && graphql_1.isEqualType(selectionSetType, typeToFind)) return true;\n    const typeIncludesField = selectionName && Object.keys(selectionSetType.getFields()).includes(selectionName);\n    if (!selectionName || !typeIncludesField) continue;\n    const returnType = graphql_1.getNamedType(selectionSetType.getFields()[selectionName].type);\n    if (!returnType || !graphql_1.isObjectType(returnType)) continue;\n    const subselections = selection.selectionSet && selection.selectionSet.selections;\n\n    if (subselections) {\n      const selectionDoesIncludeField = selectionIncludesField({\n        selectionSetType: returnType,\n        selections: subselections,\n        typeToFind,\n        fieldToFind\n      });\n      if (selectionDoesIncludeField) return true;\n    }\n  }\n\n  return false;\n}\n\nexports.selectionIncludesField = selectionIncludesField;\n\nfunction isTypeNodeAnEntity(node) {\n  let isEntity = false;\n  graphql_1.visit(node, {\n    Directive(directive) {\n      if (directive.name.value === 'key') {\n        isEntity = true;\n        return graphql_1.BREAK;\n      }\n    }\n\n  });\n  return isEntity;\n}\n\nexports.isTypeNodeAnEntity = isTypeNodeAnEntity;\n\nfunction diffTypeNodes(firstNode, secondNode) {\n  const fieldsDiff = Object.create(null);\n  const inputValuesDiff = Object.create(null);\n  const unionTypesDiff = Object.create(null);\n  const locationsDiff = new Set();\n  const argumentsDiff = Object.create(null);\n  const document = {\n    kind: graphql_1.Kind.DOCUMENT,\n    definitions: [firstNode, secondNode]\n  };\n\n  function fieldVisitor(node) {\n    const fieldName = node.name.value;\n    const type = graphql_1.print(node.type);\n\n    if (!fieldsDiff[fieldName]) {\n      fieldsDiff[fieldName] = [type];\n      return;\n    }\n\n    const fieldTypes = fieldsDiff[fieldName];\n\n    if (fieldTypes[0] === type) {\n      delete fieldsDiff[fieldName];\n    } else {\n      fieldTypes.push(type);\n    }\n  }\n\n  function inputValueVisitor(node) {\n    const fieldName = node.name.value;\n    const type = graphql_1.print(node.type);\n\n    if (!inputValuesDiff[fieldName]) {\n      inputValuesDiff[fieldName] = [type];\n      return;\n    }\n\n    const inputValueTypes = inputValuesDiff[fieldName];\n\n    if (inputValueTypes[0] === type) {\n      delete inputValuesDiff[fieldName];\n    } else {\n      inputValueTypes.push(type);\n    }\n  }\n\n  graphql_1.visit(document, {\n    FieldDefinition: fieldVisitor,\n    InputValueDefinition: inputValueVisitor,\n\n    UnionTypeDefinition(node) {\n      if (!node.types) return graphql_1.BREAK;\n\n      for (const namedTypeNode of node.types) {\n        const name = namedTypeNode.name.value;\n\n        if (unionTypesDiff[name]) {\n          delete unionTypesDiff[name];\n        } else {\n          unionTypesDiff[name] = true;\n        }\n      }\n    },\n\n    DirectiveDefinition(node) {\n      node.locations.forEach(location => {\n        const locationName = location.value;\n\n        if (locationsDiff.has(locationName)) {\n          locationsDiff.delete(locationName);\n        } else {\n          locationsDiff.add(locationName);\n        }\n      });\n      if (!node.arguments) return;\n      node.arguments.forEach(argument => {\n        const argumentName = argument.name.value;\n        const printedType = graphql_1.print(argument.type);\n\n        if (argumentsDiff[argumentName]) {\n          if (printedType === argumentsDiff[argumentName][0]) {\n            delete argumentsDiff[argumentName];\n          } else {\n            argumentsDiff[argumentName].push(printedType);\n          }\n        } else {\n          argumentsDiff[argumentName] = [printedType];\n        }\n      });\n    }\n\n  });\n  const typeNameDiff = firstNode.name.value === secondNode.name.value ? [] : [firstNode.name.value, secondNode.name.value];\n  const kindDiff = firstNode.kind === secondNode.kind ? [] : [firstNode.kind, secondNode.kind];\n  return {\n    name: typeNameDiff,\n    kind: kindDiff,\n    fields: fieldsDiff,\n    inputValues: inputValuesDiff,\n    unionTypes: unionTypesDiff,\n    locations: Array.from(locationsDiff),\n    args: argumentsDiff\n  };\n}\n\nexports.diffTypeNodes = diffTypeNodes;\n\nfunction typeNodesAreEquivalent(firstNode, secondNode) {\n  const {\n    name,\n    kind,\n    fields,\n    inputValues,\n    unionTypes,\n    locations,\n    args\n  } = diffTypeNodes(firstNode, secondNode);\n  return name.length === 0 && kind.length === 0 && Object.keys(fields).length === 0 && Object.keys(inputValues).length === 0 && Object.keys(unionTypes).length === 0 && locations.length === 0 && Object.keys(args).length === 0;\n}\n\nexports.typeNodesAreEquivalent = typeNodesAreEquivalent;\n\nfunction findTypeNodeInServiceList(typeName, serviceName, serviceList) {\n  var _a;\n\n  return (_a = serviceList.find(service => service.name === serviceName)) === null || _a === void 0 ? void 0 : _a.typeDefs.definitions.find(definition => {\n    var _a;\n\n    return 'name' in definition && ((_a = definition.name) === null || _a === void 0 ? void 0 : _a.value) === typeName;\n  });\n}\n\nexports.findTypeNodeInServiceList = findTypeNodeInServiceList;\nexports.defKindToExtKind = {\n  [graphql_1.Kind.SCALAR_TYPE_DEFINITION]: graphql_1.Kind.SCALAR_TYPE_EXTENSION,\n  [graphql_1.Kind.OBJECT_TYPE_DEFINITION]: graphql_1.Kind.OBJECT_TYPE_EXTENSION,\n  [graphql_1.Kind.INTERFACE_TYPE_DEFINITION]: graphql_1.Kind.INTERFACE_TYPE_EXTENSION,\n  [graphql_1.Kind.UNION_TYPE_DEFINITION]: graphql_1.Kind.UNION_TYPE_EXTENSION,\n  [graphql_1.Kind.ENUM_TYPE_DEFINITION]: graphql_1.Kind.ENUM_TYPE_EXTENSION,\n  [graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION]: graphql_1.Kind.INPUT_OBJECT_TYPE_EXTENSION\n};\nexports.executableDirectiveLocations = ['QUERY', 'MUTATION', 'SUBSCRIPTION', 'FIELD', 'FRAGMENT_DEFINITION', 'FRAGMENT_SPREAD', 'INLINE_FRAGMENT', 'VARIABLE_DEFINITION'];\n\nfunction isApolloTypeSystemDirective(directive) {\n  return directives_1.default.some(({\n    name\n  }) => name === directive.name);\n}\n\nexports.isApolloTypeSystemDirective = isApolloTypeSystemDirective;\n\nfunction isFederationDirective(directive) {\n  return directives_1.federationDirectives.some(({\n    name\n  }) => name === directive.name);\n}\n\nexports.isFederationDirective = isFederationDirective;\nexports.reservedRootFields = ['_service', '_entities'];\nexports.defaultRootOperationNameLookup = {\n  query: 'Query',\n  mutation: 'Mutation',\n  subscription: 'Subscription'\n};\n\nfunction compositionHasErrors(compositionResult) {\n  return 'errors' in compositionResult && !!compositionResult.errors;\n}\n\nexports.compositionHasErrors = compositionHasErrors;\n\nfunction assertCompositionSuccess(compositionResult, message) {\n  if (compositionHasErrors(compositionResult)) {\n    throw new Error(message || 'Unexpected test failure');\n  }\n}\n\nexports.assertCompositionSuccess = assertCompositionSuccess;\n\nfunction assertCompositionFailure(compositionResult, message) {\n  if (!compositionHasErrors(compositionResult)) {\n    throw new Error(message || 'Unexpected test failure');\n  }\n}\n\nexports.assertCompositionFailure = assertCompositionFailure;\n\nfunction getFederationMetadata(obj) {\n  var _a, _b, _c;\n\n  if (typeof obj === \"undefined\") return undefined;else if (graphql_1.isNamedType(obj)) return (_a = obj.extensions) === null || _a === void 0 ? void 0 : _a.federation;else if (graphql_1.isDirective(obj)) return (_b = obj.extensions) === null || _b === void 0 ? void 0 : _b.federation;else return (_c = obj.extensions) === null || _c === void 0 ? void 0 : _c.federation;\n}\n\nexports.getFederationMetadata = getFederationMetadata;","map":{"version":3,"sources":["../../src/composition/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFederationMetadata = exports.assertCompositionFailure = exports.assertCompositionSuccess = exports.compositionHasErrors = exports.defaultRootOperationNameLookup = exports.reservedRootFields = exports.isFederationDirective = exports.isApolloTypeSystemDirective = exports.executableDirectiveLocations = exports.defKindToExtKind = exports.findTypeNodeInServiceList = exports.typeNodesAreEquivalent = exports.diffTypeNodes = exports.isTypeNodeAnEntity = exports.selectionIncludesField = exports.findFieldsThatReturnType = exports.findTypesContainingFieldWithReturnType = exports.errorWithCode = exports.logDirective = exports.logServiceAndType = exports.hasMatchingFieldInDirectives = exports.parseSelections = exports.stripTypeSystemDirectivesFromTypeDefs = exports.stripDescriptions = exports.stripExternalFieldsFromTypeDefs = exports.findSelectionSetOnNode = exports.printFieldSet = exports.findDirectivesOnNode = exports.mapFieldNamesToServiceName = exports.isDirectiveDefinitionNode = exports.isStringValueNode = void 0;\nconst graphql_1 = require(\"graphql\");\nconst directives_1 = __importStar(require(\"../directives\"));\nconst utilities_1 = require(\"../utilities\");\nfunction isStringValueNode(node) {\n    return node.kind === graphql_1.Kind.STRING;\n}\nexports.isStringValueNode = isStringValueNode;\nfunction isDirectiveDefinitionNode(node) {\n    return node.kind === graphql_1.Kind.DIRECTIVE_DEFINITION;\n}\nexports.isDirectiveDefinitionNode = isDirectiveDefinitionNode;\nfunction mapFieldNamesToServiceName(fields, serviceName) {\n    return fields.reduce((prev, next) => {\n        prev[next.name.value] = serviceName;\n        return prev;\n    }, Object.create(null));\n}\nexports.mapFieldNamesToServiceName = mapFieldNamesToServiceName;\nfunction findDirectivesOnNode(node, directiveName) {\n    var _a, _b;\n    return ((_b = (_a = node === null || node === void 0 ? void 0 : node.directives) === null || _a === void 0 ? void 0 : _a.filter((directive) => directive.name.value === directiveName)) !== null && _b !== void 0 ? _b : []);\n}\nexports.findDirectivesOnNode = findDirectivesOnNode;\nfunction printFieldSet(selections) {\n    return selections\n        .map((selection) => graphql_1.stripIgnoredCharacters(graphql_1.print(selection)))\n        .join(' ');\n}\nexports.printFieldSet = printFieldSet;\nfunction findSelectionSetOnNode(node, directiveName, printedSelectionSet) {\n    var _a, _b, _c, _d;\n    return (_d = (_c = (_b = (_a = node === null || node === void 0 ? void 0 : node.directives) === null || _a === void 0 ? void 0 : _a.find(directive => {\n        var _a;\n        return directive.name.value === directiveName && ((_a = directive.arguments) === null || _a === void 0 ? void 0 : _a.some(argument => isStringValueNode(argument.value) &&\n            argument.value.value === printedSelectionSet));\n    })) === null || _b === void 0 ? void 0 : _b.arguments) === null || _c === void 0 ? void 0 : _c.find(argument => argument.name.value === 'fields')) === null || _d === void 0 ? void 0 : _d.value;\n}\nexports.findSelectionSetOnNode = findSelectionSetOnNode;\nfunction stripExternalFieldsFromTypeDefs(typeDefs, serviceName) {\n    const strippedFields = [];\n    const typeDefsWithoutExternalFields = graphql_1.visit(typeDefs, {\n        ObjectTypeExtension: removeExternalFieldsFromExtensionVisitor(strippedFields, serviceName),\n        InterfaceTypeExtension: removeExternalFieldsFromExtensionVisitor(strippedFields, serviceName),\n    });\n    return { typeDefsWithoutExternalFields, strippedFields };\n}\nexports.stripExternalFieldsFromTypeDefs = stripExternalFieldsFromTypeDefs;\nfunction stripDescriptions(astNode) {\n    return graphql_1.visit(astNode, {\n        enter(node) {\n            return 'description' in node ? { ...node, description: undefined } : node;\n        },\n    });\n}\nexports.stripDescriptions = stripDescriptions;\nfunction stripTypeSystemDirectivesFromTypeDefs(typeDefs) {\n    const typeDefsWithoutTypeSystemDirectives = graphql_1.visit(typeDefs, {\n        Directive(node) {\n            if (node.name.value === 'deprecated' || node.name.value === 'specifiedBy')\n                return;\n            const isApolloTypeSystemDirective = directives_1.default.some(({ name }) => name === node.name.value);\n            return isApolloTypeSystemDirective ? undefined : null;\n        },\n    });\n    return typeDefsWithoutTypeSystemDirectives;\n}\nexports.stripTypeSystemDirectivesFromTypeDefs = stripTypeSystemDirectivesFromTypeDefs;\nfunction removeExternalFieldsFromExtensionVisitor(collector, serviceName) {\n    return (node) => {\n        let fields = node.fields;\n        if (fields) {\n            fields = fields.filter(field => {\n                const externalDirectives = findDirectivesOnNode(field, 'external');\n                if (externalDirectives.length > 0) {\n                    collector.push({\n                        field,\n                        parentTypeName: node.name.value,\n                        serviceName,\n                    });\n                    return false;\n                }\n                return true;\n            });\n        }\n        return {\n            ...node,\n            fields,\n        };\n    };\n}\nfunction parseSelections(source) {\n    const parsed = graphql_1.parse(`{${source}}`);\n    utilities_1.assert(parsed.definitions.length === 1, `Unexpected } found in FieldSet`);\n    return parsed.definitions[0].selectionSet\n        .selections;\n}\nexports.parseSelections = parseSelections;\nfunction hasMatchingFieldInDirectives({ directives, fieldNameToMatch, namedType, }) {\n    return Boolean(namedType.astNode &&\n        directives\n            .map(keyDirective => keyDirective.arguments &&\n            isStringValueNode(keyDirective.arguments[0].value)\n            ? {\n                typeName: namedType.astNode.name.value,\n                keyArgument: keyDirective.arguments[0].value.value,\n            }\n            : null)\n            .filter(utilities_1.isNotNullOrUndefined)\n            .flatMap(selection => parseSelections(selection.keyArgument))\n            .some(field => field.kind === graphql_1.Kind.FIELD && field.name.value === fieldNameToMatch));\n}\nexports.hasMatchingFieldInDirectives = hasMatchingFieldInDirectives;\nconst logServiceAndType = (serviceName, typeName, fieldName) => `[${serviceName}] ${typeName}${fieldName ? `.${fieldName} -> ` : ' -> '}`;\nexports.logServiceAndType = logServiceAndType;\nfunction logDirective(directiveName) {\n    return `[@${directiveName}] -> `;\n}\nexports.logDirective = logDirective;\nfunction errorWithCode(code, message, nodes) {\n    return new graphql_1.GraphQLError(message, nodes, undefined, undefined, undefined, undefined, {\n        code,\n    });\n}\nexports.errorWithCode = errorWithCode;\nfunction findTypesContainingFieldWithReturnType(schema, node) {\n    const returnType = graphql_1.getNamedType(node.type);\n    if (!graphql_1.isObjectType(returnType))\n        return [];\n    const containingTypes = [];\n    const types = schema.getTypeMap();\n    for (const selectionSetType of Object.values(types)) {\n        if (!graphql_1.isObjectType(selectionSetType))\n            continue;\n        const allFields = selectionSetType.getFields();\n        Object.values(allFields).forEach(field => {\n            const fieldReturnType = graphql_1.getNamedType(field.type);\n            if (fieldReturnType === returnType) {\n                containingTypes.push(fieldReturnType);\n            }\n        });\n    }\n    return containingTypes;\n}\nexports.findTypesContainingFieldWithReturnType = findTypesContainingFieldWithReturnType;\nfunction findFieldsThatReturnType({ schema, typeToFind, }) {\n    if (!graphql_1.isObjectType(typeToFind))\n        return [];\n    const fieldsThatReturnType = [];\n    const types = schema.getTypeMap();\n    for (const selectionSetType of Object.values(types)) {\n        if (!graphql_1.isObjectType(selectionSetType))\n            continue;\n        const fieldsOnNamedType = selectionSetType.getFields();\n        Object.values(fieldsOnNamedType).forEach(field => {\n            const fieldReturnType = graphql_1.getNamedType(field.type);\n            if (fieldReturnType === typeToFind) {\n                fieldsThatReturnType.push(field);\n            }\n        });\n    }\n    return fieldsThatReturnType;\n}\nexports.findFieldsThatReturnType = findFieldsThatReturnType;\nfunction selectionIncludesField({ selections, selectionSetType, typeToFind, fieldToFind, }) {\n    for (const selection of selections) {\n        const selectionName = selection.name.value;\n        if (selectionName === fieldToFind &&\n            graphql_1.isEqualType(selectionSetType, typeToFind))\n            return true;\n        const typeIncludesField = selectionName &&\n            Object.keys(selectionSetType.getFields()).includes(selectionName);\n        if (!selectionName || !typeIncludesField)\n            continue;\n        const returnType = graphql_1.getNamedType(selectionSetType.getFields()[selectionName].type);\n        if (!returnType || !graphql_1.isObjectType(returnType))\n            continue;\n        const subselections = selection.selectionSet && selection.selectionSet.selections;\n        if (subselections) {\n            const selectionDoesIncludeField = selectionIncludesField({\n                selectionSetType: returnType,\n                selections: subselections,\n                typeToFind,\n                fieldToFind,\n            });\n            if (selectionDoesIncludeField)\n                return true;\n        }\n    }\n    return false;\n}\nexports.selectionIncludesField = selectionIncludesField;\nfunction isTypeNodeAnEntity(node) {\n    let isEntity = false;\n    graphql_1.visit(node, {\n        Directive(directive) {\n            if (directive.name.value === 'key') {\n                isEntity = true;\n                return graphql_1.BREAK;\n            }\n        },\n    });\n    return isEntity;\n}\nexports.isTypeNodeAnEntity = isTypeNodeAnEntity;\nfunction diffTypeNodes(firstNode, secondNode) {\n    const fieldsDiff = Object.create(null);\n    const inputValuesDiff = Object.create(null);\n    const unionTypesDiff = Object.create(null);\n    const locationsDiff = new Set();\n    const argumentsDiff = Object.create(null);\n    const document = {\n        kind: graphql_1.Kind.DOCUMENT,\n        definitions: [firstNode, secondNode],\n    };\n    function fieldVisitor(node) {\n        const fieldName = node.name.value;\n        const type = graphql_1.print(node.type);\n        if (!fieldsDiff[fieldName]) {\n            fieldsDiff[fieldName] = [type];\n            return;\n        }\n        const fieldTypes = fieldsDiff[fieldName];\n        if (fieldTypes[0] === type) {\n            delete fieldsDiff[fieldName];\n        }\n        else {\n            fieldTypes.push(type);\n        }\n    }\n    function inputValueVisitor(node) {\n        const fieldName = node.name.value;\n        const type = graphql_1.print(node.type);\n        if (!inputValuesDiff[fieldName]) {\n            inputValuesDiff[fieldName] = [type];\n            return;\n        }\n        const inputValueTypes = inputValuesDiff[fieldName];\n        if (inputValueTypes[0] === type) {\n            delete inputValuesDiff[fieldName];\n        }\n        else {\n            inputValueTypes.push(type);\n        }\n    }\n    graphql_1.visit(document, {\n        FieldDefinition: fieldVisitor,\n        InputValueDefinition: inputValueVisitor,\n        UnionTypeDefinition(node) {\n            if (!node.types)\n                return graphql_1.BREAK;\n            for (const namedTypeNode of node.types) {\n                const name = namedTypeNode.name.value;\n                if (unionTypesDiff[name]) {\n                    delete unionTypesDiff[name];\n                }\n                else {\n                    unionTypesDiff[name] = true;\n                }\n            }\n        },\n        DirectiveDefinition(node) {\n            node.locations.forEach(location => {\n                const locationName = location.value;\n                if (locationsDiff.has(locationName)) {\n                    locationsDiff.delete(locationName);\n                }\n                else {\n                    locationsDiff.add(locationName);\n                }\n            });\n            if (!node.arguments)\n                return;\n            node.arguments.forEach(argument => {\n                const argumentName = argument.name.value;\n                const printedType = graphql_1.print(argument.type);\n                if (argumentsDiff[argumentName]) {\n                    if (printedType === argumentsDiff[argumentName][0]) {\n                        delete argumentsDiff[argumentName];\n                    }\n                    else {\n                        argumentsDiff[argumentName].push(printedType);\n                    }\n                }\n                else {\n                    argumentsDiff[argumentName] = [printedType];\n                }\n            });\n        },\n    });\n    const typeNameDiff = firstNode.name.value === secondNode.name.value\n        ? []\n        : [firstNode.name.value, secondNode.name.value];\n    const kindDiff = firstNode.kind === secondNode.kind ? [] : [firstNode.kind, secondNode.kind];\n    return {\n        name: typeNameDiff,\n        kind: kindDiff,\n        fields: fieldsDiff,\n        inputValues: inputValuesDiff,\n        unionTypes: unionTypesDiff,\n        locations: Array.from(locationsDiff),\n        args: argumentsDiff,\n    };\n}\nexports.diffTypeNodes = diffTypeNodes;\nfunction typeNodesAreEquivalent(firstNode, secondNode) {\n    const { name, kind, fields, inputValues, unionTypes, locations, args } = diffTypeNodes(firstNode, secondNode);\n    return (name.length === 0 &&\n        kind.length === 0 &&\n        Object.keys(fields).length === 0 &&\n        Object.keys(inputValues).length === 0 &&\n        Object.keys(unionTypes).length === 0 &&\n        locations.length === 0 &&\n        Object.keys(args).length === 0);\n}\nexports.typeNodesAreEquivalent = typeNodesAreEquivalent;\nfunction findTypeNodeInServiceList(typeName, serviceName, serviceList) {\n    var _a;\n    return (_a = serviceList.find(service => service.name === serviceName)) === null || _a === void 0 ? void 0 : _a.typeDefs.definitions.find(definition => {\n        var _a;\n        return 'name' in definition\n            && ((_a = definition.name) === null || _a === void 0 ? void 0 : _a.value) === typeName;\n    });\n}\nexports.findTypeNodeInServiceList = findTypeNodeInServiceList;\nexports.defKindToExtKind = {\n    [graphql_1.Kind.SCALAR_TYPE_DEFINITION]: graphql_1.Kind.SCALAR_TYPE_EXTENSION,\n    [graphql_1.Kind.OBJECT_TYPE_DEFINITION]: graphql_1.Kind.OBJECT_TYPE_EXTENSION,\n    [graphql_1.Kind.INTERFACE_TYPE_DEFINITION]: graphql_1.Kind.INTERFACE_TYPE_EXTENSION,\n    [graphql_1.Kind.UNION_TYPE_DEFINITION]: graphql_1.Kind.UNION_TYPE_EXTENSION,\n    [graphql_1.Kind.ENUM_TYPE_DEFINITION]: graphql_1.Kind.ENUM_TYPE_EXTENSION,\n    [graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION]: graphql_1.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n};\nexports.executableDirectiveLocations = [\n    'QUERY',\n    'MUTATION',\n    'SUBSCRIPTION',\n    'FIELD',\n    'FRAGMENT_DEFINITION',\n    'FRAGMENT_SPREAD',\n    'INLINE_FRAGMENT',\n    'VARIABLE_DEFINITION',\n];\nfunction isApolloTypeSystemDirective(directive) {\n    return directives_1.default.some(({ name }) => name === directive.name);\n}\nexports.isApolloTypeSystemDirective = isApolloTypeSystemDirective;\nfunction isFederationDirective(directive) {\n    return directives_1.federationDirectives.some(({ name }) => name === directive.name);\n}\nexports.isFederationDirective = isFederationDirective;\nexports.reservedRootFields = ['_service', '_entities'];\nexports.defaultRootOperationNameLookup = {\n    query: 'Query',\n    mutation: 'Mutation',\n    subscription: 'Subscription',\n};\nfunction compositionHasErrors(compositionResult) {\n    return 'errors' in compositionResult && !!compositionResult.errors;\n}\nexports.compositionHasErrors = compositionHasErrors;\nfunction assertCompositionSuccess(compositionResult, message) {\n    if (compositionHasErrors(compositionResult)) {\n        throw new Error(message || 'Unexpected test failure');\n    }\n}\nexports.assertCompositionSuccess = assertCompositionSuccess;\nfunction assertCompositionFailure(compositionResult, message) {\n    if (!compositionHasErrors(compositionResult)) {\n        throw new Error(message || 'Unexpected test failure');\n    }\n}\nexports.assertCompositionFailure = assertCompositionFailure;\nfunction getFederationMetadata(obj) {\n    var _a, _b, _c;\n    if (typeof obj === \"undefined\")\n        return undefined;\n    else if (graphql_1.isNamedType(obj))\n        return (_a = obj.extensions) === null || _a === void 0 ? void 0 : _a.federation;\n    else if (graphql_1.isDirective(obj))\n        return (_b = obj.extensions) === null || _b === void 0 ? void 0 : _b.federation;\n    else\n        return (_c = obj.extensions) === null || _c === void 0 ? void 0 : _c.federation;\n}\nexports.getFederationMetadata = getFederationMetadata;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}