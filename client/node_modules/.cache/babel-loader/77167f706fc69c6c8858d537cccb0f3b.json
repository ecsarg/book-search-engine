{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLProject = void 0;\n\nconst path_1 = require(\"path\");\n\nconst fs_1 = require(\"fs\");\n\nconst vscode_uri_1 = __importDefault(require(\"vscode-uri\"));\n\nconst graphql_1 = require(\"graphql\");\n\nconst vscode_languageserver_1 = require(\"vscode-languageserver\");\n\nconst document_1 = require(\"../document\");\n\nconst config_1 = require(\"../config\");\n\nconst schema_1 = require(\"../providers/schema\");\n\nconst engine_1 = require(\"../engine\");\n\nconst fileAssociations = {\n  \".graphql\": \"graphql\",\n  \".gql\": \"graphql\",\n  \".js\": \"javascript\",\n  \".ts\": \"typescript\",\n  \".jsx\": \"javascriptreact\",\n  \".tsx\": \"typescriptreact\",\n  \".vue\": \"vue\",\n  \".py\": \"python\",\n  \".rb\": \"ruby\",\n  \".dart\": \"dart\",\n  \".re\": \"reason\",\n  \".ex\": \"elixir\",\n  \".exs\": \"elixir\"\n};\n\nclass GraphQLProject {\n  constructor({\n    config,\n    fileSet,\n    loadingHandler,\n    clientIdentity\n  }) {\n    this.needsValidation = false;\n    this.documentsByFile = new Map();\n    this.config = config;\n    this.fileSet = fileSet;\n    this.loadingHandler = loadingHandler;\n    this.schemaProvider = (0, schema_1.schemaProviderFromConfig)(config, clientIdentity);\n    const {\n      engine\n    } = config;\n\n    if (engine.apiKey) {\n      this.engineClient = new engine_1.ApolloEngineClient(engine.apiKey, engine.endpoint, clientIdentity);\n    }\n\n    this._isReady = false;\n    this.readyPromise = Promise.all(this.initialize()).then(() => {\n      this._isReady = true;\n    }).catch(error => {\n      console.error(error);\n      this.loadingHandler.showError(`Error initializing Apollo GraphQL project \"${this.displayName}\": ${error}`);\n    });\n  }\n\n  get isReady() {\n    return this._isReady;\n  }\n\n  get engine() {\n    if (!this.engineClient) {\n      throw new Error(`Unable to find ${config_1.keyEnvVar}`);\n    }\n\n    return this.engineClient;\n  }\n\n  get whenReady() {\n    return this.readyPromise;\n  }\n\n  updateConfig(config) {\n    this.config = config;\n    return this.initialize();\n  }\n\n  resolveSchema(config) {\n    this.lastLoadDate = +new Date();\n    return this.schemaProvider.resolveSchema(config);\n  }\n\n  resolveFederatedServiceSDL() {\n    return this.schemaProvider.resolveFederatedServiceSDL();\n  }\n\n  onSchemaChange(handler) {\n    this.lastLoadDate = +new Date();\n    return this.schemaProvider.onSchemaChange(handler);\n  }\n\n  onDiagnostics(handler) {\n    this._onDiagnostics = handler;\n  }\n\n  includesFile(uri) {\n    return this.fileSet.includesFile(uri);\n  }\n\n  async scanAllIncludedFiles() {\n    await this.loadingHandler.handle(`Loading queries for ${this.displayName}`, (async () => {\n      for (const filePath of this.fileSet.allFiles()) {\n        const uri = vscode_uri_1.default.file(filePath).toString();\n        if (this.documentsByFile.has(uri)) continue;\n        this.fileDidChange(uri);\n      }\n    })());\n  }\n\n  fileDidChange(uri) {\n    const filePath = vscode_uri_1.default.parse(uri).fsPath;\n    const extension = (0, path_1.extname)(filePath);\n    const languageId = fileAssociations[extension];\n    if (!languageId) return;\n    if (!(0, fs_1.lstatSync)(filePath).isFile()) return;\n    const contents = (0, fs_1.readFileSync)(filePath, \"utf8\");\n    const document = vscode_languageserver_1.TextDocument.create(uri, languageId, -1, contents);\n    this.documentDidChange(document);\n  }\n\n  fileWasDeleted(uri) {\n    this.removeGraphQLDocumentsFor(uri);\n    this.checkForDuplicateOperations();\n  }\n\n  documentDidChange(document) {\n    const documents = (0, document_1.extractGraphQLDocuments)(document, this.config.client && this.config.client.tagName);\n\n    if (documents) {\n      this.documentsByFile.set(document.uri, documents);\n      this.invalidate();\n    } else {\n      this.removeGraphQLDocumentsFor(document.uri);\n    }\n\n    this.checkForDuplicateOperations();\n  }\n\n  checkForDuplicateOperations() {\n    const operations = Object.create(null);\n\n    for (const document of this.documents) {\n      if (!document.ast) continue;\n\n      for (const definition of document.ast.definitions) {\n        if (definition.kind === graphql_1.Kind.OPERATION_DEFINITION && definition.name) {\n          if (operations[definition.name.value]) {\n            throw new Error(`️️There are multiple definitions for the \\`${definition.name.value}\\` operation. Please rename or remove all operations with the duplicated name before continuing.`);\n          }\n\n          operations[definition.name.value] = definition;\n        }\n      }\n    }\n  }\n\n  removeGraphQLDocumentsFor(uri) {\n    if (this.documentsByFile.has(uri)) {\n      this.documentsByFile.delete(uri);\n\n      if (this._onDiagnostics) {\n        this._onDiagnostics({\n          uri: uri,\n          diagnostics: []\n        });\n      }\n\n      this.invalidate();\n    }\n  }\n\n  invalidate() {\n    if (!this.needsValidation && this.isReady) {\n      setTimeout(() => {\n        this.validateIfNeeded();\n      }, 0);\n      this.needsValidation = true;\n    }\n  }\n\n  validateIfNeeded() {\n    if (!this.needsValidation || !this.isReady) return;\n    this.validate();\n    this.needsValidation = false;\n  }\n\n  clearAllDiagnostics() {\n    if (!this._onDiagnostics) return;\n\n    for (const uri of this.documentsByFile.keys()) {\n      this._onDiagnostics({\n        uri,\n        diagnostics: []\n      });\n    }\n  }\n\n  documentsAt(uri) {\n    return this.documentsByFile.get(uri);\n  }\n\n  documentAt(uri, position) {\n    const queryDocuments = this.documentsByFile.get(uri);\n    if (!queryDocuments) return undefined;\n    return queryDocuments.find(document => document.containsPosition(position));\n  }\n\n  get documents() {\n    const documents = [];\n\n    for (const documentsForFile of this.documentsByFile.values()) {\n      documents.push(...documentsForFile);\n    }\n\n    return documents;\n  }\n\n  get definitions() {\n    const definitions = [];\n\n    for (const document of this.documents) {\n      if (!document.ast) continue;\n      definitions.push(...document.ast.definitions);\n    }\n\n    return definitions;\n  }\n\n  definitionsAt(uri) {\n    const documents = this.documentsAt(uri);\n    if (!documents) return [];\n    const definitions = [];\n\n    for (const document of documents) {\n      if (!document.ast) continue;\n      definitions.push(...document.ast.definitions);\n    }\n\n    return definitions;\n  }\n\n  get typeSystemDefinitionsAndExtensions() {\n    const definitionsAndExtensions = [];\n\n    for (const document of this.documents) {\n      if (!document.ast) continue;\n\n      for (const definition of document.ast.definitions) {\n        if ((0, graphql_1.isTypeSystemDefinitionNode)(definition) || (0, graphql_1.isTypeSystemExtensionNode)(definition)) {\n          definitionsAndExtensions.push(definition);\n        }\n      }\n    }\n\n    return definitionsAndExtensions;\n  }\n\n}\n\nexports.GraphQLProject = GraphQLProject;","map":{"version":3,"sources":["../../src/project/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLProject = void 0;\nconst path_1 = require(\"path\");\nconst fs_1 = require(\"fs\");\nconst vscode_uri_1 = __importDefault(require(\"vscode-uri\"));\nconst graphql_1 = require(\"graphql\");\nconst vscode_languageserver_1 = require(\"vscode-languageserver\");\nconst document_1 = require(\"../document\");\nconst config_1 = require(\"../config\");\nconst schema_1 = require(\"../providers/schema\");\nconst engine_1 = require(\"../engine\");\nconst fileAssociations = {\n    \".graphql\": \"graphql\",\n    \".gql\": \"graphql\",\n    \".js\": \"javascript\",\n    \".ts\": \"typescript\",\n    \".jsx\": \"javascriptreact\",\n    \".tsx\": \"typescriptreact\",\n    \".vue\": \"vue\",\n    \".py\": \"python\",\n    \".rb\": \"ruby\",\n    \".dart\": \"dart\",\n    \".re\": \"reason\",\n    \".ex\": \"elixir\",\n    \".exs\": \"elixir\",\n};\nclass GraphQLProject {\n    constructor({ config, fileSet, loadingHandler, clientIdentity, }) {\n        this.needsValidation = false;\n        this.documentsByFile = new Map();\n        this.config = config;\n        this.fileSet = fileSet;\n        this.loadingHandler = loadingHandler;\n        this.schemaProvider = (0, schema_1.schemaProviderFromConfig)(config, clientIdentity);\n        const { engine } = config;\n        if (engine.apiKey) {\n            this.engineClient = new engine_1.ApolloEngineClient(engine.apiKey, engine.endpoint, clientIdentity);\n        }\n        this._isReady = false;\n        this.readyPromise = Promise.all(this.initialize())\n            .then(() => {\n            this._isReady = true;\n        })\n            .catch((error) => {\n            console.error(error);\n            this.loadingHandler.showError(`Error initializing Apollo GraphQL project \"${this.displayName}\": ${error}`);\n        });\n    }\n    get isReady() {\n        return this._isReady;\n    }\n    get engine() {\n        if (!this.engineClient) {\n            throw new Error(`Unable to find ${config_1.keyEnvVar}`);\n        }\n        return this.engineClient;\n    }\n    get whenReady() {\n        return this.readyPromise;\n    }\n    updateConfig(config) {\n        this.config = config;\n        return this.initialize();\n    }\n    resolveSchema(config) {\n        this.lastLoadDate = +new Date();\n        return this.schemaProvider.resolveSchema(config);\n    }\n    resolveFederatedServiceSDL() {\n        return this.schemaProvider.resolveFederatedServiceSDL();\n    }\n    onSchemaChange(handler) {\n        this.lastLoadDate = +new Date();\n        return this.schemaProvider.onSchemaChange(handler);\n    }\n    onDiagnostics(handler) {\n        this._onDiagnostics = handler;\n    }\n    includesFile(uri) {\n        return this.fileSet.includesFile(uri);\n    }\n    async scanAllIncludedFiles() {\n        await this.loadingHandler.handle(`Loading queries for ${this.displayName}`, (async () => {\n            for (const filePath of this.fileSet.allFiles()) {\n                const uri = vscode_uri_1.default.file(filePath).toString();\n                if (this.documentsByFile.has(uri))\n                    continue;\n                this.fileDidChange(uri);\n            }\n        })());\n    }\n    fileDidChange(uri) {\n        const filePath = vscode_uri_1.default.parse(uri).fsPath;\n        const extension = (0, path_1.extname)(filePath);\n        const languageId = fileAssociations[extension];\n        if (!languageId)\n            return;\n        if (!(0, fs_1.lstatSync)(filePath).isFile())\n            return;\n        const contents = (0, fs_1.readFileSync)(filePath, \"utf8\");\n        const document = vscode_languageserver_1.TextDocument.create(uri, languageId, -1, contents);\n        this.documentDidChange(document);\n    }\n    fileWasDeleted(uri) {\n        this.removeGraphQLDocumentsFor(uri);\n        this.checkForDuplicateOperations();\n    }\n    documentDidChange(document) {\n        const documents = (0, document_1.extractGraphQLDocuments)(document, this.config.client && this.config.client.tagName);\n        if (documents) {\n            this.documentsByFile.set(document.uri, documents);\n            this.invalidate();\n        }\n        else {\n            this.removeGraphQLDocumentsFor(document.uri);\n        }\n        this.checkForDuplicateOperations();\n    }\n    checkForDuplicateOperations() {\n        const operations = Object.create(null);\n        for (const document of this.documents) {\n            if (!document.ast)\n                continue;\n            for (const definition of document.ast.definitions) {\n                if (definition.kind === graphql_1.Kind.OPERATION_DEFINITION && definition.name) {\n                    if (operations[definition.name.value]) {\n                        throw new Error(`️️There are multiple definitions for the \\`${definition.name.value}\\` operation. Please rename or remove all operations with the duplicated name before continuing.`);\n                    }\n                    operations[definition.name.value] = definition;\n                }\n            }\n        }\n    }\n    removeGraphQLDocumentsFor(uri) {\n        if (this.documentsByFile.has(uri)) {\n            this.documentsByFile.delete(uri);\n            if (this._onDiagnostics) {\n                this._onDiagnostics({ uri: uri, diagnostics: [] });\n            }\n            this.invalidate();\n        }\n    }\n    invalidate() {\n        if (!this.needsValidation && this.isReady) {\n            setTimeout(() => {\n                this.validateIfNeeded();\n            }, 0);\n            this.needsValidation = true;\n        }\n    }\n    validateIfNeeded() {\n        if (!this.needsValidation || !this.isReady)\n            return;\n        this.validate();\n        this.needsValidation = false;\n    }\n    clearAllDiagnostics() {\n        if (!this._onDiagnostics)\n            return;\n        for (const uri of this.documentsByFile.keys()) {\n            this._onDiagnostics({ uri, diagnostics: [] });\n        }\n    }\n    documentsAt(uri) {\n        return this.documentsByFile.get(uri);\n    }\n    documentAt(uri, position) {\n        const queryDocuments = this.documentsByFile.get(uri);\n        if (!queryDocuments)\n            return undefined;\n        return queryDocuments.find((document) => document.containsPosition(position));\n    }\n    get documents() {\n        const documents = [];\n        for (const documentsForFile of this.documentsByFile.values()) {\n            documents.push(...documentsForFile);\n        }\n        return documents;\n    }\n    get definitions() {\n        const definitions = [];\n        for (const document of this.documents) {\n            if (!document.ast)\n                continue;\n            definitions.push(...document.ast.definitions);\n        }\n        return definitions;\n    }\n    definitionsAt(uri) {\n        const documents = this.documentsAt(uri);\n        if (!documents)\n            return [];\n        const definitions = [];\n        for (const document of documents) {\n            if (!document.ast)\n                continue;\n            definitions.push(...document.ast.definitions);\n        }\n        return definitions;\n    }\n    get typeSystemDefinitionsAndExtensions() {\n        const definitionsAndExtensions = [];\n        for (const document of this.documents) {\n            if (!document.ast)\n                continue;\n            for (const definition of document.ast.definitions) {\n                if ((0, graphql_1.isTypeSystemDefinitionNode)(definition) ||\n                    (0, graphql_1.isTypeSystemExtensionNode)(definition)) {\n                    definitionsAndExtensions.push(definition);\n                }\n            }\n        }\n        return definitionsAndExtensions;\n    }\n}\nexports.GraphQLProject = GraphQLProject;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"script"}