{"ast":null,"code":"var common = require('./common');\n\nvar _cd = require('./cd');\n\nvar path = require('path');\n\ncommon.register('dirs', _dirs, {\n  wrapOutput: false\n});\ncommon.register('pushd', _pushd, {\n  wrapOutput: false\n});\ncommon.register('popd', _popd, {\n  wrapOutput: false\n}); // Pushd/popd/dirs internals\n\nvar _dirStack = [];\n\nfunction _isStackIndex(index) {\n  return /^[\\-+]\\d+$/.test(index);\n}\n\nfunction _parseStackIndex(index) {\n  if (_isStackIndex(index)) {\n    if (Math.abs(index) < _dirStack.length + 1) {\n      // +1 for pwd\n      return /^-/.test(index) ? Number(index) - 1 : Number(index);\n    }\n\n    common.error(index + ': directory stack index out of range');\n  } else {\n    common.error(index + ': invalid number');\n  }\n}\n\nfunction _actualDirStack() {\n  return [process.cwd()].concat(_dirStack);\n} //@\n//@ ### pushd([options,] [dir | '-N' | '+N'])\n//@\n//@ Available options:\n//@\n//@ + `-n`: Suppresses the normal change of directory when adding directories to the stack, so that only the stack is manipulated.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `dir`: Sets the current working directory to the top of the stack, then executes the equivalent of `cd dir`.\n//@ + `+N`: Brings the Nth directory (counting from the left of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.\n//@ + `-N`: Brings the Nth directory (counting from the right of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ // process.cwd() === '/usr'\n//@ pushd('/etc'); // Returns /etc /usr\n//@ pushd('+1');   // Returns /usr /etc\n//@ ```\n//@\n//@ Save the current directory on the top of the directory stack and then `cd` to `dir`. With no arguments, `pushd` exchanges the top two directories. Returns an array of paths in the stack.\n\n\nfunction _pushd(options, dir) {\n  if (_isStackIndex(options)) {\n    dir = options;\n    options = '';\n  }\n\n  options = common.parseOptions(options, {\n    'n': 'no-cd',\n    'q': 'quiet'\n  });\n\n  var dirs = _actualDirStack();\n\n  if (dir === '+0') {\n    return dirs; // +0 is a noop\n  } else if (!dir) {\n    if (dirs.length > 1) {\n      dirs = dirs.splice(1, 1).concat(dirs);\n    } else {\n      return common.error('no other directory');\n    }\n  } else if (_isStackIndex(dir)) {\n    var n = _parseStackIndex(dir);\n\n    dirs = dirs.slice(n).concat(dirs.slice(0, n));\n  } else {\n    if (options['no-cd']) {\n      dirs.splice(1, 0, dir);\n    } else {\n      dirs.unshift(dir);\n    }\n  }\n\n  if (options['no-cd']) {\n    dirs = dirs.slice(1);\n  } else {\n    dir = path.resolve(dirs.shift());\n\n    _cd('', dir);\n  }\n\n  _dirStack = dirs;\n  return _dirs(options.quiet ? '-q' : '');\n}\n\nexports.pushd = _pushd; //@\n//@\n//@ ### popd([options,] ['-N' | '+N'])\n//@\n//@ Available options:\n//@\n//@ + `-n`: Suppress the normal directory change when removing directories from the stack, so that only the stack is manipulated.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `+N`: Removes the Nth directory (counting from the left of the list printed by dirs), starting with zero.\n//@ + `-N`: Removes the Nth directory (counting from the right of the list printed by dirs), starting with zero.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ echo(process.cwd()); // '/usr'\n//@ pushd('/etc');       // '/etc /usr'\n//@ echo(process.cwd()); // '/etc'\n//@ popd();              // '/usr'\n//@ echo(process.cwd()); // '/usr'\n//@ ```\n//@\n//@ When no arguments are given, `popd` removes the top directory from the stack and performs a `cd` to the new top directory. The elements are numbered from 0, starting at the first directory listed with dirs (i.e., `popd` is equivalent to `popd +0`). Returns an array of paths in the stack.\n\nfunction _popd(options, index) {\n  if (_isStackIndex(options)) {\n    index = options;\n    options = '';\n  }\n\n  options = common.parseOptions(options, {\n    'n': 'no-cd',\n    'q': 'quiet'\n  });\n\n  if (!_dirStack.length) {\n    return common.error('directory stack empty');\n  }\n\n  index = _parseStackIndex(index || '+0');\n\n  if (options['no-cd'] || index > 0 || _dirStack.length + index === 0) {\n    index = index > 0 ? index - 1 : index;\n\n    _dirStack.splice(index, 1);\n  } else {\n    var dir = path.resolve(_dirStack.shift());\n\n    _cd('', dir);\n  }\n\n  return _dirs(options.quiet ? '-q' : '');\n}\n\nexports.popd = _popd; //@\n//@\n//@ ### dirs([options | '+N' | '-N'])\n//@\n//@ Available options:\n//@\n//@ + `-c`: Clears the directory stack by deleting all of the elements.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `+N`: Displays the Nth directory (counting from the left of the list printed by dirs when invoked without options), starting with zero.\n//@ + `-N`: Displays the Nth directory (counting from the right of the list printed by dirs when invoked without options), starting with zero.\n//@\n//@ Display the list of currently remembered directories. Returns an array of paths in the stack, or a single path if `+N` or `-N` was specified.\n//@\n//@ See also: `pushd`, `popd`\n\nfunction _dirs(options, index) {\n  if (_isStackIndex(options)) {\n    index = options;\n    options = '';\n  }\n\n  options = common.parseOptions(options, {\n    'c': 'clear',\n    'q': 'quiet'\n  });\n\n  if (options.clear) {\n    _dirStack = [];\n    return _dirStack;\n  }\n\n  var stack = _actualDirStack();\n\n  if (index) {\n    index = _parseStackIndex(index);\n\n    if (index < 0) {\n      index = stack.length + index;\n    }\n\n    if (!options.quiet) {\n      common.log(stack[index]);\n    }\n\n    return stack[index];\n  }\n\n  if (!options.quiet) {\n    common.log(stack.join(' '));\n  }\n\n  return stack;\n}\n\nexports.dirs = _dirs;","map":{"version":3,"names":["common","require","_cd","path","register","_dirs","wrapOutput","_pushd","_popd","_dirStack","_isStackIndex","index","test","_parseStackIndex","Math","abs","length","Number","error","_actualDirStack","process","cwd","concat","options","dir","parseOptions","dirs","splice","n","slice","unshift","resolve","shift","quiet","exports","pushd","popd","clear","stack","log","join"],"sources":["/Users/Ellie/Desktop/projects/book-search-engine/client/node_modules/shelljs/src/dirs.js"],"sourcesContent":["var common = require('./common');\nvar _cd = require('./cd');\nvar path = require('path');\n\ncommon.register('dirs', _dirs, {\n  wrapOutput: false,\n});\ncommon.register('pushd', _pushd, {\n  wrapOutput: false,\n});\ncommon.register('popd', _popd, {\n  wrapOutput: false,\n});\n\n// Pushd/popd/dirs internals\nvar _dirStack = [];\n\nfunction _isStackIndex(index) {\n  return (/^[\\-+]\\d+$/).test(index);\n}\n\nfunction _parseStackIndex(index) {\n  if (_isStackIndex(index)) {\n    if (Math.abs(index) < _dirStack.length + 1) { // +1 for pwd\n      return (/^-/).test(index) ? Number(index) - 1 : Number(index);\n    }\n    common.error(index + ': directory stack index out of range');\n  } else {\n    common.error(index + ': invalid number');\n  }\n}\n\nfunction _actualDirStack() {\n  return [process.cwd()].concat(_dirStack);\n}\n\n//@\n//@ ### pushd([options,] [dir | '-N' | '+N'])\n//@\n//@ Available options:\n//@\n//@ + `-n`: Suppresses the normal change of directory when adding directories to the stack, so that only the stack is manipulated.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `dir`: Sets the current working directory to the top of the stack, then executes the equivalent of `cd dir`.\n//@ + `+N`: Brings the Nth directory (counting from the left of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.\n//@ + `-N`: Brings the Nth directory (counting from the right of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ // process.cwd() === '/usr'\n//@ pushd('/etc'); // Returns /etc /usr\n//@ pushd('+1');   // Returns /usr /etc\n//@ ```\n//@\n//@ Save the current directory on the top of the directory stack and then `cd` to `dir`. With no arguments, `pushd` exchanges the top two directories. Returns an array of paths in the stack.\nfunction _pushd(options, dir) {\n  if (_isStackIndex(options)) {\n    dir = options;\n    options = '';\n  }\n\n  options = common.parseOptions(options, {\n    'n': 'no-cd',\n    'q': 'quiet',\n  });\n\n  var dirs = _actualDirStack();\n\n  if (dir === '+0') {\n    return dirs; // +0 is a noop\n  } else if (!dir) {\n    if (dirs.length > 1) {\n      dirs = dirs.splice(1, 1).concat(dirs);\n    } else {\n      return common.error('no other directory');\n    }\n  } else if (_isStackIndex(dir)) {\n    var n = _parseStackIndex(dir);\n    dirs = dirs.slice(n).concat(dirs.slice(0, n));\n  } else {\n    if (options['no-cd']) {\n      dirs.splice(1, 0, dir);\n    } else {\n      dirs.unshift(dir);\n    }\n  }\n\n  if (options['no-cd']) {\n    dirs = dirs.slice(1);\n  } else {\n    dir = path.resolve(dirs.shift());\n    _cd('', dir);\n  }\n\n  _dirStack = dirs;\n  return _dirs(options.quiet ? '-q' : '');\n}\nexports.pushd = _pushd;\n\n//@\n//@\n//@ ### popd([options,] ['-N' | '+N'])\n//@\n//@ Available options:\n//@\n//@ + `-n`: Suppress the normal directory change when removing directories from the stack, so that only the stack is manipulated.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `+N`: Removes the Nth directory (counting from the left of the list printed by dirs), starting with zero.\n//@ + `-N`: Removes the Nth directory (counting from the right of the list printed by dirs), starting with zero.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ echo(process.cwd()); // '/usr'\n//@ pushd('/etc');       // '/etc /usr'\n//@ echo(process.cwd()); // '/etc'\n//@ popd();              // '/usr'\n//@ echo(process.cwd()); // '/usr'\n//@ ```\n//@\n//@ When no arguments are given, `popd` removes the top directory from the stack and performs a `cd` to the new top directory. The elements are numbered from 0, starting at the first directory listed with dirs (i.e., `popd` is equivalent to `popd +0`). Returns an array of paths in the stack.\nfunction _popd(options, index) {\n  if (_isStackIndex(options)) {\n    index = options;\n    options = '';\n  }\n\n  options = common.parseOptions(options, {\n    'n': 'no-cd',\n    'q': 'quiet',\n  });\n\n  if (!_dirStack.length) {\n    return common.error('directory stack empty');\n  }\n\n  index = _parseStackIndex(index || '+0');\n\n  if (options['no-cd'] || index > 0 || _dirStack.length + index === 0) {\n    index = index > 0 ? index - 1 : index;\n    _dirStack.splice(index, 1);\n  } else {\n    var dir = path.resolve(_dirStack.shift());\n    _cd('', dir);\n  }\n\n  return _dirs(options.quiet ? '-q' : '');\n}\nexports.popd = _popd;\n\n//@\n//@\n//@ ### dirs([options | '+N' | '-N'])\n//@\n//@ Available options:\n//@\n//@ + `-c`: Clears the directory stack by deleting all of the elements.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `+N`: Displays the Nth directory (counting from the left of the list printed by dirs when invoked without options), starting with zero.\n//@ + `-N`: Displays the Nth directory (counting from the right of the list printed by dirs when invoked without options), starting with zero.\n//@\n//@ Display the list of currently remembered directories. Returns an array of paths in the stack, or a single path if `+N` or `-N` was specified.\n//@\n//@ See also: `pushd`, `popd`\nfunction _dirs(options, index) {\n  if (_isStackIndex(options)) {\n    index = options;\n    options = '';\n  }\n\n  options = common.parseOptions(options, {\n    'c': 'clear',\n    'q': 'quiet',\n  });\n\n  if (options.clear) {\n    _dirStack = [];\n    return _dirStack;\n  }\n\n  var stack = _actualDirStack();\n\n  if (index) {\n    index = _parseStackIndex(index);\n\n    if (index < 0) {\n      index = stack.length + index;\n    }\n\n    if (!options.quiet) {\n      common.log(stack[index]);\n    }\n    return stack[index];\n  }\n\n  if (!options.quiet) {\n    common.log(stack.join(' '));\n  }\n\n  return stack;\n}\nexports.dirs = _dirs;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}